# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class PartialFileDescriptorType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'index': 'PartialFileRandomIndexType',
        'video_stream': 'list[VideoComponentType]',
        'drop_frame': 'bool',
        'transcoder_version': 'str',
        'dv_descriptor': 'PartialFileDVDescriptorType',
        'label': 'str',
        'container_component': 'ContainerComponentType',
        'rounded_time_base': 'int',
        'start_timecode': 'int',
        'audio_stream': 'list[AudioComponentType]'
    }

    attribute_map = {
        'index': 'index',
        'video_stream': 'videoStream',
        'drop_frame': 'dropFrame',
        'transcoder_version': 'transcoderVersion',
        'dv_descriptor': 'dvDescriptor',
        'label': 'label',
        'container_component': 'containerComponent',
        'rounded_time_base': 'roundedTimeBase',
        'start_timecode': 'startTimecode',
        'audio_stream': 'audioStream'
    }

    def __init__(self, index=None, video_stream=None, drop_frame=None, transcoder_version=None, dv_descriptor=None, label=None, container_component=None, rounded_time_base=None, start_timecode=None, audio_stream=None):  # noqa: E501
        """PartialFileDescriptorType - a model defined in OpenAPI"""  # noqa: E501

        self._index = None
        self._video_stream = None
        self._drop_frame = None
        self._transcoder_version = None
        self._dv_descriptor = None
        self._label = None
        self._container_component = None
        self._rounded_time_base = None
        self._start_timecode = None
        self._audio_stream = None
        self.discriminator = None

        if index is not None:
            self.index = index
        if video_stream is not None:
            self.video_stream = video_stream
        if drop_frame is not None:
            self.drop_frame = drop_frame
        if transcoder_version is not None:
            self.transcoder_version = transcoder_version
        if dv_descriptor is not None:
            self.dv_descriptor = dv_descriptor
        if label is not None:
            self.label = label
        if container_component is not None:
            self.container_component = container_component
        if rounded_time_base is not None:
            self.rounded_time_base = rounded_time_base
        if start_timecode is not None:
            self.start_timecode = start_timecode
        if audio_stream is not None:
            self.audio_stream = audio_stream

    @property
    def index(self):
        """Gets the index of this PartialFileDescriptorType.  # noqa: E501


        :return: The index of this PartialFileDescriptorType.  # noqa: E501
        :rtype: PartialFileRandomIndexType
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this PartialFileDescriptorType.


        :param index: The index of this PartialFileDescriptorType.  # noqa: E501
        :type: PartialFileRandomIndexType
        """

        self._index = index

    @property
    def video_stream(self):
        """Gets the video_stream of this PartialFileDescriptorType.  # noqa: E501


        :return: The video_stream of this PartialFileDescriptorType.  # noqa: E501
        :rtype: list[VideoComponentType]
        """
        return self._video_stream

    @video_stream.setter
    def video_stream(self, video_stream):
        """Sets the video_stream of this PartialFileDescriptorType.


        :param video_stream: The video_stream of this PartialFileDescriptorType.  # noqa: E501
        :type: list[VideoComponentType]
        """

        self._video_stream = video_stream

    @property
    def drop_frame(self):
        """Gets the drop_frame of this PartialFileDescriptorType.  # noqa: E501


        :return: The drop_frame of this PartialFileDescriptorType.  # noqa: E501
        :rtype: bool
        """
        return self._drop_frame

    @drop_frame.setter
    def drop_frame(self, drop_frame):
        """Sets the drop_frame of this PartialFileDescriptorType.


        :param drop_frame: The drop_frame of this PartialFileDescriptorType.  # noqa: E501
        :type: bool
        """

        self._drop_frame = drop_frame

    @property
    def transcoder_version(self):
        """Gets the transcoder_version of this PartialFileDescriptorType.  # noqa: E501


        :return: The transcoder_version of this PartialFileDescriptorType.  # noqa: E501
        :rtype: str
        """
        return self._transcoder_version

    @transcoder_version.setter
    def transcoder_version(self, transcoder_version):
        """Sets the transcoder_version of this PartialFileDescriptorType.


        :param transcoder_version: The transcoder_version of this PartialFileDescriptorType.  # noqa: E501
        :type: str
        """

        self._transcoder_version = transcoder_version

    @property
    def dv_descriptor(self):
        """Gets the dv_descriptor of this PartialFileDescriptorType.  # noqa: E501


        :return: The dv_descriptor of this PartialFileDescriptorType.  # noqa: E501
        :rtype: PartialFileDVDescriptorType
        """
        return self._dv_descriptor

    @dv_descriptor.setter
    def dv_descriptor(self, dv_descriptor):
        """Sets the dv_descriptor of this PartialFileDescriptorType.


        :param dv_descriptor: The dv_descriptor of this PartialFileDescriptorType.  # noqa: E501
        :type: PartialFileDVDescriptorType
        """

        self._dv_descriptor = dv_descriptor

    @property
    def label(self):
        """Gets the label of this PartialFileDescriptorType.  # noqa: E501


        :return: The label of this PartialFileDescriptorType.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this PartialFileDescriptorType.


        :param label: The label of this PartialFileDescriptorType.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def container_component(self):
        """Gets the container_component of this PartialFileDescriptorType.  # noqa: E501


        :return: The container_component of this PartialFileDescriptorType.  # noqa: E501
        :rtype: ContainerComponentType
        """
        return self._container_component

    @container_component.setter
    def container_component(self, container_component):
        """Sets the container_component of this PartialFileDescriptorType.


        :param container_component: The container_component of this PartialFileDescriptorType.  # noqa: E501
        :type: ContainerComponentType
        """

        self._container_component = container_component

    @property
    def rounded_time_base(self):
        """Gets the rounded_time_base of this PartialFileDescriptorType.  # noqa: E501


        :return: The rounded_time_base of this PartialFileDescriptorType.  # noqa: E501
        :rtype: int
        """
        return self._rounded_time_base

    @rounded_time_base.setter
    def rounded_time_base(self, rounded_time_base):
        """Sets the rounded_time_base of this PartialFileDescriptorType.


        :param rounded_time_base: The rounded_time_base of this PartialFileDescriptorType.  # noqa: E501
        :type: int
        """

        self._rounded_time_base = rounded_time_base

    @property
    def start_timecode(self):
        """Gets the start_timecode of this PartialFileDescriptorType.  # noqa: E501


        :return: The start_timecode of this PartialFileDescriptorType.  # noqa: E501
        :rtype: int
        """
        return self._start_timecode

    @start_timecode.setter
    def start_timecode(self, start_timecode):
        """Sets the start_timecode of this PartialFileDescriptorType.


        :param start_timecode: The start_timecode of this PartialFileDescriptorType.  # noqa: E501
        :type: int
        """

        self._start_timecode = start_timecode

    @property
    def audio_stream(self):
        """Gets the audio_stream of this PartialFileDescriptorType.  # noqa: E501


        :return: The audio_stream of this PartialFileDescriptorType.  # noqa: E501
        :rtype: list[AudioComponentType]
        """
        return self._audio_stream

    @audio_stream.setter
    def audio_stream(self, audio_stream):
        """Sets the audio_stream of this PartialFileDescriptorType.


        :param audio_stream: The audio_stream of this PartialFileDescriptorType.  # noqa: E501
        :type: list[AudioComponentType]
        """

        self._audio_stream = audio_stream

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartialFileDescriptorType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
