# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class AutoProjectionRuleTypeInputFilters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'input_filter': 'list[str]',
        'bulky_metadata_keys_regex': 'str'
    }

    attribute_map = {
        'input_filter': 'inputFilter',
        'bulky_metadata_keys_regex': 'bulkyMetadataKeysRegex'
    }

    def __init__(self, input_filter=None, bulky_metadata_keys_regex=None):  # noqa: E501
        """AutoProjectionRuleTypeInputFilters - a model defined in OpenAPI"""  # noqa: E501

        self._input_filter = None
        self._bulky_metadata_keys_regex = None
        self.discriminator = None

        if input_filter is not None:
            self.input_filter = input_filter
        if bulky_metadata_keys_regex is not None:
            self.bulky_metadata_keys_regex = bulky_metadata_keys_regex

    @property
    def input_filter(self):
        """Gets the input_filter of this AutoProjectionRuleTypeInputFilters.  # noqa: E501


        :return: The input_filter of this AutoProjectionRuleTypeInputFilters.  # noqa: E501
        :rtype: list[str]
        """
        return self._input_filter

    @input_filter.setter
    def input_filter(self, input_filter):
        """Sets the input_filter of this AutoProjectionRuleTypeInputFilters.


        :param input_filter: The input_filter of this AutoProjectionRuleTypeInputFilters.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["oldMetadata", "shapeDocument"]  # noqa: E501
        if not set(input_filter).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `input_filter` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(input_filter) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._input_filter = input_filter

    @property
    def bulky_metadata_keys_regex(self):
        """Gets the bulky_metadata_keys_regex of this AutoProjectionRuleTypeInputFilters.  # noqa: E501


        :return: The bulky_metadata_keys_regex of this AutoProjectionRuleTypeInputFilters.  # noqa: E501
        :rtype: str
        """
        return self._bulky_metadata_keys_regex

    @bulky_metadata_keys_regex.setter
    def bulky_metadata_keys_regex(self, bulky_metadata_keys_regex):
        """Sets the bulky_metadata_keys_regex of this AutoProjectionRuleTypeInputFilters.


        :param bulky_metadata_keys_regex: The bulky_metadata_keys_regex of this AutoProjectionRuleTypeInputFilters.  # noqa: E501
        :type: str
        """

        self._bulky_metadata_keys_regex = bulky_metadata_keys_regex

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutoProjectionRuleTypeInputFilters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
