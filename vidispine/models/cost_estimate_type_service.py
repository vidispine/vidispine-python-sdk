# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class CostEstimateTypeService(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'status': 'str',
        'resource': 'str',
        'name': 'str',
        'state': 'str',
        'cost': 'AmountType',
        'message': 'str',
        'type': 'str'
    }

    attribute_map = {
        'status': 'status',
        'resource': 'resource',
        'name': 'name',
        'state': 'state',
        'cost': 'cost',
        'message': 'message',
        'type': 'type'
    }

    def __init__(self, status=None, resource=None, name=None, state=None, cost=None, message=None, type=None):  # noqa: E501
        """CostEstimateTypeService - a model defined in OpenAPI"""  # noqa: E501

        self._status = None
        self._resource = None
        self._name = None
        self._state = None
        self._cost = None
        self._message = None
        self._type = None
        self.discriminator = None

        if status is not None:
            self.status = status
        self.resource = resource
        if name is not None:
            self.name = name
        if state is not None:
            self.state = state
        if cost is not None:
            self.cost = cost
        if message is not None:
            self.message = message
        if type is not None:
            self.type = type

    @property
    def status(self):
        """Gets the status of this CostEstimateTypeService.  # noqa: E501


        :return: The status of this CostEstimateTypeService.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CostEstimateTypeService.


        :param status: The status of this CostEstimateTypeService.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def resource(self):
        """Gets the resource of this CostEstimateTypeService.  # noqa: E501


        :return: The resource of this CostEstimateTypeService.  # noqa: E501
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this CostEstimateTypeService.


        :param resource: The resource of this CostEstimateTypeService.  # noqa: E501
        :type: str
        """
        if resource is None:
            raise ValueError("Invalid value for `resource`, must not be `None`")  # noqa: E501
        if resource is not None and not re.search(r'([_A-Za-z]+-)?([A-Za-z_][A-Za-z0-9_]*-|(([A-Za-z_][A-Za-z0-9_]*)?\*))([0-9]{1}[0-9]{0,31})', resource):  # noqa: E501
            raise ValueError(r"Invalid value for `resource`, must be a follow pattern or equal to `/([_A-Za-z]+-)?([A-Za-z_][A-Za-z0-9_]*-|(([A-Za-z_][A-Za-z0-9_]*)?\*))([0-9]{1}[0-9]{0,31})/`")  # noqa: E501

        self._resource = resource

    @property
    def name(self):
        """Gets the name of this CostEstimateTypeService.  # noqa: E501


        :return: The name of this CostEstimateTypeService.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CostEstimateTypeService.


        :param name: The name of this CostEstimateTypeService.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this CostEstimateTypeService.  # noqa: E501


        :return: The state of this CostEstimateTypeService.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CostEstimateTypeService.


        :param state: The state of this CostEstimateTypeService.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def cost(self):
        """Gets the cost of this CostEstimateTypeService.  # noqa: E501


        :return: The cost of this CostEstimateTypeService.  # noqa: E501
        :rtype: AmountType
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this CostEstimateTypeService.


        :param cost: The cost of this CostEstimateTypeService.  # noqa: E501
        :type: AmountType
        """

        self._cost = cost

    @property
    def message(self):
        """Gets the message of this CostEstimateTypeService.  # noqa: E501


        :return: The message of this CostEstimateTypeService.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CostEstimateTypeService.


        :param message: The message of this CostEstimateTypeService.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def type(self):
        """Gets the type of this CostEstimateTypeService.  # noqa: E501


        :return: The type of this CostEstimateTypeService.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CostEstimateTypeService.


        :param type: The type of this CostEstimateTypeService.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CostEstimateTypeService):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
