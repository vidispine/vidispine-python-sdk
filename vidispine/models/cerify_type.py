# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class CerifyType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cleanup': 'bool',
        'media_location': 'list[CerifyTypeMediaLocation]',
        'address': 'str'
    }

    attribute_map = {
        'cleanup': 'cleanup',
        'media_location': 'mediaLocation',
        'address': 'address'
    }

    def __init__(self, cleanup=None, media_location=None, address=None):  # noqa: E501
        """CerifyType - a model defined in OpenAPI"""  # noqa: E501

        self._cleanup = None
        self._media_location = None
        self._address = None
        self.discriminator = None

        if cleanup is not None:
            self.cleanup = cleanup
        if media_location is not None:
            self.media_location = media_location
        self.address = address

    @property
    def cleanup(self):
        """Gets the cleanup of this CerifyType.  # noqa: E501


        :return: The cleanup of this CerifyType.  # noqa: E501
        :rtype: bool
        """
        return self._cleanup

    @cleanup.setter
    def cleanup(self, cleanup):
        """Sets the cleanup of this CerifyType.


        :param cleanup: The cleanup of this CerifyType.  # noqa: E501
        :type: bool
        """

        self._cleanup = cleanup

    @property
    def media_location(self):
        """Gets the media_location of this CerifyType.  # noqa: E501


        :return: The media_location of this CerifyType.  # noqa: E501
        :rtype: list[CerifyTypeMediaLocation]
        """
        return self._media_location

    @media_location.setter
    def media_location(self, media_location):
        """Sets the media_location of this CerifyType.


        :param media_location: The media_location of this CerifyType.  # noqa: E501
        :type: list[CerifyTypeMediaLocation]
        """

        self._media_location = media_location

    @property
    def address(self):
        """Gets the address of this CerifyType.  # noqa: E501


        :return: The address of this CerifyType.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CerifyType.


        :param address: The address of this CerifyType.  # noqa: E501
        :type: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CerifyType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
