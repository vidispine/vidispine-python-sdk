# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class MetadataSchemaMigrationType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'rename': 'list[MetadataSchemaRenameOperationType]',
        'move': 'list[MetadataSchemaMoveOperationType]',
        'done': 'bool',
        'id': 'int',
        'migrations_left': 'int',
        'delete': 'list[MetadataSchemaDeleteOperationType]'
    }

    attribute_map = {
        'rename': 'rename',
        'move': 'move',
        'done': 'done',
        'id': 'id',
        'migrations_left': 'migrationsLeft',
        'delete': 'delete'
    }

    def __init__(self, rename=None, move=None, done=None, id=None, migrations_left=None, delete=None):  # noqa: E501
        """MetadataSchemaMigrationType - a model defined in OpenAPI"""  # noqa: E501

        self._rename = None
        self._move = None
        self._done = None
        self._id = None
        self._migrations_left = None
        self._delete = None
        self.discriminator = None

        if rename is not None:
            self.rename = rename
        if move is not None:
            self.move = move
        if done is not None:
            self.done = done
        if id is not None:
            self.id = id
        if migrations_left is not None:
            self.migrations_left = migrations_left
        if delete is not None:
            self.delete = delete

    @property
    def rename(self):
        """Gets the rename of this MetadataSchemaMigrationType.  # noqa: E501


        :return: The rename of this MetadataSchemaMigrationType.  # noqa: E501
        :rtype: list[MetadataSchemaRenameOperationType]
        """
        return self._rename

    @rename.setter
    def rename(self, rename):
        """Sets the rename of this MetadataSchemaMigrationType.


        :param rename: The rename of this MetadataSchemaMigrationType.  # noqa: E501
        :type: list[MetadataSchemaRenameOperationType]
        """

        self._rename = rename

    @property
    def move(self):
        """Gets the move of this MetadataSchemaMigrationType.  # noqa: E501


        :return: The move of this MetadataSchemaMigrationType.  # noqa: E501
        :rtype: list[MetadataSchemaMoveOperationType]
        """
        return self._move

    @move.setter
    def move(self, move):
        """Sets the move of this MetadataSchemaMigrationType.


        :param move: The move of this MetadataSchemaMigrationType.  # noqa: E501
        :type: list[MetadataSchemaMoveOperationType]
        """

        self._move = move

    @property
    def done(self):
        """Gets the done of this MetadataSchemaMigrationType.  # noqa: E501


        :return: The done of this MetadataSchemaMigrationType.  # noqa: E501
        :rtype: bool
        """
        return self._done

    @done.setter
    def done(self, done):
        """Sets the done of this MetadataSchemaMigrationType.


        :param done: The done of this MetadataSchemaMigrationType.  # noqa: E501
        :type: bool
        """

        self._done = done

    @property
    def id(self):
        """Gets the id of this MetadataSchemaMigrationType.  # noqa: E501


        :return: The id of this MetadataSchemaMigrationType.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MetadataSchemaMigrationType.


        :param id: The id of this MetadataSchemaMigrationType.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def migrations_left(self):
        """Gets the migrations_left of this MetadataSchemaMigrationType.  # noqa: E501


        :return: The migrations_left of this MetadataSchemaMigrationType.  # noqa: E501
        :rtype: int
        """
        return self._migrations_left

    @migrations_left.setter
    def migrations_left(self, migrations_left):
        """Sets the migrations_left of this MetadataSchemaMigrationType.


        :param migrations_left: The migrations_left of this MetadataSchemaMigrationType.  # noqa: E501
        :type: int
        """

        self._migrations_left = migrations_left

    @property
    def delete(self):
        """Gets the delete of this MetadataSchemaMigrationType.  # noqa: E501


        :return: The delete of this MetadataSchemaMigrationType.  # noqa: E501
        :rtype: list[MetadataSchemaDeleteOperationType]
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this MetadataSchemaMigrationType.


        :param delete: The delete of this MetadataSchemaMigrationType.  # noqa: E501
        :type: list[MetadataSchemaDeleteOperationType]
        """

        self._delete = delete

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataSchemaMigrationType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
