# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class CORSConfigurationEntryRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'origin': 'list[str]',
        'path_regex': 'list[str]',
        'origin_regex': 'list[str]',
        'method': 'list[str]',
        'header_regex': 'list[KeyValuePairType]'
    }

    attribute_map = {
        'origin': 'origin',
        'path_regex': 'pathRegex',
        'origin_regex': 'originRegex',
        'method': 'method',
        'header_regex': 'headerRegex'
    }

    def __init__(self, origin=None, path_regex=None, origin_regex=None, method=None, header_regex=None):  # noqa: E501
        """CORSConfigurationEntryRequest - a model defined in OpenAPI"""  # noqa: E501

        self._origin = None
        self._path_regex = None
        self._origin_regex = None
        self._method = None
        self._header_regex = None
        self.discriminator = None

        if origin is not None:
            self.origin = origin
        if path_regex is not None:
            self.path_regex = path_regex
        if origin_regex is not None:
            self.origin_regex = origin_regex
        if method is not None:
            self.method = method
        if header_regex is not None:
            self.header_regex = header_regex

    @property
    def origin(self):
        """Gets the origin of this CORSConfigurationEntryRequest.  # noqa: E501


        :return: The origin of this CORSConfigurationEntryRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this CORSConfigurationEntryRequest.


        :param origin: The origin of this CORSConfigurationEntryRequest.  # noqa: E501
        :type: list[str]
        """

        self._origin = origin

    @property
    def path_regex(self):
        """Gets the path_regex of this CORSConfigurationEntryRequest.  # noqa: E501


        :return: The path_regex of this CORSConfigurationEntryRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._path_regex

    @path_regex.setter
    def path_regex(self, path_regex):
        """Sets the path_regex of this CORSConfigurationEntryRequest.


        :param path_regex: The path_regex of this CORSConfigurationEntryRequest.  # noqa: E501
        :type: list[str]
        """

        self._path_regex = path_regex

    @property
    def origin_regex(self):
        """Gets the origin_regex of this CORSConfigurationEntryRequest.  # noqa: E501


        :return: The origin_regex of this CORSConfigurationEntryRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._origin_regex

    @origin_regex.setter
    def origin_regex(self, origin_regex):
        """Sets the origin_regex of this CORSConfigurationEntryRequest.


        :param origin_regex: The origin_regex of this CORSConfigurationEntryRequest.  # noqa: E501
        :type: list[str]
        """

        self._origin_regex = origin_regex

    @property
    def method(self):
        """Gets the method of this CORSConfigurationEntryRequest.  # noqa: E501


        :return: The method of this CORSConfigurationEntryRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this CORSConfigurationEntryRequest.


        :param method: The method of this CORSConfigurationEntryRequest.  # noqa: E501
        :type: list[str]
        """

        self._method = method

    @property
    def header_regex(self):
        """Gets the header_regex of this CORSConfigurationEntryRequest.  # noqa: E501


        :return: The header_regex of this CORSConfigurationEntryRequest.  # noqa: E501
        :rtype: list[KeyValuePairType]
        """
        return self._header_regex

    @header_regex.setter
    def header_regex(self, header_regex):
        """Sets the header_regex of this CORSConfigurationEntryRequest.


        :param header_regex: The header_regex of this CORSConfigurationEntryRequest.  # noqa: E501
        :type: list[KeyValuePairType]
        """

        self._header_regex = header_regex

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CORSConfigurationEntryRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
