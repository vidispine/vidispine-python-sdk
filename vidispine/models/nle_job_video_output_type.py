# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class NLEJobVideoOutputType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'gop_size': 'int',
        'sequence': 'int',
        'max_b_frames': 'int',
        'uri': 'str',
        'pixel_format': 'str',
        'preset': 'list[str]',
        'bitrate': 'int',
        'codec': 'str'
    }

    attribute_map = {
        'gop_size': 'gopSize',
        'sequence': 'sequence',
        'max_b_frames': 'maxBFrames',
        'uri': 'uri',
        'pixel_format': 'pixelFormat',
        'preset': 'preset',
        'bitrate': 'bitrate',
        'codec': 'codec'
    }

    def __init__(self, gop_size=None, sequence=None, max_b_frames=None, uri=None, pixel_format=None, preset=None, bitrate=None, codec=None):  # noqa: E501
        """NLEJobVideoOutputType - a model defined in OpenAPI"""  # noqa: E501

        self._gop_size = None
        self._sequence = None
        self._max_b_frames = None
        self._uri = None
        self._pixel_format = None
        self._preset = None
        self._bitrate = None
        self._codec = None
        self.discriminator = None

        if gop_size is not None:
            self.gop_size = gop_size
        self.sequence = sequence
        if max_b_frames is not None:
            self.max_b_frames = max_b_frames
        if uri is not None:
            self.uri = uri
        if pixel_format is not None:
            self.pixel_format = pixel_format
        if preset is not None:
            self.preset = preset
        self.bitrate = bitrate
        self.codec = codec

    @property
    def gop_size(self):
        """Gets the gop_size of this NLEJobVideoOutputType.  # noqa: E501


        :return: The gop_size of this NLEJobVideoOutputType.  # noqa: E501
        :rtype: int
        """
        return self._gop_size

    @gop_size.setter
    def gop_size(self, gop_size):
        """Sets the gop_size of this NLEJobVideoOutputType.


        :param gop_size: The gop_size of this NLEJobVideoOutputType.  # noqa: E501
        :type: int
        """

        self._gop_size = gop_size

    @property
    def sequence(self):
        """Gets the sequence of this NLEJobVideoOutputType.  # noqa: E501


        :return: The sequence of this NLEJobVideoOutputType.  # noqa: E501
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this NLEJobVideoOutputType.


        :param sequence: The sequence of this NLEJobVideoOutputType.  # noqa: E501
        :type: int
        """
        if sequence is None:
            raise ValueError("Invalid value for `sequence`, must not be `None`")  # noqa: E501

        self._sequence = sequence

    @property
    def max_b_frames(self):
        """Gets the max_b_frames of this NLEJobVideoOutputType.  # noqa: E501


        :return: The max_b_frames of this NLEJobVideoOutputType.  # noqa: E501
        :rtype: int
        """
        return self._max_b_frames

    @max_b_frames.setter
    def max_b_frames(self, max_b_frames):
        """Sets the max_b_frames of this NLEJobVideoOutputType.


        :param max_b_frames: The max_b_frames of this NLEJobVideoOutputType.  # noqa: E501
        :type: int
        """

        self._max_b_frames = max_b_frames

    @property
    def uri(self):
        """Gets the uri of this NLEJobVideoOutputType.  # noqa: E501


        :return: The uri of this NLEJobVideoOutputType.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this NLEJobVideoOutputType.


        :param uri: The uri of this NLEJobVideoOutputType.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def pixel_format(self):
        """Gets the pixel_format of this NLEJobVideoOutputType.  # noqa: E501


        :return: The pixel_format of this NLEJobVideoOutputType.  # noqa: E501
        :rtype: str
        """
        return self._pixel_format

    @pixel_format.setter
    def pixel_format(self, pixel_format):
        """Sets the pixel_format of this NLEJobVideoOutputType.


        :param pixel_format: The pixel_format of this NLEJobVideoOutputType.  # noqa: E501
        :type: str
        """

        self._pixel_format = pixel_format

    @property
    def preset(self):
        """Gets the preset of this NLEJobVideoOutputType.  # noqa: E501


        :return: The preset of this NLEJobVideoOutputType.  # noqa: E501
        :rtype: list[str]
        """
        return self._preset

    @preset.setter
    def preset(self, preset):
        """Sets the preset of this NLEJobVideoOutputType.


        :param preset: The preset of this NLEJobVideoOutputType.  # noqa: E501
        :type: list[str]
        """

        self._preset = preset

    @property
    def bitrate(self):
        """Gets the bitrate of this NLEJobVideoOutputType.  # noqa: E501


        :return: The bitrate of this NLEJobVideoOutputType.  # noqa: E501
        :rtype: int
        """
        return self._bitrate

    @bitrate.setter
    def bitrate(self, bitrate):
        """Sets the bitrate of this NLEJobVideoOutputType.


        :param bitrate: The bitrate of this NLEJobVideoOutputType.  # noqa: E501
        :type: int
        """
        if bitrate is None:
            raise ValueError("Invalid value for `bitrate`, must not be `None`")  # noqa: E501

        self._bitrate = bitrate

    @property
    def codec(self):
        """Gets the codec of this NLEJobVideoOutputType.  # noqa: E501


        :return: The codec of this NLEJobVideoOutputType.  # noqa: E501
        :rtype: str
        """
        return self._codec

    @codec.setter
    def codec(self, codec):
        """Sets the codec of this NLEJobVideoOutputType.


        :param codec: The codec of this NLEJobVideoOutputType.  # noqa: E501
        :type: str
        """
        if codec is None:
            raise ValueError("Invalid value for `codec`, must not be `None`")  # noqa: E501

        self._codec = codec

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NLEJobVideoOutputType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
