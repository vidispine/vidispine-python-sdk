# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class GroupType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'origin': 'str',
        'loc': 'str',
        'description': 'str',
        'parent_group_list': 'GroupListType',
        'user_list': 'UserListType',
        'remove': 'bool',
        'group_name': 'str',
        'role': 'bool',
        'child_group_list': 'GroupListType',
        'id': 'str',
        'metadata': 'SimpleMetadataType'
    }

    attribute_map = {
        'origin': 'origin',
        'loc': 'loc',
        'description': 'description',
        'parent_group_list': 'parentGroupList',
        'user_list': 'userList',
        'remove': 'remove',
        'group_name': 'groupName',
        'role': 'role',
        'child_group_list': 'childGroupList',
        'id': 'id',
        'metadata': 'metadata'
    }

    def __init__(self, origin=None, loc=None, description=None, parent_group_list=None, user_list=None, remove=None, group_name=None, role=None, child_group_list=None, id=None, metadata=None):  # noqa: E501
        """GroupType - a model defined in OpenAPI"""  # noqa: E501

        self._origin = None
        self._loc = None
        self._description = None
        self._parent_group_list = None
        self._user_list = None
        self._remove = None
        self._group_name = None
        self._role = None
        self._child_group_list = None
        self._id = None
        self._metadata = None
        self.discriminator = None

        if origin is not None:
            self.origin = origin
        if loc is not None:
            self.loc = loc
        if description is not None:
            self.description = description
        if parent_group_list is not None:
            self.parent_group_list = parent_group_list
        if user_list is not None:
            self.user_list = user_list
        if remove is not None:
            self.remove = remove
        if group_name is not None:
            self.group_name = group_name
        if role is not None:
            self.role = role
        if child_group_list is not None:
            self.child_group_list = child_group_list
        if id is not None:
            self.id = id
        if metadata is not None:
            self.metadata = metadata

    @property
    def origin(self):
        """Gets the origin of this GroupType.  # noqa: E501


        :return: The origin of this GroupType.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this GroupType.


        :param origin: The origin of this GroupType.  # noqa: E501
        :type: str
        """

        self._origin = origin

    @property
    def loc(self):
        """Gets the loc of this GroupType.  # noqa: E501


        :return: The loc of this GroupType.  # noqa: E501
        :rtype: str
        """
        return self._loc

    @loc.setter
    def loc(self, loc):
        """Sets the loc of this GroupType.


        :param loc: The loc of this GroupType.  # noqa: E501
        :type: str
        """

        self._loc = loc

    @property
    def description(self):
        """Gets the description of this GroupType.  # noqa: E501


        :return: The description of this GroupType.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GroupType.


        :param description: The description of this GroupType.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def parent_group_list(self):
        """Gets the parent_group_list of this GroupType.  # noqa: E501


        :return: The parent_group_list of this GroupType.  # noqa: E501
        :rtype: GroupListType
        """
        return self._parent_group_list

    @parent_group_list.setter
    def parent_group_list(self, parent_group_list):
        """Sets the parent_group_list of this GroupType.


        :param parent_group_list: The parent_group_list of this GroupType.  # noqa: E501
        :type: GroupListType
        """

        self._parent_group_list = parent_group_list

    @property
    def user_list(self):
        """Gets the user_list of this GroupType.  # noqa: E501


        :return: The user_list of this GroupType.  # noqa: E501
        :rtype: UserListType
        """
        return self._user_list

    @user_list.setter
    def user_list(self, user_list):
        """Sets the user_list of this GroupType.


        :param user_list: The user_list of this GroupType.  # noqa: E501
        :type: UserListType
        """

        self._user_list = user_list

    @property
    def remove(self):
        """Gets the remove of this GroupType.  # noqa: E501


        :return: The remove of this GroupType.  # noqa: E501
        :rtype: bool
        """
        return self._remove

    @remove.setter
    def remove(self, remove):
        """Sets the remove of this GroupType.


        :param remove: The remove of this GroupType.  # noqa: E501
        :type: bool
        """

        self._remove = remove

    @property
    def group_name(self):
        """Gets the group_name of this GroupType.  # noqa: E501


        :return: The group_name of this GroupType.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this GroupType.


        :param group_name: The group_name of this GroupType.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def role(self):
        """Gets the role of this GroupType.  # noqa: E501


        :return: The role of this GroupType.  # noqa: E501
        :rtype: bool
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this GroupType.


        :param role: The role of this GroupType.  # noqa: E501
        :type: bool
        """

        self._role = role

    @property
    def child_group_list(self):
        """Gets the child_group_list of this GroupType.  # noqa: E501


        :return: The child_group_list of this GroupType.  # noqa: E501
        :rtype: GroupListType
        """
        return self._child_group_list

    @child_group_list.setter
    def child_group_list(self, child_group_list):
        """Sets the child_group_list of this GroupType.


        :param child_group_list: The child_group_list of this GroupType.  # noqa: E501
        :type: GroupListType
        """

        self._child_group_list = child_group_list

    @property
    def id(self):
        """Gets the id of this GroupType.  # noqa: E501


        :return: The id of this GroupType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GroupType.


        :param id: The id of this GroupType.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def metadata(self):
        """Gets the metadata of this GroupType.  # noqa: E501


        :return: The metadata of this GroupType.  # noqa: E501
        :rtype: SimpleMetadataType
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this GroupType.


        :param metadata: The metadata of this GroupType.  # noqa: E501
        :type: SimpleMetadataType
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
