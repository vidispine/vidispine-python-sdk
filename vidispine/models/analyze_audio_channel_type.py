# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class AnalyzeAudioChannelType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'thresh': 'float',
        'tone': 'list[float]',
        'channel': 'int',
        'stream': 'int'
    }

    attribute_map = {
        'thresh': 'thresh',
        'tone': 'tone',
        'channel': 'channel',
        'stream': 'stream'
    }

    def __init__(self, thresh=None, tone=None, channel=None, stream=None):  # noqa: E501
        """AnalyzeAudioChannelType - a model defined in OpenAPI"""  # noqa: E501

        self._thresh = None
        self._tone = None
        self._channel = None
        self._stream = None
        self.discriminator = None

        if thresh is not None:
            self.thresh = thresh
        if tone is not None:
            self.tone = tone
        self.channel = channel
        self.stream = stream

    @property
    def thresh(self):
        """Gets the thresh of this AnalyzeAudioChannelType.  # noqa: E501


        :return: The thresh of this AnalyzeAudioChannelType.  # noqa: E501
        :rtype: float
        """
        return self._thresh

    @thresh.setter
    def thresh(self, thresh):
        """Sets the thresh of this AnalyzeAudioChannelType.


        :param thresh: The thresh of this AnalyzeAudioChannelType.  # noqa: E501
        :type: float
        """

        self._thresh = thresh

    @property
    def tone(self):
        """Gets the tone of this AnalyzeAudioChannelType.  # noqa: E501


        :return: The tone of this AnalyzeAudioChannelType.  # noqa: E501
        :rtype: list[float]
        """
        return self._tone

    @tone.setter
    def tone(self, tone):
        """Sets the tone of this AnalyzeAudioChannelType.


        :param tone: The tone of this AnalyzeAudioChannelType.  # noqa: E501
        :type: list[float]
        """

        self._tone = tone

    @property
    def channel(self):
        """Gets the channel of this AnalyzeAudioChannelType.  # noqa: E501


        :return: The channel of this AnalyzeAudioChannelType.  # noqa: E501
        :rtype: int
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this AnalyzeAudioChannelType.


        :param channel: The channel of this AnalyzeAudioChannelType.  # noqa: E501
        :type: int
        """
        if channel is None:
            raise ValueError("Invalid value for `channel`, must not be `None`")  # noqa: E501

        self._channel = channel

    @property
    def stream(self):
        """Gets the stream of this AnalyzeAudioChannelType.  # noqa: E501


        :return: The stream of this AnalyzeAudioChannelType.  # noqa: E501
        :rtype: int
        """
        return self._stream

    @stream.setter
    def stream(self, stream):
        """Sets the stream of this AnalyzeAudioChannelType.


        :param stream: The stream of this AnalyzeAudioChannelType.  # noqa: E501
        :type: int
        """
        if stream is None:
            raise ValueError("Invalid value for `stream`, must not be `None`")  # noqa: E501

        self._stream = stream

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyzeAudioChannelType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
