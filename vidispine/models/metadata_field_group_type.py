# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class MetadataFieldGroupType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'origin': 'str',
        'group': 'list[MetadataFieldGroupType]',
        'name': 'str',
        'inheritance': 'str',
        'access': 'list[MetadataFieldAccessControlType]',
        'field': 'list[MetadataFieldType]',
        'external_id': 'list[str]',
        'data': 'list[KeyValuePairType]',
        'schema': 'MetadataSchemaElementType'
    }

    attribute_map = {
        'origin': 'origin',
        'group': 'group',
        'name': 'name',
        'inheritance': 'inheritance',
        'access': 'access',
        'field': 'field',
        'external_id': 'externalId',
        'data': 'data',
        'schema': 'schema'
    }

    def __init__(self, origin=None, group=None, name=None, inheritance=None, access=None, field=None, external_id=None, data=None, schema=None):  # noqa: E501
        """MetadataFieldGroupType - a model defined in OpenAPI"""  # noqa: E501

        self._origin = None
        self._group = None
        self._name = None
        self._inheritance = None
        self._access = None
        self._field = None
        self._external_id = None
        self._data = None
        self._schema = None
        self.discriminator = None

        if origin is not None:
            self.origin = origin
        if group is not None:
            self.group = group
        if name is not None:
            self.name = name
        if inheritance is not None:
            self.inheritance = inheritance
        if access is not None:
            self.access = access
        if field is not None:
            self.field = field
        if external_id is not None:
            self.external_id = external_id
        if data is not None:
            self.data = data
        if schema is not None:
            self.schema = schema

    @property
    def origin(self):
        """Gets the origin of this MetadataFieldGroupType.  # noqa: E501


        :return: The origin of this MetadataFieldGroupType.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this MetadataFieldGroupType.


        :param origin: The origin of this MetadataFieldGroupType.  # noqa: E501
        :type: str
        """

        self._origin = origin

    @property
    def group(self):
        """Gets the group of this MetadataFieldGroupType.  # noqa: E501


        :return: The group of this MetadataFieldGroupType.  # noqa: E501
        :rtype: list[MetadataFieldGroupType]
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this MetadataFieldGroupType.


        :param group: The group of this MetadataFieldGroupType.  # noqa: E501
        :type: list[MetadataFieldGroupType]
        """

        self._group = group

    @property
    def name(self):
        """Gets the name of this MetadataFieldGroupType.  # noqa: E501


        :return: The name of this MetadataFieldGroupType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MetadataFieldGroupType.


        :param name: The name of this MetadataFieldGroupType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def inheritance(self):
        """Gets the inheritance of this MetadataFieldGroupType.  # noqa: E501


        :return: The inheritance of this MetadataFieldGroupType.  # noqa: E501
        :rtype: str
        """
        return self._inheritance

    @inheritance.setter
    def inheritance(self, inheritance):
        """Sets the inheritance of this MetadataFieldGroupType.


        :param inheritance: The inheritance of this MetadataFieldGroupType.  # noqa: E501
        :type: str
        """

        self._inheritance = inheritance

    @property
    def access(self):
        """Gets the access of this MetadataFieldGroupType.  # noqa: E501


        :return: The access of this MetadataFieldGroupType.  # noqa: E501
        :rtype: list[MetadataFieldAccessControlType]
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this MetadataFieldGroupType.


        :param access: The access of this MetadataFieldGroupType.  # noqa: E501
        :type: list[MetadataFieldAccessControlType]
        """

        self._access = access

    @property
    def field(self):
        """Gets the field of this MetadataFieldGroupType.  # noqa: E501


        :return: The field of this MetadataFieldGroupType.  # noqa: E501
        :rtype: list[MetadataFieldType]
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this MetadataFieldGroupType.


        :param field: The field of this MetadataFieldGroupType.  # noqa: E501
        :type: list[MetadataFieldType]
        """

        self._field = field

    @property
    def external_id(self):
        """Gets the external_id of this MetadataFieldGroupType.  # noqa: E501


        :return: The external_id of this MetadataFieldGroupType.  # noqa: E501
        :rtype: list[str]
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this MetadataFieldGroupType.


        :param external_id: The external_id of this MetadataFieldGroupType.  # noqa: E501
        :type: list[str]
        """

        self._external_id = external_id

    @property
    def data(self):
        """Gets the data of this MetadataFieldGroupType.  # noqa: E501


        :return: The data of this MetadataFieldGroupType.  # noqa: E501
        :rtype: list[KeyValuePairType]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this MetadataFieldGroupType.


        :param data: The data of this MetadataFieldGroupType.  # noqa: E501
        :type: list[KeyValuePairType]
        """

        self._data = data

    @property
    def schema(self):
        """Gets the schema of this MetadataFieldGroupType.  # noqa: E501


        :return: The schema of this MetadataFieldGroupType.  # noqa: E501
        :rtype: MetadataSchemaElementType
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this MetadataFieldGroupType.


        :param schema: The schema of this MetadataFieldGroupType.  # noqa: E501
        :type: MetadataSchemaElementType
        """

        self._schema = schema

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataFieldGroupType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
