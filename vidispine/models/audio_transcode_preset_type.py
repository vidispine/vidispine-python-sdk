# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class AudioTranscodePresetType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'otif': 'OtifPresetType',
        'stream': 'list[int]',
        'framerate': 'TimeBaseType',
        'no_audio': 'bool',
        'preset': 'list[str]',
        'mix': 'list[AudioTranscodePresetMixType]',
        'codec': 'str',
        'all_channel': 'bool',
        'output': 'list[AudioOutputType]',
        'mono_file': 'bool',
        'bitrate': 'int',
        'setting': 'list[KeyValuePairType]',
        'channel': 'list[int]'
    }

    attribute_map = {
        'otif': 'otif',
        'stream': 'stream',
        'framerate': 'framerate',
        'no_audio': 'noAudio',
        'preset': 'preset',
        'mix': 'mix',
        'codec': 'codec',
        'all_channel': 'allChannel',
        'output': 'output',
        'mono_file': 'monoFile',
        'bitrate': 'bitrate',
        'setting': 'setting',
        'channel': 'channel'
    }

    def __init__(self, otif=None, stream=None, framerate=None, no_audio=None, preset=None, mix=None, codec=None, all_channel=None, output=None, mono_file=None, bitrate=None, setting=None, channel=None):  # noqa: E501
        """AudioTranscodePresetType - a model defined in OpenAPI"""  # noqa: E501

        self._otif = None
        self._stream = None
        self._framerate = None
        self._no_audio = None
        self._preset = None
        self._mix = None
        self._codec = None
        self._all_channel = None
        self._output = None
        self._mono_file = None
        self._bitrate = None
        self._setting = None
        self._channel = None
        self.discriminator = None

        if otif is not None:
            self.otif = otif
        if stream is not None:
            self.stream = stream
        if framerate is not None:
            self.framerate = framerate
        if no_audio is not None:
            self.no_audio = no_audio
        if preset is not None:
            self.preset = preset
        if mix is not None:
            self.mix = mix
        if codec is not None:
            self.codec = codec
        if all_channel is not None:
            self.all_channel = all_channel
        if output is not None:
            self.output = output
        if mono_file is not None:
            self.mono_file = mono_file
        if bitrate is not None:
            self.bitrate = bitrate
        if setting is not None:
            self.setting = setting
        if channel is not None:
            self.channel = channel

    @property
    def otif(self):
        """Gets the otif of this AudioTranscodePresetType.  # noqa: E501


        :return: The otif of this AudioTranscodePresetType.  # noqa: E501
        :rtype: OtifPresetType
        """
        return self._otif

    @otif.setter
    def otif(self, otif):
        """Sets the otif of this AudioTranscodePresetType.


        :param otif: The otif of this AudioTranscodePresetType.  # noqa: E501
        :type: OtifPresetType
        """

        self._otif = otif

    @property
    def stream(self):
        """Gets the stream of this AudioTranscodePresetType.  # noqa: E501


        :return: The stream of this AudioTranscodePresetType.  # noqa: E501
        :rtype: list[int]
        """
        return self._stream

    @stream.setter
    def stream(self, stream):
        """Sets the stream of this AudioTranscodePresetType.


        :param stream: The stream of this AudioTranscodePresetType.  # noqa: E501
        :type: list[int]
        """

        self._stream = stream

    @property
    def framerate(self):
        """Gets the framerate of this AudioTranscodePresetType.  # noqa: E501


        :return: The framerate of this AudioTranscodePresetType.  # noqa: E501
        :rtype: TimeBaseType
        """
        return self._framerate

    @framerate.setter
    def framerate(self, framerate):
        """Sets the framerate of this AudioTranscodePresetType.


        :param framerate: The framerate of this AudioTranscodePresetType.  # noqa: E501
        :type: TimeBaseType
        """

        self._framerate = framerate

    @property
    def no_audio(self):
        """Gets the no_audio of this AudioTranscodePresetType.  # noqa: E501


        :return: The no_audio of this AudioTranscodePresetType.  # noqa: E501
        :rtype: bool
        """
        return self._no_audio

    @no_audio.setter
    def no_audio(self, no_audio):
        """Sets the no_audio of this AudioTranscodePresetType.


        :param no_audio: The no_audio of this AudioTranscodePresetType.  # noqa: E501
        :type: bool
        """

        self._no_audio = no_audio

    @property
    def preset(self):
        """Gets the preset of this AudioTranscodePresetType.  # noqa: E501


        :return: The preset of this AudioTranscodePresetType.  # noqa: E501
        :rtype: list[str]
        """
        return self._preset

    @preset.setter
    def preset(self, preset):
        """Sets the preset of this AudioTranscodePresetType.


        :param preset: The preset of this AudioTranscodePresetType.  # noqa: E501
        :type: list[str]
        """

        self._preset = preset

    @property
    def mix(self):
        """Gets the mix of this AudioTranscodePresetType.  # noqa: E501


        :return: The mix of this AudioTranscodePresetType.  # noqa: E501
        :rtype: list[AudioTranscodePresetMixType]
        """
        return self._mix

    @mix.setter
    def mix(self, mix):
        """Sets the mix of this AudioTranscodePresetType.


        :param mix: The mix of this AudioTranscodePresetType.  # noqa: E501
        :type: list[AudioTranscodePresetMixType]
        """

        self._mix = mix

    @property
    def codec(self):
        """Gets the codec of this AudioTranscodePresetType.  # noqa: E501


        :return: The codec of this AudioTranscodePresetType.  # noqa: E501
        :rtype: str
        """
        return self._codec

    @codec.setter
    def codec(self, codec):
        """Sets the codec of this AudioTranscodePresetType.


        :param codec: The codec of this AudioTranscodePresetType.  # noqa: E501
        :type: str
        """

        self._codec = codec

    @property
    def all_channel(self):
        """Gets the all_channel of this AudioTranscodePresetType.  # noqa: E501


        :return: The all_channel of this AudioTranscodePresetType.  # noqa: E501
        :rtype: bool
        """
        return self._all_channel

    @all_channel.setter
    def all_channel(self, all_channel):
        """Sets the all_channel of this AudioTranscodePresetType.


        :param all_channel: The all_channel of this AudioTranscodePresetType.  # noqa: E501
        :type: bool
        """

        self._all_channel = all_channel

    @property
    def output(self):
        """Gets the output of this AudioTranscodePresetType.  # noqa: E501


        :return: The output of this AudioTranscodePresetType.  # noqa: E501
        :rtype: list[AudioOutputType]
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this AudioTranscodePresetType.


        :param output: The output of this AudioTranscodePresetType.  # noqa: E501
        :type: list[AudioOutputType]
        """

        self._output = output

    @property
    def mono_file(self):
        """Gets the mono_file of this AudioTranscodePresetType.  # noqa: E501


        :return: The mono_file of this AudioTranscodePresetType.  # noqa: E501
        :rtype: bool
        """
        return self._mono_file

    @mono_file.setter
    def mono_file(self, mono_file):
        """Sets the mono_file of this AudioTranscodePresetType.


        :param mono_file: The mono_file of this AudioTranscodePresetType.  # noqa: E501
        :type: bool
        """

        self._mono_file = mono_file

    @property
    def bitrate(self):
        """Gets the bitrate of this AudioTranscodePresetType.  # noqa: E501


        :return: The bitrate of this AudioTranscodePresetType.  # noqa: E501
        :rtype: int
        """
        return self._bitrate

    @bitrate.setter
    def bitrate(self, bitrate):
        """Sets the bitrate of this AudioTranscodePresetType.


        :param bitrate: The bitrate of this AudioTranscodePresetType.  # noqa: E501
        :type: int
        """

        self._bitrate = bitrate

    @property
    def setting(self):
        """Gets the setting of this AudioTranscodePresetType.  # noqa: E501


        :return: The setting of this AudioTranscodePresetType.  # noqa: E501
        :rtype: list[KeyValuePairType]
        """
        return self._setting

    @setting.setter
    def setting(self, setting):
        """Sets the setting of this AudioTranscodePresetType.


        :param setting: The setting of this AudioTranscodePresetType.  # noqa: E501
        :type: list[KeyValuePairType]
        """

        self._setting = setting

    @property
    def channel(self):
        """Gets the channel of this AudioTranscodePresetType.  # noqa: E501


        :return: The channel of this AudioTranscodePresetType.  # noqa: E501
        :rtype: list[int]
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this AudioTranscodePresetType.


        :param channel: The channel of this AudioTranscodePresetType.  # noqa: E501
        :type: list[int]
        """

        self._channel = channel

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AudioTranscodePresetType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
