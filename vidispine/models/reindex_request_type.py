# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class ReindexRequestType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'status': 'str',
        'index': 'str',
        'finish': 'datetime',
        'priority': 'int',
        'start': 'datetime',
        'indexes_done': 'int',
        'indexes_total': 'int'
    }

    attribute_map = {
        'status': 'status',
        'index': 'index',
        'finish': 'finish',
        'priority': 'priority',
        'start': 'start',
        'indexes_done': 'indexesDone',
        'indexes_total': 'indexesTotal'
    }

    def __init__(self, status=None, index=None, finish=None, priority=None, start=None, indexes_done=None, indexes_total=None):  # noqa: E501
        """ReindexRequestType - a model defined in OpenAPI"""  # noqa: E501

        self._status = None
        self._index = None
        self._finish = None
        self._priority = None
        self._start = None
        self._indexes_done = None
        self._indexes_total = None
        self.discriminator = None

        self.status = status
        self.index = index
        if finish is not None:
            self.finish = finish
        self.priority = priority
        if start is not None:
            self.start = start
        if indexes_done is not None:
            self.indexes_done = indexes_done
        if indexes_total is not None:
            self.indexes_total = indexes_total

    @property
    def status(self):
        """Gets the status of this ReindexRequestType.  # noqa: E501


        :return: The status of this ReindexRequestType.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ReindexRequestType.


        :param status: The status of this ReindexRequestType.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def index(self):
        """Gets the index of this ReindexRequestType.  # noqa: E501


        :return: The index of this ReindexRequestType.  # noqa: E501
        :rtype: str
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this ReindexRequestType.


        :param index: The index of this ReindexRequestType.  # noqa: E501
        :type: str
        """
        if index is None:
            raise ValueError("Invalid value for `index`, must not be `None`")  # noqa: E501

        self._index = index

    @property
    def finish(self):
        """Gets the finish of this ReindexRequestType.  # noqa: E501


        :return: The finish of this ReindexRequestType.  # noqa: E501
        :rtype: datetime
        """
        return self._finish

    @finish.setter
    def finish(self, finish):
        """Sets the finish of this ReindexRequestType.


        :param finish: The finish of this ReindexRequestType.  # noqa: E501
        :type: datetime
        """

        self._finish = finish

    @property
    def priority(self):
        """Gets the priority of this ReindexRequestType.  # noqa: E501


        :return: The priority of this ReindexRequestType.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this ReindexRequestType.


        :param priority: The priority of this ReindexRequestType.  # noqa: E501
        :type: int
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")  # noqa: E501

        self._priority = priority

    @property
    def start(self):
        """Gets the start of this ReindexRequestType.  # noqa: E501


        :return: The start of this ReindexRequestType.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this ReindexRequestType.


        :param start: The start of this ReindexRequestType.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def indexes_done(self):
        """Gets the indexes_done of this ReindexRequestType.  # noqa: E501


        :return: The indexes_done of this ReindexRequestType.  # noqa: E501
        :rtype: int
        """
        return self._indexes_done

    @indexes_done.setter
    def indexes_done(self, indexes_done):
        """Sets the indexes_done of this ReindexRequestType.


        :param indexes_done: The indexes_done of this ReindexRequestType.  # noqa: E501
        :type: int
        """

        self._indexes_done = indexes_done

    @property
    def indexes_total(self):
        """Gets the indexes_total of this ReindexRequestType.  # noqa: E501


        :return: The indexes_total of this ReindexRequestType.  # noqa: E501
        :rtype: int
        """
        return self._indexes_total

    @indexes_total.setter
    def indexes_total(self, indexes_total):
        """Sets the indexes_total of this ReindexRequestType.


        :param indexes_total: The indexes_total of this ReindexRequestType.  # noqa: E501
        :type: int
        """

        self._indexes_total = indexes_total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReindexRequestType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
