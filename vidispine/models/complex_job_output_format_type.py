# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class ComplexJobOutputFormatType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'drop_frame': 'bool',
        'text_overlay': 'list[TextOverlayType]',
        'require_faststart': 'bool',
        'overlay': 'list[OverlayType]',
        'initial_smpte_timecode': 'str',
        'atom': 'list[ComplexJobAtomType]',
        'uri': 'str',
        'muxrate': 'int',
        'clip_name': 'str',
        'rounded_time_base': 'int',
        'range': 'SequenceRangeType',
        'setting': 'list[KeyValuePairType]',
        'max_chunk_duration': 'TimeCodeType',
        'mxf_packages': 'MXFPackagesType',
        'dms1_source': 'ComplexJobOutputFormatTypeDms1Source',
        'start_timecode': 'int',
        'pfd_target_uri': 'str',
        'metadata': 'list[KeyValuePairType]',
        'id': 'int',
        'container_format': 'str'
    }

    attribute_map = {
        'drop_frame': 'dropFrame',
        'text_overlay': 'textOverlay',
        'require_faststart': 'requireFaststart',
        'overlay': 'overlay',
        'initial_smpte_timecode': 'initialSMPTETimecode',
        'atom': 'atom',
        'uri': 'uri',
        'muxrate': 'muxrate',
        'clip_name': 'clipName',
        'rounded_time_base': 'roundedTimeBase',
        'range': 'range',
        'setting': 'setting',
        'max_chunk_duration': 'maxChunkDuration',
        'mxf_packages': 'mxfPackages',
        'dms1_source': 'dms1Source',
        'start_timecode': 'startTimecode',
        'pfd_target_uri': 'pfdTargetUri',
        'metadata': 'metadata',
        'id': 'id',
        'container_format': 'containerFormat'
    }

    def __init__(self, drop_frame=None, text_overlay=None, require_faststart=None, overlay=None, initial_smpte_timecode=None, atom=None, uri=None, muxrate=None, clip_name=None, rounded_time_base=None, range=None, setting=None, max_chunk_duration=None, mxf_packages=None, dms1_source=None, start_timecode=None, pfd_target_uri=None, metadata=None, id=None, container_format=None):  # noqa: E501
        """ComplexJobOutputFormatType - a model defined in OpenAPI"""  # noqa: E501

        self._drop_frame = None
        self._text_overlay = None
        self._require_faststart = None
        self._overlay = None
        self._initial_smpte_timecode = None
        self._atom = None
        self._uri = None
        self._muxrate = None
        self._clip_name = None
        self._rounded_time_base = None
        self._range = None
        self._setting = None
        self._max_chunk_duration = None
        self._mxf_packages = None
        self._dms1_source = None
        self._start_timecode = None
        self._pfd_target_uri = None
        self._metadata = None
        self._id = None
        self._container_format = None
        self.discriminator = None

        if drop_frame is not None:
            self.drop_frame = drop_frame
        if text_overlay is not None:
            self.text_overlay = text_overlay
        if require_faststart is not None:
            self.require_faststart = require_faststart
        if overlay is not None:
            self.overlay = overlay
        if initial_smpte_timecode is not None:
            self.initial_smpte_timecode = initial_smpte_timecode
        if atom is not None:
            self.atom = atom
        if uri is not None:
            self.uri = uri
        if muxrate is not None:
            self.muxrate = muxrate
        if clip_name is not None:
            self.clip_name = clip_name
        if rounded_time_base is not None:
            self.rounded_time_base = rounded_time_base
        if range is not None:
            self.range = range
        if setting is not None:
            self.setting = setting
        if max_chunk_duration is not None:
            self.max_chunk_duration = max_chunk_duration
        if mxf_packages is not None:
            self.mxf_packages = mxf_packages
        if dms1_source is not None:
            self.dms1_source = dms1_source
        if start_timecode is not None:
            self.start_timecode = start_timecode
        if pfd_target_uri is not None:
            self.pfd_target_uri = pfd_target_uri
        if metadata is not None:
            self.metadata = metadata
        self.id = id
        self.container_format = container_format

    @property
    def drop_frame(self):
        """Gets the drop_frame of this ComplexJobOutputFormatType.  # noqa: E501


        :return: The drop_frame of this ComplexJobOutputFormatType.  # noqa: E501
        :rtype: bool
        """
        return self._drop_frame

    @drop_frame.setter
    def drop_frame(self, drop_frame):
        """Sets the drop_frame of this ComplexJobOutputFormatType.


        :param drop_frame: The drop_frame of this ComplexJobOutputFormatType.  # noqa: E501
        :type: bool
        """

        self._drop_frame = drop_frame

    @property
    def text_overlay(self):
        """Gets the text_overlay of this ComplexJobOutputFormatType.  # noqa: E501


        :return: The text_overlay of this ComplexJobOutputFormatType.  # noqa: E501
        :rtype: list[TextOverlayType]
        """
        return self._text_overlay

    @text_overlay.setter
    def text_overlay(self, text_overlay):
        """Sets the text_overlay of this ComplexJobOutputFormatType.


        :param text_overlay: The text_overlay of this ComplexJobOutputFormatType.  # noqa: E501
        :type: list[TextOverlayType]
        """

        self._text_overlay = text_overlay

    @property
    def require_faststart(self):
        """Gets the require_faststart of this ComplexJobOutputFormatType.  # noqa: E501


        :return: The require_faststart of this ComplexJobOutputFormatType.  # noqa: E501
        :rtype: bool
        """
        return self._require_faststart

    @require_faststart.setter
    def require_faststart(self, require_faststart):
        """Sets the require_faststart of this ComplexJobOutputFormatType.


        :param require_faststart: The require_faststart of this ComplexJobOutputFormatType.  # noqa: E501
        :type: bool
        """

        self._require_faststart = require_faststart

    @property
    def overlay(self):
        """Gets the overlay of this ComplexJobOutputFormatType.  # noqa: E501


        :return: The overlay of this ComplexJobOutputFormatType.  # noqa: E501
        :rtype: list[OverlayType]
        """
        return self._overlay

    @overlay.setter
    def overlay(self, overlay):
        """Sets the overlay of this ComplexJobOutputFormatType.


        :param overlay: The overlay of this ComplexJobOutputFormatType.  # noqa: E501
        :type: list[OverlayType]
        """

        self._overlay = overlay

    @property
    def initial_smpte_timecode(self):
        """Gets the initial_smpte_timecode of this ComplexJobOutputFormatType.  # noqa: E501


        :return: The initial_smpte_timecode of this ComplexJobOutputFormatType.  # noqa: E501
        :rtype: str
        """
        return self._initial_smpte_timecode

    @initial_smpte_timecode.setter
    def initial_smpte_timecode(self, initial_smpte_timecode):
        """Sets the initial_smpte_timecode of this ComplexJobOutputFormatType.


        :param initial_smpte_timecode: The initial_smpte_timecode of this ComplexJobOutputFormatType.  # noqa: E501
        :type: str
        """

        self._initial_smpte_timecode = initial_smpte_timecode

    @property
    def atom(self):
        """Gets the atom of this ComplexJobOutputFormatType.  # noqa: E501


        :return: The atom of this ComplexJobOutputFormatType.  # noqa: E501
        :rtype: list[ComplexJobAtomType]
        """
        return self._atom

    @atom.setter
    def atom(self, atom):
        """Sets the atom of this ComplexJobOutputFormatType.


        :param atom: The atom of this ComplexJobOutputFormatType.  # noqa: E501
        :type: list[ComplexJobAtomType]
        """

        self._atom = atom

    @property
    def uri(self):
        """Gets the uri of this ComplexJobOutputFormatType.  # noqa: E501


        :return: The uri of this ComplexJobOutputFormatType.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ComplexJobOutputFormatType.


        :param uri: The uri of this ComplexJobOutputFormatType.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def muxrate(self):
        """Gets the muxrate of this ComplexJobOutputFormatType.  # noqa: E501


        :return: The muxrate of this ComplexJobOutputFormatType.  # noqa: E501
        :rtype: int
        """
        return self._muxrate

    @muxrate.setter
    def muxrate(self, muxrate):
        """Sets the muxrate of this ComplexJobOutputFormatType.


        :param muxrate: The muxrate of this ComplexJobOutputFormatType.  # noqa: E501
        :type: int
        """

        self._muxrate = muxrate

    @property
    def clip_name(self):
        """Gets the clip_name of this ComplexJobOutputFormatType.  # noqa: E501


        :return: The clip_name of this ComplexJobOutputFormatType.  # noqa: E501
        :rtype: str
        """
        return self._clip_name

    @clip_name.setter
    def clip_name(self, clip_name):
        """Sets the clip_name of this ComplexJobOutputFormatType.


        :param clip_name: The clip_name of this ComplexJobOutputFormatType.  # noqa: E501
        :type: str
        """

        self._clip_name = clip_name

    @property
    def rounded_time_base(self):
        """Gets the rounded_time_base of this ComplexJobOutputFormatType.  # noqa: E501


        :return: The rounded_time_base of this ComplexJobOutputFormatType.  # noqa: E501
        :rtype: int
        """
        return self._rounded_time_base

    @rounded_time_base.setter
    def rounded_time_base(self, rounded_time_base):
        """Sets the rounded_time_base of this ComplexJobOutputFormatType.


        :param rounded_time_base: The rounded_time_base of this ComplexJobOutputFormatType.  # noqa: E501
        :type: int
        """

        self._rounded_time_base = rounded_time_base

    @property
    def range(self):
        """Gets the range of this ComplexJobOutputFormatType.  # noqa: E501


        :return: The range of this ComplexJobOutputFormatType.  # noqa: E501
        :rtype: SequenceRangeType
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this ComplexJobOutputFormatType.


        :param range: The range of this ComplexJobOutputFormatType.  # noqa: E501
        :type: SequenceRangeType
        """

        self._range = range

    @property
    def setting(self):
        """Gets the setting of this ComplexJobOutputFormatType.  # noqa: E501


        :return: The setting of this ComplexJobOutputFormatType.  # noqa: E501
        :rtype: list[KeyValuePairType]
        """
        return self._setting

    @setting.setter
    def setting(self, setting):
        """Sets the setting of this ComplexJobOutputFormatType.


        :param setting: The setting of this ComplexJobOutputFormatType.  # noqa: E501
        :type: list[KeyValuePairType]
        """

        self._setting = setting

    @property
    def max_chunk_duration(self):
        """Gets the max_chunk_duration of this ComplexJobOutputFormatType.  # noqa: E501


        :return: The max_chunk_duration of this ComplexJobOutputFormatType.  # noqa: E501
        :rtype: TimeCodeType
        """
        return self._max_chunk_duration

    @max_chunk_duration.setter
    def max_chunk_duration(self, max_chunk_duration):
        """Sets the max_chunk_duration of this ComplexJobOutputFormatType.


        :param max_chunk_duration: The max_chunk_duration of this ComplexJobOutputFormatType.  # noqa: E501
        :type: TimeCodeType
        """

        self._max_chunk_duration = max_chunk_duration

    @property
    def mxf_packages(self):
        """Gets the mxf_packages of this ComplexJobOutputFormatType.  # noqa: E501


        :return: The mxf_packages of this ComplexJobOutputFormatType.  # noqa: E501
        :rtype: MXFPackagesType
        """
        return self._mxf_packages

    @mxf_packages.setter
    def mxf_packages(self, mxf_packages):
        """Sets the mxf_packages of this ComplexJobOutputFormatType.


        :param mxf_packages: The mxf_packages of this ComplexJobOutputFormatType.  # noqa: E501
        :type: MXFPackagesType
        """

        self._mxf_packages = mxf_packages

    @property
    def dms1_source(self):
        """Gets the dms1_source of this ComplexJobOutputFormatType.  # noqa: E501


        :return: The dms1_source of this ComplexJobOutputFormatType.  # noqa: E501
        :rtype: ComplexJobOutputFormatTypeDms1Source
        """
        return self._dms1_source

    @dms1_source.setter
    def dms1_source(self, dms1_source):
        """Sets the dms1_source of this ComplexJobOutputFormatType.


        :param dms1_source: The dms1_source of this ComplexJobOutputFormatType.  # noqa: E501
        :type: ComplexJobOutputFormatTypeDms1Source
        """

        self._dms1_source = dms1_source

    @property
    def start_timecode(self):
        """Gets the start_timecode of this ComplexJobOutputFormatType.  # noqa: E501


        :return: The start_timecode of this ComplexJobOutputFormatType.  # noqa: E501
        :rtype: int
        """
        return self._start_timecode

    @start_timecode.setter
    def start_timecode(self, start_timecode):
        """Sets the start_timecode of this ComplexJobOutputFormatType.


        :param start_timecode: The start_timecode of this ComplexJobOutputFormatType.  # noqa: E501
        :type: int
        """

        self._start_timecode = start_timecode

    @property
    def pfd_target_uri(self):
        """Gets the pfd_target_uri of this ComplexJobOutputFormatType.  # noqa: E501


        :return: The pfd_target_uri of this ComplexJobOutputFormatType.  # noqa: E501
        :rtype: str
        """
        return self._pfd_target_uri

    @pfd_target_uri.setter
    def pfd_target_uri(self, pfd_target_uri):
        """Sets the pfd_target_uri of this ComplexJobOutputFormatType.


        :param pfd_target_uri: The pfd_target_uri of this ComplexJobOutputFormatType.  # noqa: E501
        :type: str
        """

        self._pfd_target_uri = pfd_target_uri

    @property
    def metadata(self):
        """Gets the metadata of this ComplexJobOutputFormatType.  # noqa: E501


        :return: The metadata of this ComplexJobOutputFormatType.  # noqa: E501
        :rtype: list[KeyValuePairType]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ComplexJobOutputFormatType.


        :param metadata: The metadata of this ComplexJobOutputFormatType.  # noqa: E501
        :type: list[KeyValuePairType]
        """

        self._metadata = metadata

    @property
    def id(self):
        """Gets the id of this ComplexJobOutputFormatType.  # noqa: E501


        :return: The id of this ComplexJobOutputFormatType.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ComplexJobOutputFormatType.


        :param id: The id of this ComplexJobOutputFormatType.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def container_format(self):
        """Gets the container_format of this ComplexJobOutputFormatType.  # noqa: E501


        :return: The container_format of this ComplexJobOutputFormatType.  # noqa: E501
        :rtype: str
        """
        return self._container_format

    @container_format.setter
    def container_format(self, container_format):
        """Sets the container_format of this ComplexJobOutputFormatType.


        :param container_format: The container_format of this ComplexJobOutputFormatType.  # noqa: E501
        :type: str
        """
        if container_format is None:
            raise ValueError("Invalid value for `container_format`, must not be `None`")  # noqa: E501

        self._container_format = container_format

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComplexJobOutputFormatType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
