# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class AnalyzeJobType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bars': 'AnalyzeJobTypeBars',
        'freeze': 'AnalyzeJobTypeFreeze',
        'video': 'AnalyzeVideoJobType',
        'black': 'AnalyzeJobTypeBars',
        'audio': 'AnalyzeAudioJobType',
        'channel': 'list[AnalyzeAudioChannelType]'
    }

    attribute_map = {
        'bars': 'bars',
        'freeze': 'freeze',
        'video': 'video',
        'black': 'black',
        'audio': 'audio',
        'channel': 'channel'
    }

    def __init__(self, bars=None, freeze=None, video=None, black=None, audio=None, channel=None):  # noqa: E501
        """AnalyzeJobType - a model defined in OpenAPI"""  # noqa: E501

        self._bars = None
        self._freeze = None
        self._video = None
        self._black = None
        self._audio = None
        self._channel = None
        self.discriminator = None

        if bars is not None:
            self.bars = bars
        if freeze is not None:
            self.freeze = freeze
        if video is not None:
            self.video = video
        if black is not None:
            self.black = black
        if audio is not None:
            self.audio = audio
        if channel is not None:
            self.channel = channel

    @property
    def bars(self):
        """Gets the bars of this AnalyzeJobType.  # noqa: E501


        :return: The bars of this AnalyzeJobType.  # noqa: E501
        :rtype: AnalyzeJobTypeBars
        """
        return self._bars

    @bars.setter
    def bars(self, bars):
        """Sets the bars of this AnalyzeJobType.


        :param bars: The bars of this AnalyzeJobType.  # noqa: E501
        :type: AnalyzeJobTypeBars
        """

        self._bars = bars

    @property
    def freeze(self):
        """Gets the freeze of this AnalyzeJobType.  # noqa: E501


        :return: The freeze of this AnalyzeJobType.  # noqa: E501
        :rtype: AnalyzeJobTypeFreeze
        """
        return self._freeze

    @freeze.setter
    def freeze(self, freeze):
        """Sets the freeze of this AnalyzeJobType.


        :param freeze: The freeze of this AnalyzeJobType.  # noqa: E501
        :type: AnalyzeJobTypeFreeze
        """

        self._freeze = freeze

    @property
    def video(self):
        """Gets the video of this AnalyzeJobType.  # noqa: E501


        :return: The video of this AnalyzeJobType.  # noqa: E501
        :rtype: AnalyzeVideoJobType
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this AnalyzeJobType.


        :param video: The video of this AnalyzeJobType.  # noqa: E501
        :type: AnalyzeVideoJobType
        """

        self._video = video

    @property
    def black(self):
        """Gets the black of this AnalyzeJobType.  # noqa: E501


        :return: The black of this AnalyzeJobType.  # noqa: E501
        :rtype: AnalyzeJobTypeBars
        """
        return self._black

    @black.setter
    def black(self, black):
        """Sets the black of this AnalyzeJobType.


        :param black: The black of this AnalyzeJobType.  # noqa: E501
        :type: AnalyzeJobTypeBars
        """

        self._black = black

    @property
    def audio(self):
        """Gets the audio of this AnalyzeJobType.  # noqa: E501


        :return: The audio of this AnalyzeJobType.  # noqa: E501
        :rtype: AnalyzeAudioJobType
        """
        return self._audio

    @audio.setter
    def audio(self, audio):
        """Sets the audio of this AnalyzeJobType.


        :param audio: The audio of this AnalyzeJobType.  # noqa: E501
        :type: AnalyzeAudioJobType
        """

        self._audio = audio

    @property
    def channel(self):
        """Gets the channel of this AnalyzeJobType.  # noqa: E501


        :return: The channel of this AnalyzeJobType.  # noqa: E501
        :rtype: list[AnalyzeAudioChannelType]
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this AnalyzeJobType.


        :param channel: The channel of this AnalyzeJobType.  # noqa: E501
        :type: list[AnalyzeAudioChannelType]
        """

        self._channel = channel

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyzeJobType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
