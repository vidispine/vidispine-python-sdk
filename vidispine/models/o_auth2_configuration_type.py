# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class OAuth2ConfigurationType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'federation_metadata_interval': 'int',
        'federation_metadata_uri': 'str',
        'validation_endpoint': 'str',
        'x509_certificate': 'str',
        'expected_audience': 'str',
        'token_user': 'str'
    }

    attribute_map = {
        'federation_metadata_interval': 'federationMetadataInterval',
        'federation_metadata_uri': 'federationMetadataURI',
        'validation_endpoint': 'validationEndpoint',
        'x509_certificate': 'x509Certificate',
        'expected_audience': 'expectedAudience',
        'token_user': 'tokenUser'
    }

    def __init__(self, federation_metadata_interval=None, federation_metadata_uri=None, validation_endpoint=None, x509_certificate=None, expected_audience=None, token_user=None):  # noqa: E501
        """OAuth2ConfigurationType - a model defined in OpenAPI"""  # noqa: E501

        self._federation_metadata_interval = None
        self._federation_metadata_uri = None
        self._validation_endpoint = None
        self._x509_certificate = None
        self._expected_audience = None
        self._token_user = None
        self.discriminator = None

        if federation_metadata_interval is not None:
            self.federation_metadata_interval = federation_metadata_interval
        if federation_metadata_uri is not None:
            self.federation_metadata_uri = federation_metadata_uri
        if validation_endpoint is not None:
            self.validation_endpoint = validation_endpoint
        if x509_certificate is not None:
            self.x509_certificate = x509_certificate
        if expected_audience is not None:
            self.expected_audience = expected_audience
        if token_user is not None:
            self.token_user = token_user

    @property
    def federation_metadata_interval(self):
        """Gets the federation_metadata_interval of this OAuth2ConfigurationType.  # noqa: E501


        :return: The federation_metadata_interval of this OAuth2ConfigurationType.  # noqa: E501
        :rtype: int
        """
        return self._federation_metadata_interval

    @federation_metadata_interval.setter
    def federation_metadata_interval(self, federation_metadata_interval):
        """Sets the federation_metadata_interval of this OAuth2ConfigurationType.


        :param federation_metadata_interval: The federation_metadata_interval of this OAuth2ConfigurationType.  # noqa: E501
        :type: int
        """

        self._federation_metadata_interval = federation_metadata_interval

    @property
    def federation_metadata_uri(self):
        """Gets the federation_metadata_uri of this OAuth2ConfigurationType.  # noqa: E501


        :return: The federation_metadata_uri of this OAuth2ConfigurationType.  # noqa: E501
        :rtype: str
        """
        return self._federation_metadata_uri

    @federation_metadata_uri.setter
    def federation_metadata_uri(self, federation_metadata_uri):
        """Sets the federation_metadata_uri of this OAuth2ConfigurationType.


        :param federation_metadata_uri: The federation_metadata_uri of this OAuth2ConfigurationType.  # noqa: E501
        :type: str
        """

        self._federation_metadata_uri = federation_metadata_uri

    @property
    def validation_endpoint(self):
        """Gets the validation_endpoint of this OAuth2ConfigurationType.  # noqa: E501


        :return: The validation_endpoint of this OAuth2ConfigurationType.  # noqa: E501
        :rtype: str
        """
        return self._validation_endpoint

    @validation_endpoint.setter
    def validation_endpoint(self, validation_endpoint):
        """Sets the validation_endpoint of this OAuth2ConfigurationType.


        :param validation_endpoint: The validation_endpoint of this OAuth2ConfigurationType.  # noqa: E501
        :type: str
        """

        self._validation_endpoint = validation_endpoint

    @property
    def x509_certificate(self):
        """Gets the x509_certificate of this OAuth2ConfigurationType.  # noqa: E501


        :return: The x509_certificate of this OAuth2ConfigurationType.  # noqa: E501
        :rtype: str
        """
        return self._x509_certificate

    @x509_certificate.setter
    def x509_certificate(self, x509_certificate):
        """Sets the x509_certificate of this OAuth2ConfigurationType.


        :param x509_certificate: The x509_certificate of this OAuth2ConfigurationType.  # noqa: E501
        :type: str
        """

        self._x509_certificate = x509_certificate

    @property
    def expected_audience(self):
        """Gets the expected_audience of this OAuth2ConfigurationType.  # noqa: E501


        :return: The expected_audience of this OAuth2ConfigurationType.  # noqa: E501
        :rtype: str
        """
        return self._expected_audience

    @expected_audience.setter
    def expected_audience(self, expected_audience):
        """Sets the expected_audience of this OAuth2ConfigurationType.


        :param expected_audience: The expected_audience of this OAuth2ConfigurationType.  # noqa: E501
        :type: str
        """

        self._expected_audience = expected_audience

    @property
    def token_user(self):
        """Gets the token_user of this OAuth2ConfigurationType.  # noqa: E501


        :return: The token_user of this OAuth2ConfigurationType.  # noqa: E501
        :rtype: str
        """
        return self._token_user

    @token_user.setter
    def token_user(self, token_user):
        """Sets the token_user of this OAuth2ConfigurationType.


        :param token_user: The token_user of this OAuth2ConfigurationType.  # noqa: E501
        :type: str
        """

        self._token_user = token_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OAuth2ConfigurationType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
