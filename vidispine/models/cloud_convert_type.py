# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class CloudConvertType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'public_address': 'str',
        'api_host': 'str',
        'api_key': 'str',
        'input_method': 'str',
        'script': 'str'
    }

    attribute_map = {
        'public_address': 'publicAddress',
        'api_host': 'apiHost',
        'api_key': 'apiKey',
        'input_method': 'inputMethod',
        'script': 'script'
    }

    def __init__(self, public_address=None, api_host=None, api_key=None, input_method=None, script=None):  # noqa: E501
        """CloudConvertType - a model defined in OpenAPI"""  # noqa: E501

        self._public_address = None
        self._api_host = None
        self._api_key = None
        self._input_method = None
        self._script = None
        self.discriminator = None

        self.public_address = public_address
        self.api_host = api_host
        self.api_key = api_key
        self.input_method = input_method
        self.script = script

    @property
    def public_address(self):
        """Gets the public_address of this CloudConvertType.  # noqa: E501


        :return: The public_address of this CloudConvertType.  # noqa: E501
        :rtype: str
        """
        return self._public_address

    @public_address.setter
    def public_address(self, public_address):
        """Sets the public_address of this CloudConvertType.


        :param public_address: The public_address of this CloudConvertType.  # noqa: E501
        :type: str
        """
        if public_address is None:
            raise ValueError("Invalid value for `public_address`, must not be `None`")  # noqa: E501

        self._public_address = public_address

    @property
    def api_host(self):
        """Gets the api_host of this CloudConvertType.  # noqa: E501


        :return: The api_host of this CloudConvertType.  # noqa: E501
        :rtype: str
        """
        return self._api_host

    @api_host.setter
    def api_host(self, api_host):
        """Sets the api_host of this CloudConvertType.


        :param api_host: The api_host of this CloudConvertType.  # noqa: E501
        :type: str
        """
        if api_host is None:
            raise ValueError("Invalid value for `api_host`, must not be `None`")  # noqa: E501

        self._api_host = api_host

    @property
    def api_key(self):
        """Gets the api_key of this CloudConvertType.  # noqa: E501


        :return: The api_key of this CloudConvertType.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this CloudConvertType.


        :param api_key: The api_key of this CloudConvertType.  # noqa: E501
        :type: str
        """
        if api_key is None:
            raise ValueError("Invalid value for `api_key`, must not be `None`")  # noqa: E501

        self._api_key = api_key

    @property
    def input_method(self):
        """Gets the input_method of this CloudConvertType.  # noqa: E501


        :return: The input_method of this CloudConvertType.  # noqa: E501
        :rtype: str
        """
        return self._input_method

    @input_method.setter
    def input_method(self, input_method):
        """Sets the input_method of this CloudConvertType.


        :param input_method: The input_method of this CloudConvertType.  # noqa: E501
        :type: str
        """
        if input_method is None:
            raise ValueError("Invalid value for `input_method`, must not be `None`")  # noqa: E501

        self._input_method = input_method

    @property
    def script(self):
        """Gets the script of this CloudConvertType.  # noqa: E501


        :return: The script of this CloudConvertType.  # noqa: E501
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this CloudConvertType.


        :param script: The script of this CloudConvertType.  # noqa: E501
        :type: str
        """
        if script is None:
            raise ValueError("Invalid value for `script`, must not be `None`")  # noqa: E501

        self._script = script

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudConvertType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
