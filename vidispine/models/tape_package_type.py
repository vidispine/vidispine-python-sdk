# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class TapePackageType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'timestamp': 'MXFTimestampType',
        'umid': 'str',
        'track': 'list[TapePackageTrackType]'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'umid': 'umid',
        'track': 'track'
    }

    def __init__(self, timestamp=None, umid=None, track=None):  # noqa: E501
        """TapePackageType - a model defined in OpenAPI"""  # noqa: E501

        self._timestamp = None
        self._umid = None
        self._track = None
        self.discriminator = None

        self.timestamp = timestamp
        self.umid = umid
        if track is not None:
            self.track = track

    @property
    def timestamp(self):
        """Gets the timestamp of this TapePackageType.  # noqa: E501


        :return: The timestamp of this TapePackageType.  # noqa: E501
        :rtype: MXFTimestampType
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this TapePackageType.


        :param timestamp: The timestamp of this TapePackageType.  # noqa: E501
        :type: MXFTimestampType
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def umid(self):
        """Gets the umid of this TapePackageType.  # noqa: E501


        :return: The umid of this TapePackageType.  # noqa: E501
        :rtype: str
        """
        return self._umid

    @umid.setter
    def umid(self, umid):
        """Sets the umid of this TapePackageType.


        :param umid: The umid of this TapePackageType.  # noqa: E501
        :type: str
        """
        if umid is None:
            raise ValueError("Invalid value for `umid`, must not be `None`")  # noqa: E501

        self._umid = umid

    @property
    def track(self):
        """Gets the track of this TapePackageType.  # noqa: E501


        :return: The track of this TapePackageType.  # noqa: E501
        :rtype: list[TapePackageTrackType]
        """
        return self._track

    @track.setter
    def track(self, track):
        """Sets the track of this TapePackageType.


        :param track: The track of this TapePackageType.  # noqa: E501
        :type: list[TapePackageTrackType]
        """

        self._track = track

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TapePackageType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
