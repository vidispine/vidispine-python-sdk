# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class ConformTimePointType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'time_base': 'TimeBaseType',
        'samples': 'int'
    }

    attribute_map = {
        'time_base': 'timeBase',
        'samples': 'samples'
    }

    def __init__(self, time_base=None, samples=None):  # noqa: E501
        """ConformTimePointType - a model defined in OpenAPI"""  # noqa: E501

        self._time_base = None
        self._samples = None
        self.discriminator = None

        if time_base is not None:
            self.time_base = time_base
        self.samples = samples

    @property
    def time_base(self):
        """Gets the time_base of this ConformTimePointType.  # noqa: E501


        :return: The time_base of this ConformTimePointType.  # noqa: E501
        :rtype: TimeBaseType
        """
        return self._time_base

    @time_base.setter
    def time_base(self, time_base):
        """Sets the time_base of this ConformTimePointType.


        :param time_base: The time_base of this ConformTimePointType.  # noqa: E501
        :type: TimeBaseType
        """

        self._time_base = time_base

    @property
    def samples(self):
        """Gets the samples of this ConformTimePointType.  # noqa: E501


        :return: The samples of this ConformTimePointType.  # noqa: E501
        :rtype: int
        """
        return self._samples

    @samples.setter
    def samples(self, samples):
        """Sets the samples of this ConformTimePointType.


        :param samples: The samples of this ConformTimePointType.  # noqa: E501
        :type: int
        """
        if samples is None:
            raise ValueError("Invalid value for `samples`, must not be `None`")  # noqa: E501

        self._samples = samples

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConformTimePointType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
