# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class FileReferenceType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'status': 'str',
        'path': 'str',
        'hash': 'str',
        'id': 'str',
        'file': 'list[FileType]'
    }

    attribute_map = {
        'status': 'status',
        'path': 'path',
        'hash': 'hash',
        'id': 'id',
        'file': 'file'
    }

    def __init__(self, status=None, path=None, hash=None, id=None, file=None):  # noqa: E501
        """FileReferenceType - a model defined in OpenAPI"""  # noqa: E501

        self._status = None
        self._path = None
        self._hash = None
        self._id = None
        self._file = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if path is not None:
            self.path = path
        if hash is not None:
            self.hash = hash
        if id is not None:
            self.id = id
        if file is not None:
            self.file = file

    @property
    def status(self):
        """Gets the status of this FileReferenceType.  # noqa: E501


        :return: The status of this FileReferenceType.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FileReferenceType.


        :param status: The status of this FileReferenceType.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def path(self):
        """Gets the path of this FileReferenceType.  # noqa: E501


        :return: The path of this FileReferenceType.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this FileReferenceType.


        :param path: The path of this FileReferenceType.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def hash(self):
        """Gets the hash of this FileReferenceType.  # noqa: E501


        :return: The hash of this FileReferenceType.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this FileReferenceType.


        :param hash: The hash of this FileReferenceType.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def id(self):
        """Gets the id of this FileReferenceType.  # noqa: E501


        :return: The id of this FileReferenceType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FileReferenceType.


        :param id: The id of this FileReferenceType.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def file(self):
        """Gets the file of this FileReferenceType.  # noqa: E501


        :return: The file of this FileReferenceType.  # noqa: E501
        :rtype: list[FileType]
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this FileReferenceType.


        :param file: The file of this FileReferenceType.  # noqa: E501
        :type: list[FileType]
        """

        self._file = file

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileReferenceType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
