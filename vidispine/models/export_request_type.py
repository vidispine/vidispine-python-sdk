# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class ExportRequestType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'sequence': 'SequenceType',
        'format': 'str',
        'storage': 'list[ExportRequestTypeStorage]',
        'content': 'list[str]',
        'item': 'list[ExportRequestTypeItem]',
        'tag': 'str'
    }

    attribute_map = {
        'sequence': 'sequence',
        'format': 'format',
        'storage': 'storage',
        'content': 'content',
        'item': 'item',
        'tag': 'tag'
    }

    def __init__(self, sequence=None, format=None, storage=None, content=None, item=None, tag=None):  # noqa: E501
        """ExportRequestType - a model defined in OpenAPI"""  # noqa: E501

        self._sequence = None
        self._format = None
        self._storage = None
        self._content = None
        self._item = None
        self._tag = None
        self.discriminator = None

        if sequence is not None:
            self.sequence = sequence
        if format is not None:
            self.format = format
        if storage is not None:
            self.storage = storage
        if content is not None:
            self.content = content
        if item is not None:
            self.item = item
        if tag is not None:
            self.tag = tag

    @property
    def sequence(self):
        """Gets the sequence of this ExportRequestType.  # noqa: E501


        :return: The sequence of this ExportRequestType.  # noqa: E501
        :rtype: SequenceType
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this ExportRequestType.


        :param sequence: The sequence of this ExportRequestType.  # noqa: E501
        :type: SequenceType
        """

        self._sequence = sequence

    @property
    def format(self):
        """Gets the format of this ExportRequestType.  # noqa: E501


        :return: The format of this ExportRequestType.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ExportRequestType.


        :param format: The format of this ExportRequestType.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def storage(self):
        """Gets the storage of this ExportRequestType.  # noqa: E501


        :return: The storage of this ExportRequestType.  # noqa: E501
        :rtype: list[ExportRequestTypeStorage]
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this ExportRequestType.


        :param storage: The storage of this ExportRequestType.  # noqa: E501
        :type: list[ExportRequestTypeStorage]
        """

        self._storage = storage

    @property
    def content(self):
        """Gets the content of this ExportRequestType.  # noqa: E501


        :return: The content of this ExportRequestType.  # noqa: E501
        :rtype: list[str]
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this ExportRequestType.


        :param content: The content of this ExportRequestType.  # noqa: E501
        :type: list[str]
        """

        self._content = content

    @property
    def item(self):
        """Gets the item of this ExportRequestType.  # noqa: E501


        :return: The item of this ExportRequestType.  # noqa: E501
        :rtype: list[ExportRequestTypeItem]
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this ExportRequestType.


        :param item: The item of this ExportRequestType.  # noqa: E501
        :type: list[ExportRequestTypeItem]
        """

        self._item = item

    @property
    def tag(self):
        """Gets the tag of this ExportRequestType.  # noqa: E501


        :return: The tag of this ExportRequestType.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this ExportRequestType.


        :param tag: The tag of this ExportRequestType.  # noqa: E501
        :type: str
        """

        self._tag = tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExportRequestType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
