# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class ProjectVersionType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'item': 'list[ProjectVersionTypeItem]',
        'metadata': 'MetadataType',
        'id': 'str',
        'sequence': 'list[SequenceType]'
    }

    attribute_map = {
        'item': 'item',
        'metadata': 'metadata',
        'id': 'id',
        'sequence': 'sequence'
    }

    def __init__(self, item=None, metadata=None, id=None, sequence=None):  # noqa: E501
        """ProjectVersionType - a model defined in OpenAPI"""  # noqa: E501

        self._item = None
        self._metadata = None
        self._id = None
        self._sequence = None
        self.discriminator = None

        if item is not None:
            self.item = item
        if metadata is not None:
            self.metadata = metadata
        if id is not None:
            self.id = id
        if sequence is not None:
            self.sequence = sequence

    @property
    def item(self):
        """Gets the item of this ProjectVersionType.  # noqa: E501


        :return: The item of this ProjectVersionType.  # noqa: E501
        :rtype: list[ProjectVersionTypeItem]
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this ProjectVersionType.


        :param item: The item of this ProjectVersionType.  # noqa: E501
        :type: list[ProjectVersionTypeItem]
        """

        self._item = item

    @property
    def metadata(self):
        """Gets the metadata of this ProjectVersionType.  # noqa: E501


        :return: The metadata of this ProjectVersionType.  # noqa: E501
        :rtype: MetadataType
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ProjectVersionType.


        :param metadata: The metadata of this ProjectVersionType.  # noqa: E501
        :type: MetadataType
        """

        self._metadata = metadata

    @property
    def id(self):
        """Gets the id of this ProjectVersionType.  # noqa: E501


        :return: The id of this ProjectVersionType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectVersionType.


        :param id: The id of this ProjectVersionType.  # noqa: E501
        :type: str
        """
        if id is not None and not re.search(r'([_A-Za-z]+-)?([A-Za-z_][A-Za-z0-9_]*-|(([A-Za-z_][A-Za-z0-9_]*)?\*))([0-9]{1}[0-9]{0,31})', id):  # noqa: E501
            raise ValueError(r"Invalid value for `id`, must be a follow pattern or equal to `/([_A-Za-z]+-)?([A-Za-z_][A-Za-z0-9_]*-|(([A-Za-z_][A-Za-z0-9_]*)?\*))([0-9]{1}[0-9]{0,31})/`")  # noqa: E501

        self._id = id

    @property
    def sequence(self):
        """Gets the sequence of this ProjectVersionType.  # noqa: E501


        :return: The sequence of this ProjectVersionType.  # noqa: E501
        :rtype: list[SequenceType]
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this ProjectVersionType.


        :param sequence: The sequence of this ProjectVersionType.  # noqa: E501
        :type: list[SequenceType]
        """

        self._sequence = sequence

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectVersionType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
