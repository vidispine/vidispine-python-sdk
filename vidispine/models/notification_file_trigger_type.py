# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class NotificationFileTriggerType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'hash': 'str',
        'storage': 'str',
        'new': 'str',
        'close': 'str',
        'change': 'str',
        'delete': 'str'
    }

    attribute_map = {
        'type': 'type',
        'hash': 'hash',
        'storage': 'storage',
        'new': 'new',
        'close': 'close',
        'change': 'change',
        'delete': 'delete'
    }

    def __init__(self, type=None, hash=None, storage=None, new=None, close=None, change=None, delete=None):  # noqa: E501
        """NotificationFileTriggerType - a model defined in OpenAPI"""  # noqa: E501

        self._type = None
        self._hash = None
        self._storage = None
        self._new = None
        self._close = None
        self._change = None
        self._delete = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if hash is not None:
            self.hash = hash
        if storage is not None:
            self.storage = storage
        if new is not None:
            self.new = new
        if close is not None:
            self.close = close
        if change is not None:
            self.change = change
        if delete is not None:
            self.delete = delete

    @property
    def type(self):
        """Gets the type of this NotificationFileTriggerType.  # noqa: E501


        :return: The type of this NotificationFileTriggerType.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NotificationFileTriggerType.


        :param type: The type of this NotificationFileTriggerType.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def hash(self):
        """Gets the hash of this NotificationFileTriggerType.  # noqa: E501


        :return: The hash of this NotificationFileTriggerType.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this NotificationFileTriggerType.


        :param hash: The hash of this NotificationFileTriggerType.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def storage(self):
        """Gets the storage of this NotificationFileTriggerType.  # noqa: E501


        :return: The storage of this NotificationFileTriggerType.  # noqa: E501
        :rtype: str
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this NotificationFileTriggerType.


        :param storage: The storage of this NotificationFileTriggerType.  # noqa: E501
        :type: str
        """
        if storage is not None and not re.search(r'([_A-Za-z]+-)?([A-Za-z_][A-Za-z0-9_]*-|(([A-Za-z_][A-Za-z0-9_]*)?\*))([0-9]{1}[0-9]{0,31})', storage):  # noqa: E501
            raise ValueError(r"Invalid value for `storage`, must be a follow pattern or equal to `/([_A-Za-z]+-)?([A-Za-z_][A-Za-z0-9_]*-|(([A-Za-z_][A-Za-z0-9_]*)?\*))([0-9]{1}[0-9]{0,31})/`")  # noqa: E501

        self._storage = storage

    @property
    def new(self):
        """Gets the new of this NotificationFileTriggerType.  # noqa: E501


        :return: The new of this NotificationFileTriggerType.  # noqa: E501
        :rtype: str
        """
        return self._new

    @new.setter
    def new(self, new):
        """Sets the new of this NotificationFileTriggerType.


        :param new: The new of this NotificationFileTriggerType.  # noqa: E501
        :type: str
        """

        self._new = new

    @property
    def close(self):
        """Gets the close of this NotificationFileTriggerType.  # noqa: E501


        :return: The close of this NotificationFileTriggerType.  # noqa: E501
        :rtype: str
        """
        return self._close

    @close.setter
    def close(self, close):
        """Sets the close of this NotificationFileTriggerType.


        :param close: The close of this NotificationFileTriggerType.  # noqa: E501
        :type: str
        """

        self._close = close

    @property
    def change(self):
        """Gets the change of this NotificationFileTriggerType.  # noqa: E501


        :return: The change of this NotificationFileTriggerType.  # noqa: E501
        :rtype: str
        """
        return self._change

    @change.setter
    def change(self, change):
        """Sets the change of this NotificationFileTriggerType.


        :param change: The change of this NotificationFileTriggerType.  # noqa: E501
        :type: str
        """

        self._change = change

    @property
    def delete(self):
        """Gets the delete of this NotificationFileTriggerType.  # noqa: E501


        :return: The delete of this NotificationFileTriggerType.  # noqa: E501
        :rtype: str
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this NotificationFileTriggerType.


        :param delete: The delete of this NotificationFileTriggerType.  # noqa: E501
        :type: str
        """

        self._delete = delete

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationFileTriggerType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
