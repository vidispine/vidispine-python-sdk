# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class MetadataFieldTypeConstraint(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'parent': 'str',
        'level_property': 'str',
        'value': 'str',
        'dataset': 'str',
        'validation_group': 'str',
        'level_value': 'str'
    }

    attribute_map = {
        'parent': 'parent',
        'level_property': 'levelProperty',
        'value': 'value',
        'dataset': 'dataset',
        'validation_group': 'validationGroup',
        'level_value': 'levelValue'
    }

    def __init__(self, parent=None, level_property=None, value=None, dataset=None, validation_group=None, level_value=None):  # noqa: E501
        """MetadataFieldTypeConstraint - a model defined in OpenAPI"""  # noqa: E501

        self._parent = None
        self._level_property = None
        self._value = None
        self._dataset = None
        self._validation_group = None
        self._level_value = None
        self.discriminator = None

        if parent is not None:
            self.parent = parent
        self.level_property = level_property
        self.value = value
        self.dataset = dataset
        if validation_group is not None:
            self.validation_group = validation_group
        self.level_value = level_value

    @property
    def parent(self):
        """Gets the parent of this MetadataFieldTypeConstraint.  # noqa: E501


        :return: The parent of this MetadataFieldTypeConstraint.  # noqa: E501
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this MetadataFieldTypeConstraint.


        :param parent: The parent of this MetadataFieldTypeConstraint.  # noqa: E501
        :type: str
        """

        self._parent = parent

    @property
    def level_property(self):
        """Gets the level_property of this MetadataFieldTypeConstraint.  # noqa: E501


        :return: The level_property of this MetadataFieldTypeConstraint.  # noqa: E501
        :rtype: str
        """
        return self._level_property

    @level_property.setter
    def level_property(self, level_property):
        """Sets the level_property of this MetadataFieldTypeConstraint.


        :param level_property: The level_property of this MetadataFieldTypeConstraint.  # noqa: E501
        :type: str
        """
        if level_property is None:
            raise ValueError("Invalid value for `level_property`, must not be `None`")  # noqa: E501

        self._level_property = level_property

    @property
    def value(self):
        """Gets the value of this MetadataFieldTypeConstraint.  # noqa: E501


        :return: The value of this MetadataFieldTypeConstraint.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this MetadataFieldTypeConstraint.


        :param value: The value of this MetadataFieldTypeConstraint.  # noqa: E501
        :type: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def dataset(self):
        """Gets the dataset of this MetadataFieldTypeConstraint.  # noqa: E501


        :return: The dataset of this MetadataFieldTypeConstraint.  # noqa: E501
        :rtype: str
        """
        return self._dataset

    @dataset.setter
    def dataset(self, dataset):
        """Sets the dataset of this MetadataFieldTypeConstraint.


        :param dataset: The dataset of this MetadataFieldTypeConstraint.  # noqa: E501
        :type: str
        """
        if dataset is None:
            raise ValueError("Invalid value for `dataset`, must not be `None`")  # noqa: E501

        self._dataset = dataset

    @property
    def validation_group(self):
        """Gets the validation_group of this MetadataFieldTypeConstraint.  # noqa: E501


        :return: The validation_group of this MetadataFieldTypeConstraint.  # noqa: E501
        :rtype: str
        """
        return self._validation_group

    @validation_group.setter
    def validation_group(self, validation_group):
        """Sets the validation_group of this MetadataFieldTypeConstraint.


        :param validation_group: The validation_group of this MetadataFieldTypeConstraint.  # noqa: E501
        :type: str
        """

        self._validation_group = validation_group

    @property
    def level_value(self):
        """Gets the level_value of this MetadataFieldTypeConstraint.  # noqa: E501


        :return: The level_value of this MetadataFieldTypeConstraint.  # noqa: E501
        :rtype: str
        """
        return self._level_value

    @level_value.setter
    def level_value(self, level_value):
        """Sets the level_value of this MetadataFieldTypeConstraint.


        :param level_value: The level_value of this MetadataFieldTypeConstraint.  # noqa: E501
        :type: str
        """
        if level_value is None:
            raise ValueError("Invalid value for `level_value`, must not be `None`")  # noqa: E501

        self._level_value = level_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataFieldTypeConstraint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
