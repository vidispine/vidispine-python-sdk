# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class LoudnessType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'loudness_lu': 'float',
        'end': 'str',
        'mix': 'list[LoudnessMixType]',
        'start_loudness': 'str',
        'end_loudness': 'str',
        'start': 'str',
        'shape': 'str',
        'loudness_range_lu': 'float',
        'start_range': 'str',
        'shape_tag': 'str',
        'id': 'str',
        'end_range': 'str'
    }

    attribute_map = {
        'loudness_lu': 'loudnessLU',
        'end': 'end',
        'mix': 'mix',
        'start_loudness': 'startLoudness',
        'end_loudness': 'endLoudness',
        'start': 'start',
        'shape': 'shape',
        'loudness_range_lu': 'loudnessRangeLU',
        'start_range': 'startRange',
        'shape_tag': 'shapeTag',
        'id': 'id',
        'end_range': 'endRange'
    }

    def __init__(self, loudness_lu=None, end=None, mix=None, start_loudness=None, end_loudness=None, start=None, shape=None, loudness_range_lu=None, start_range=None, shape_tag=None, id=None, end_range=None):  # noqa: E501
        """LoudnessType - a model defined in OpenAPI"""  # noqa: E501

        self._loudness_lu = None
        self._end = None
        self._mix = None
        self._start_loudness = None
        self._end_loudness = None
        self._start = None
        self._shape = None
        self._loudness_range_lu = None
        self._start_range = None
        self._shape_tag = None
        self._id = None
        self._end_range = None
        self.discriminator = None

        if loudness_lu is not None:
            self.loudness_lu = loudness_lu
        if end is not None:
            self.end = end
        if mix is not None:
            self.mix = mix
        if start_loudness is not None:
            self.start_loudness = start_loudness
        if end_loudness is not None:
            self.end_loudness = end_loudness
        if start is not None:
            self.start = start
        if shape is not None:
            self.shape = shape
        if loudness_range_lu is not None:
            self.loudness_range_lu = loudness_range_lu
        if start_range is not None:
            self.start_range = start_range
        if shape_tag is not None:
            self.shape_tag = shape_tag
        if id is not None:
            self.id = id
        if end_range is not None:
            self.end_range = end_range

    @property
    def loudness_lu(self):
        """Gets the loudness_lu of this LoudnessType.  # noqa: E501


        :return: The loudness_lu of this LoudnessType.  # noqa: E501
        :rtype: float
        """
        return self._loudness_lu

    @loudness_lu.setter
    def loudness_lu(self, loudness_lu):
        """Sets the loudness_lu of this LoudnessType.


        :param loudness_lu: The loudness_lu of this LoudnessType.  # noqa: E501
        :type: float
        """

        self._loudness_lu = loudness_lu

    @property
    def end(self):
        """Gets the end of this LoudnessType.  # noqa: E501


        :return: The end of this LoudnessType.  # noqa: E501
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this LoudnessType.


        :param end: The end of this LoudnessType.  # noqa: E501
        :type: str
        """

        self._end = end

    @property
    def mix(self):
        """Gets the mix of this LoudnessType.  # noqa: E501


        :return: The mix of this LoudnessType.  # noqa: E501
        :rtype: list[LoudnessMixType]
        """
        return self._mix

    @mix.setter
    def mix(self, mix):
        """Sets the mix of this LoudnessType.


        :param mix: The mix of this LoudnessType.  # noqa: E501
        :type: list[LoudnessMixType]
        """

        self._mix = mix

    @property
    def start_loudness(self):
        """Gets the start_loudness of this LoudnessType.  # noqa: E501


        :return: The start_loudness of this LoudnessType.  # noqa: E501
        :rtype: str
        """
        return self._start_loudness

    @start_loudness.setter
    def start_loudness(self, start_loudness):
        """Sets the start_loudness of this LoudnessType.


        :param start_loudness: The start_loudness of this LoudnessType.  # noqa: E501
        :type: str
        """

        self._start_loudness = start_loudness

    @property
    def end_loudness(self):
        """Gets the end_loudness of this LoudnessType.  # noqa: E501


        :return: The end_loudness of this LoudnessType.  # noqa: E501
        :rtype: str
        """
        return self._end_loudness

    @end_loudness.setter
    def end_loudness(self, end_loudness):
        """Sets the end_loudness of this LoudnessType.


        :param end_loudness: The end_loudness of this LoudnessType.  # noqa: E501
        :type: str
        """

        self._end_loudness = end_loudness

    @property
    def start(self):
        """Gets the start of this LoudnessType.  # noqa: E501


        :return: The start of this LoudnessType.  # noqa: E501
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this LoudnessType.


        :param start: The start of this LoudnessType.  # noqa: E501
        :type: str
        """

        self._start = start

    @property
    def shape(self):
        """Gets the shape of this LoudnessType.  # noqa: E501


        :return: The shape of this LoudnessType.  # noqa: E501
        :rtype: str
        """
        return self._shape

    @shape.setter
    def shape(self, shape):
        """Sets the shape of this LoudnessType.


        :param shape: The shape of this LoudnessType.  # noqa: E501
        :type: str
        """
        if shape is not None and not re.search(r'([_A-Za-z]+-)?([A-Za-z_][A-Za-z0-9_]*-|(([A-Za-z_][A-Za-z0-9_]*)?\*))([0-9]{1}[0-9]{0,31})', shape):  # noqa: E501
            raise ValueError(r"Invalid value for `shape`, must be a follow pattern or equal to `/([_A-Za-z]+-)?([A-Za-z_][A-Za-z0-9_]*-|(([A-Za-z_][A-Za-z0-9_]*)?\*))([0-9]{1}[0-9]{0,31})/`")  # noqa: E501

        self._shape = shape

    @property
    def loudness_range_lu(self):
        """Gets the loudness_range_lu of this LoudnessType.  # noqa: E501


        :return: The loudness_range_lu of this LoudnessType.  # noqa: E501
        :rtype: float
        """
        return self._loudness_range_lu

    @loudness_range_lu.setter
    def loudness_range_lu(self, loudness_range_lu):
        """Sets the loudness_range_lu of this LoudnessType.


        :param loudness_range_lu: The loudness_range_lu of this LoudnessType.  # noqa: E501
        :type: float
        """

        self._loudness_range_lu = loudness_range_lu

    @property
    def start_range(self):
        """Gets the start_range of this LoudnessType.  # noqa: E501


        :return: The start_range of this LoudnessType.  # noqa: E501
        :rtype: str
        """
        return self._start_range

    @start_range.setter
    def start_range(self, start_range):
        """Sets the start_range of this LoudnessType.


        :param start_range: The start_range of this LoudnessType.  # noqa: E501
        :type: str
        """

        self._start_range = start_range

    @property
    def shape_tag(self):
        """Gets the shape_tag of this LoudnessType.  # noqa: E501


        :return: The shape_tag of this LoudnessType.  # noqa: E501
        :rtype: str
        """
        return self._shape_tag

    @shape_tag.setter
    def shape_tag(self, shape_tag):
        """Sets the shape_tag of this LoudnessType.


        :param shape_tag: The shape_tag of this LoudnessType.  # noqa: E501
        :type: str
        """

        self._shape_tag = shape_tag

    @property
    def id(self):
        """Gets the id of this LoudnessType.  # noqa: E501


        :return: The id of this LoudnessType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LoudnessType.


        :param id: The id of this LoudnessType.  # noqa: E501
        :type: str
        """
        if id is not None and not re.search(r'([_A-Za-z]+-)?([A-Za-z_][A-Za-z0-9_]*-|(([A-Za-z_][A-Za-z0-9_]*)?\*))([0-9]{1}[0-9]{0,31})', id):  # noqa: E501
            raise ValueError(r"Invalid value for `id`, must be a follow pattern or equal to `/([_A-Za-z]+-)?([A-Za-z_][A-Za-z0-9_]*-|(([A-Za-z_][A-Za-z0-9_]*)?\*))([0-9]{1}[0-9]{0,31})/`")  # noqa: E501

        self._id = id

    @property
    def end_range(self):
        """Gets the end_range of this LoudnessType.  # noqa: E501


        :return: The end_range of this LoudnessType.  # noqa: E501
        :rtype: str
        """
        return self._end_range

    @end_range.setter
    def end_range(self, end_range):
        """Sets the end_range of this LoudnessType.


        :param end_range: The end_range of this LoudnessType.  # noqa: E501
        :type: str
        """

        self._end_range = end_range

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoudnessType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
