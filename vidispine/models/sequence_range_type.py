# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class SequenceRangeType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'count': 'int',
        'start': 'int',
        'wildcard': 'str',
        'value': 'str',
        'width': 'int'
    }

    attribute_map = {
        'count': 'count',
        'start': 'start',
        'wildcard': 'wildcard',
        'value': 'value',
        'width': 'width'
    }

    def __init__(self, count=None, start=None, wildcard=None, value=None, width=None):  # noqa: E501
        """SequenceRangeType - a model defined in OpenAPI"""  # noqa: E501

        self._count = None
        self._start = None
        self._wildcard = None
        self._value = None
        self._width = None
        self.discriminator = None

        if count is not None:
            self.count = count
        self.start = start
        self.wildcard = wildcard
        if value is not None:
            self.value = value
        if width is not None:
            self.width = width

    @property
    def count(self):
        """Gets the count of this SequenceRangeType.  # noqa: E501


        :return: The count of this SequenceRangeType.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this SequenceRangeType.


        :param count: The count of this SequenceRangeType.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def start(self):
        """Gets the start of this SequenceRangeType.  # noqa: E501


        :return: The start of this SequenceRangeType.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this SequenceRangeType.


        :param start: The start of this SequenceRangeType.  # noqa: E501
        :type: int
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    @property
    def wildcard(self):
        """Gets the wildcard of this SequenceRangeType.  # noqa: E501


        :return: The wildcard of this SequenceRangeType.  # noqa: E501
        :rtype: str
        """
        return self._wildcard

    @wildcard.setter
    def wildcard(self, wildcard):
        """Sets the wildcard of this SequenceRangeType.


        :param wildcard: The wildcard of this SequenceRangeType.  # noqa: E501
        :type: str
        """
        if wildcard is None:
            raise ValueError("Invalid value for `wildcard`, must not be `None`")  # noqa: E501

        self._wildcard = wildcard

    @property
    def value(self):
        """Gets the value of this SequenceRangeType.  # noqa: E501


        :return: The value of this SequenceRangeType.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SequenceRangeType.


        :param value: The value of this SequenceRangeType.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def width(self):
        """Gets the width of this SequenceRangeType.  # noqa: E501


        :return: The width of this SequenceRangeType.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this SequenceRangeType.


        :param width: The width of this SequenceRangeType.  # noqa: E501
        :type: int
        """

        self._width = width

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SequenceRangeType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
