# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class ComplexJobAnalyzeType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bars_thresh': 'float',
        'metadata_uri': 'str',
        'black_percentage': 'int',
        'freeze_thresh': 'float',
        'freeze_time': 'float',
        'video': 'AnalyzeVideoType',
        'bars_percentage': 'int',
        'black_thresh': 'float',
        'audio': 'AnalyzeAudioType',
        'channel': 'list[AnalyzeAudioChannelType]'
    }

    attribute_map = {
        'bars_thresh': 'barsThresh',
        'metadata_uri': 'metadataUri',
        'black_percentage': 'blackPercentage',
        'freeze_thresh': 'freezeThresh',
        'freeze_time': 'freezeTime',
        'video': 'video',
        'bars_percentage': 'barsPercentage',
        'black_thresh': 'blackThresh',
        'audio': 'audio',
        'channel': 'channel'
    }

    def __init__(self, bars_thresh=None, metadata_uri=None, black_percentage=None, freeze_thresh=None, freeze_time=None, video=None, bars_percentage=None, black_thresh=None, audio=None, channel=None):  # noqa: E501
        """ComplexJobAnalyzeType - a model defined in OpenAPI"""  # noqa: E501

        self._bars_thresh = None
        self._metadata_uri = None
        self._black_percentage = None
        self._freeze_thresh = None
        self._freeze_time = None
        self._video = None
        self._bars_percentage = None
        self._black_thresh = None
        self._audio = None
        self._channel = None
        self.discriminator = None

        if bars_thresh is not None:
            self.bars_thresh = bars_thresh
        self.metadata_uri = metadata_uri
        if black_percentage is not None:
            self.black_percentage = black_percentage
        if freeze_thresh is not None:
            self.freeze_thresh = freeze_thresh
        if freeze_time is not None:
            self.freeze_time = freeze_time
        if video is not None:
            self.video = video
        if bars_percentage is not None:
            self.bars_percentage = bars_percentage
        if black_thresh is not None:
            self.black_thresh = black_thresh
        if audio is not None:
            self.audio = audio
        if channel is not None:
            self.channel = channel

    @property
    def bars_thresh(self):
        """Gets the bars_thresh of this ComplexJobAnalyzeType.  # noqa: E501


        :return: The bars_thresh of this ComplexJobAnalyzeType.  # noqa: E501
        :rtype: float
        """
        return self._bars_thresh

    @bars_thresh.setter
    def bars_thresh(self, bars_thresh):
        """Sets the bars_thresh of this ComplexJobAnalyzeType.


        :param bars_thresh: The bars_thresh of this ComplexJobAnalyzeType.  # noqa: E501
        :type: float
        """

        self._bars_thresh = bars_thresh

    @property
    def metadata_uri(self):
        """Gets the metadata_uri of this ComplexJobAnalyzeType.  # noqa: E501


        :return: The metadata_uri of this ComplexJobAnalyzeType.  # noqa: E501
        :rtype: str
        """
        return self._metadata_uri

    @metadata_uri.setter
    def metadata_uri(self, metadata_uri):
        """Sets the metadata_uri of this ComplexJobAnalyzeType.


        :param metadata_uri: The metadata_uri of this ComplexJobAnalyzeType.  # noqa: E501
        :type: str
        """
        if metadata_uri is None:
            raise ValueError("Invalid value for `metadata_uri`, must not be `None`")  # noqa: E501

        self._metadata_uri = metadata_uri

    @property
    def black_percentage(self):
        """Gets the black_percentage of this ComplexJobAnalyzeType.  # noqa: E501


        :return: The black_percentage of this ComplexJobAnalyzeType.  # noqa: E501
        :rtype: int
        """
        return self._black_percentage

    @black_percentage.setter
    def black_percentage(self, black_percentage):
        """Sets the black_percentage of this ComplexJobAnalyzeType.


        :param black_percentage: The black_percentage of this ComplexJobAnalyzeType.  # noqa: E501
        :type: int
        """

        self._black_percentage = black_percentage

    @property
    def freeze_thresh(self):
        """Gets the freeze_thresh of this ComplexJobAnalyzeType.  # noqa: E501


        :return: The freeze_thresh of this ComplexJobAnalyzeType.  # noqa: E501
        :rtype: float
        """
        return self._freeze_thresh

    @freeze_thresh.setter
    def freeze_thresh(self, freeze_thresh):
        """Sets the freeze_thresh of this ComplexJobAnalyzeType.


        :param freeze_thresh: The freeze_thresh of this ComplexJobAnalyzeType.  # noqa: E501
        :type: float
        """

        self._freeze_thresh = freeze_thresh

    @property
    def freeze_time(self):
        """Gets the freeze_time of this ComplexJobAnalyzeType.  # noqa: E501


        :return: The freeze_time of this ComplexJobAnalyzeType.  # noqa: E501
        :rtype: float
        """
        return self._freeze_time

    @freeze_time.setter
    def freeze_time(self, freeze_time):
        """Sets the freeze_time of this ComplexJobAnalyzeType.


        :param freeze_time: The freeze_time of this ComplexJobAnalyzeType.  # noqa: E501
        :type: float
        """

        self._freeze_time = freeze_time

    @property
    def video(self):
        """Gets the video of this ComplexJobAnalyzeType.  # noqa: E501


        :return: The video of this ComplexJobAnalyzeType.  # noqa: E501
        :rtype: AnalyzeVideoType
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this ComplexJobAnalyzeType.


        :param video: The video of this ComplexJobAnalyzeType.  # noqa: E501
        :type: AnalyzeVideoType
        """

        self._video = video

    @property
    def bars_percentage(self):
        """Gets the bars_percentage of this ComplexJobAnalyzeType.  # noqa: E501


        :return: The bars_percentage of this ComplexJobAnalyzeType.  # noqa: E501
        :rtype: int
        """
        return self._bars_percentage

    @bars_percentage.setter
    def bars_percentage(self, bars_percentage):
        """Sets the bars_percentage of this ComplexJobAnalyzeType.


        :param bars_percentage: The bars_percentage of this ComplexJobAnalyzeType.  # noqa: E501
        :type: int
        """

        self._bars_percentage = bars_percentage

    @property
    def black_thresh(self):
        """Gets the black_thresh of this ComplexJobAnalyzeType.  # noqa: E501


        :return: The black_thresh of this ComplexJobAnalyzeType.  # noqa: E501
        :rtype: float
        """
        return self._black_thresh

    @black_thresh.setter
    def black_thresh(self, black_thresh):
        """Sets the black_thresh of this ComplexJobAnalyzeType.


        :param black_thresh: The black_thresh of this ComplexJobAnalyzeType.  # noqa: E501
        :type: float
        """

        self._black_thresh = black_thresh

    @property
    def audio(self):
        """Gets the audio of this ComplexJobAnalyzeType.  # noqa: E501


        :return: The audio of this ComplexJobAnalyzeType.  # noqa: E501
        :rtype: AnalyzeAudioType
        """
        return self._audio

    @audio.setter
    def audio(self, audio):
        """Sets the audio of this ComplexJobAnalyzeType.


        :param audio: The audio of this ComplexJobAnalyzeType.  # noqa: E501
        :type: AnalyzeAudioType
        """

        self._audio = audio

    @property
    def channel(self):
        """Gets the channel of this ComplexJobAnalyzeType.  # noqa: E501


        :return: The channel of this ComplexJobAnalyzeType.  # noqa: E501
        :rtype: list[AnalyzeAudioChannelType]
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this ComplexJobAnalyzeType.


        :param channel: The channel of this ComplexJobAnalyzeType.  # noqa: E501
        :type: list[AnalyzeAudioChannelType]
        """

        self._channel = channel

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComplexJobAnalyzeType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
