# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class LoudnessMixType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'source_item_track': 'str',
        'source_channel': 'int',
        'source_stream': 'int',
        'name': 'str',
        'weightd_b': 'float'
    }

    attribute_map = {
        'source_item_track': 'sourceItemTrack',
        'source_channel': 'sourceChannel',
        'source_stream': 'sourceStream',
        'name': 'name',
        'weightd_b': 'weightdB'
    }

    def __init__(self, source_item_track=None, source_channel=None, source_stream=None, name=None, weightd_b=None):  # noqa: E501
        """LoudnessMixType - a model defined in OpenAPI"""  # noqa: E501

        self._source_item_track = None
        self._source_channel = None
        self._source_stream = None
        self._name = None
        self._weightd_b = None
        self.discriminator = None

        if source_item_track is not None:
            self.source_item_track = source_item_track
        if source_channel is not None:
            self.source_channel = source_channel
        if source_stream is not None:
            self.source_stream = source_stream
        if name is not None:
            self.name = name
        if weightd_b is not None:
            self.weightd_b = weightd_b

    @property
    def source_item_track(self):
        """Gets the source_item_track of this LoudnessMixType.  # noqa: E501


        :return: The source_item_track of this LoudnessMixType.  # noqa: E501
        :rtype: str
        """
        return self._source_item_track

    @source_item_track.setter
    def source_item_track(self, source_item_track):
        """Sets the source_item_track of this LoudnessMixType.


        :param source_item_track: The source_item_track of this LoudnessMixType.  # noqa: E501
        :type: str
        """

        self._source_item_track = source_item_track

    @property
    def source_channel(self):
        """Gets the source_channel of this LoudnessMixType.  # noqa: E501


        :return: The source_channel of this LoudnessMixType.  # noqa: E501
        :rtype: int
        """
        return self._source_channel

    @source_channel.setter
    def source_channel(self, source_channel):
        """Sets the source_channel of this LoudnessMixType.


        :param source_channel: The source_channel of this LoudnessMixType.  # noqa: E501
        :type: int
        """

        self._source_channel = source_channel

    @property
    def source_stream(self):
        """Gets the source_stream of this LoudnessMixType.  # noqa: E501


        :return: The source_stream of this LoudnessMixType.  # noqa: E501
        :rtype: int
        """
        return self._source_stream

    @source_stream.setter
    def source_stream(self, source_stream):
        """Sets the source_stream of this LoudnessMixType.


        :param source_stream: The source_stream of this LoudnessMixType.  # noqa: E501
        :type: int
        """

        self._source_stream = source_stream

    @property
    def name(self):
        """Gets the name of this LoudnessMixType.  # noqa: E501


        :return: The name of this LoudnessMixType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LoudnessMixType.


        :param name: The name of this LoudnessMixType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def weightd_b(self):
        """Gets the weightd_b of this LoudnessMixType.  # noqa: E501


        :return: The weightd_b of this LoudnessMixType.  # noqa: E501
        :rtype: float
        """
        return self._weightd_b

    @weightd_b.setter
    def weightd_b(self, weightd_b):
        """Sets the weightd_b of this LoudnessMixType.


        :param weightd_b: The weightd_b of this LoudnessMixType.  # noqa: E501
        :type: float
        """

        self._weightd_b = weightd_b

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoudnessMixType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
