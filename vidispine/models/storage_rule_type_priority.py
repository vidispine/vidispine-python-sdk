# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class StorageRuleTypePriority(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'storagecriteriatype': 'str',
        'level': 'int'
    }

    attribute_map = {
        'storagecriteriatype': 'storagecriteriatype',
        'level': 'level'
    }

    def __init__(self, storagecriteriatype=None, level=None):  # noqa: E501
        """StorageRuleTypePriority - a model defined in OpenAPI"""  # noqa: E501

        self._storagecriteriatype = None
        self._level = None
        self.discriminator = None

        if storagecriteriatype is not None:
            self.storagecriteriatype = storagecriteriatype
        self.level = level

    @property
    def storagecriteriatype(self):
        """Gets the storagecriteriatype of this StorageRuleTypePriority.  # noqa: E501


        :return: The storagecriteriatype of this StorageRuleTypePriority.  # noqa: E501
        :rtype: str
        """
        return self._storagecriteriatype

    @storagecriteriatype.setter
    def storagecriteriatype(self, storagecriteriatype):
        """Sets the storagecriteriatype of this StorageRuleTypePriority.


        :param storagecriteriatype: The storagecriteriatype of this StorageRuleTypePriority.  # noqa: E501
        :type: str
        """
        allowed_values = ["bandwidth", "capacity"]  # noqa: E501
        if storagecriteriatype not in allowed_values:
            raise ValueError(
                "Invalid value for `storagecriteriatype` ({0}), must be one of {1}"  # noqa: E501
                .format(storagecriteriatype, allowed_values)
            )

        self._storagecriteriatype = storagecriteriatype

    @property
    def level(self):
        """Gets the level of this StorageRuleTypePriority.  # noqa: E501


        :return: The level of this StorageRuleTypePriority.  # noqa: E501
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this StorageRuleTypePriority.


        :param level: The level of this StorageRuleTypePriority.  # noqa: E501
        :type: int
        """
        if level is None:
            raise ValueError("Invalid value for `level`, must not be `None`")  # noqa: E501

        self._level = level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StorageRuleTypePriority):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
