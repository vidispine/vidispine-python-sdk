# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class ComplexJobVideoOutputTypeAllOfGeneratePosters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'format': 'str',
        'uri': 'list[str]',
        'setting': 'list[KeyValuePairType]',
        'background': 'str',
        'time_code': 'list[TimeCodeType]',
        'resolution': 'ResolutionType',
        'small_posters': 'bool'
    }

    attribute_map = {
        'format': 'format',
        'uri': 'uri',
        'setting': 'setting',
        'background': 'background',
        'time_code': 'timeCode',
        'resolution': 'resolution',
        'small_posters': 'smallPosters'
    }

    def __init__(self, format=None, uri=None, setting=None, background=None, time_code=None, resolution=None, small_posters=None):  # noqa: E501
        """ComplexJobVideoOutputTypeAllOfGeneratePosters - a model defined in OpenAPI"""  # noqa: E501

        self._format = None
        self._uri = None
        self._setting = None
        self._background = None
        self._time_code = None
        self._resolution = None
        self._small_posters = None
        self.discriminator = None

        if format is not None:
            self.format = format
        if uri is not None:
            self.uri = uri
        if setting is not None:
            self.setting = setting
        if background is not None:
            self.background = background
        if time_code is not None:
            self.time_code = time_code
        if resolution is not None:
            self.resolution = resolution
        if small_posters is not None:
            self.small_posters = small_posters

    @property
    def format(self):
        """Gets the format of this ComplexJobVideoOutputTypeAllOfGeneratePosters.  # noqa: E501


        :return: The format of this ComplexJobVideoOutputTypeAllOfGeneratePosters.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ComplexJobVideoOutputTypeAllOfGeneratePosters.


        :param format: The format of this ComplexJobVideoOutputTypeAllOfGeneratePosters.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def uri(self):
        """Gets the uri of this ComplexJobVideoOutputTypeAllOfGeneratePosters.  # noqa: E501


        :return: The uri of this ComplexJobVideoOutputTypeAllOfGeneratePosters.  # noqa: E501
        :rtype: list[str]
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ComplexJobVideoOutputTypeAllOfGeneratePosters.


        :param uri: The uri of this ComplexJobVideoOutputTypeAllOfGeneratePosters.  # noqa: E501
        :type: list[str]
        """

        self._uri = uri

    @property
    def setting(self):
        """Gets the setting of this ComplexJobVideoOutputTypeAllOfGeneratePosters.  # noqa: E501


        :return: The setting of this ComplexJobVideoOutputTypeAllOfGeneratePosters.  # noqa: E501
        :rtype: list[KeyValuePairType]
        """
        return self._setting

    @setting.setter
    def setting(self, setting):
        """Sets the setting of this ComplexJobVideoOutputTypeAllOfGeneratePosters.


        :param setting: The setting of this ComplexJobVideoOutputTypeAllOfGeneratePosters.  # noqa: E501
        :type: list[KeyValuePairType]
        """

        self._setting = setting

    @property
    def background(self):
        """Gets the background of this ComplexJobVideoOutputTypeAllOfGeneratePosters.  # noqa: E501


        :return: The background of this ComplexJobVideoOutputTypeAllOfGeneratePosters.  # noqa: E501
        :rtype: str
        """
        return self._background

    @background.setter
    def background(self, background):
        """Sets the background of this ComplexJobVideoOutputTypeAllOfGeneratePosters.


        :param background: The background of this ComplexJobVideoOutputTypeAllOfGeneratePosters.  # noqa: E501
        :type: str
        """

        self._background = background

    @property
    def time_code(self):
        """Gets the time_code of this ComplexJobVideoOutputTypeAllOfGeneratePosters.  # noqa: E501


        :return: The time_code of this ComplexJobVideoOutputTypeAllOfGeneratePosters.  # noqa: E501
        :rtype: list[TimeCodeType]
        """
        return self._time_code

    @time_code.setter
    def time_code(self, time_code):
        """Sets the time_code of this ComplexJobVideoOutputTypeAllOfGeneratePosters.


        :param time_code: The time_code of this ComplexJobVideoOutputTypeAllOfGeneratePosters.  # noqa: E501
        :type: list[TimeCodeType]
        """

        self._time_code = time_code

    @property
    def resolution(self):
        """Gets the resolution of this ComplexJobVideoOutputTypeAllOfGeneratePosters.  # noqa: E501


        :return: The resolution of this ComplexJobVideoOutputTypeAllOfGeneratePosters.  # noqa: E501
        :rtype: ResolutionType
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this ComplexJobVideoOutputTypeAllOfGeneratePosters.


        :param resolution: The resolution of this ComplexJobVideoOutputTypeAllOfGeneratePosters.  # noqa: E501
        :type: ResolutionType
        """

        self._resolution = resolution

    @property
    def small_posters(self):
        """Gets the small_posters of this ComplexJobVideoOutputTypeAllOfGeneratePosters.  # noqa: E501


        :return: The small_posters of this ComplexJobVideoOutputTypeAllOfGeneratePosters.  # noqa: E501
        :rtype: bool
        """
        return self._small_posters

    @small_posters.setter
    def small_posters(self, small_posters):
        """Sets the small_posters of this ComplexJobVideoOutputTypeAllOfGeneratePosters.


        :param small_posters: The small_posters of this ComplexJobVideoOutputTypeAllOfGeneratePosters.  # noqa: E501
        :type: bool
        """

        self._small_posters = small_posters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComplexJobVideoOutputTypeAllOfGeneratePosters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
