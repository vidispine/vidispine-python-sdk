# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class ScheduledRequestType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'executed': 'datetime',
        'created': 'datetime',
        'request': 'ScheduledRequestTypeRequest',
        'response': 'ScheduledRequestTypeResponse',
        'state': 'str',
        'user': 'str',
        'date': 'datetime',
        'id': 'int'
    }

    attribute_map = {
        'executed': 'executed',
        'created': 'created',
        'request': 'request',
        'response': 'response',
        'state': 'state',
        'user': 'user',
        'date': 'date',
        'id': 'id'
    }

    def __init__(self, executed=None, created=None, request=None, response=None, state=None, user=None, date=None, id=None):  # noqa: E501
        """ScheduledRequestType - a model defined in OpenAPI"""  # noqa: E501

        self._executed = None
        self._created = None
        self._request = None
        self._response = None
        self._state = None
        self._user = None
        self._date = None
        self._id = None
        self.discriminator = None

        if executed is not None:
            self.executed = executed
        self.created = created
        self.request = request
        if response is not None:
            self.response = response
        self.state = state
        self.user = user
        self.date = date
        self.id = id

    @property
    def executed(self):
        """Gets the executed of this ScheduledRequestType.  # noqa: E501


        :return: The executed of this ScheduledRequestType.  # noqa: E501
        :rtype: datetime
        """
        return self._executed

    @executed.setter
    def executed(self, executed):
        """Sets the executed of this ScheduledRequestType.


        :param executed: The executed of this ScheduledRequestType.  # noqa: E501
        :type: datetime
        """

        self._executed = executed

    @property
    def created(self):
        """Gets the created of this ScheduledRequestType.  # noqa: E501


        :return: The created of this ScheduledRequestType.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ScheduledRequestType.


        :param created: The created of this ScheduledRequestType.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def request(self):
        """Gets the request of this ScheduledRequestType.  # noqa: E501


        :return: The request of this ScheduledRequestType.  # noqa: E501
        :rtype: ScheduledRequestTypeRequest
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this ScheduledRequestType.


        :param request: The request of this ScheduledRequestType.  # noqa: E501
        :type: ScheduledRequestTypeRequest
        """
        if request is None:
            raise ValueError("Invalid value for `request`, must not be `None`")  # noqa: E501

        self._request = request

    @property
    def response(self):
        """Gets the response of this ScheduledRequestType.  # noqa: E501


        :return: The response of this ScheduledRequestType.  # noqa: E501
        :rtype: ScheduledRequestTypeResponse
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this ScheduledRequestType.


        :param response: The response of this ScheduledRequestType.  # noqa: E501
        :type: ScheduledRequestTypeResponse
        """

        self._response = response

    @property
    def state(self):
        """Gets the state of this ScheduledRequestType.  # noqa: E501


        :return: The state of this ScheduledRequestType.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ScheduledRequestType.


        :param state: The state of this ScheduledRequestType.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def user(self):
        """Gets the user of this ScheduledRequestType.  # noqa: E501


        :return: The user of this ScheduledRequestType.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ScheduledRequestType.


        :param user: The user of this ScheduledRequestType.  # noqa: E501
        :type: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")  # noqa: E501

        self._user = user

    @property
    def date(self):
        """Gets the date of this ScheduledRequestType.  # noqa: E501


        :return: The date of this ScheduledRequestType.  # noqa: E501
        :rtype: datetime
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this ScheduledRequestType.


        :param date: The date of this ScheduledRequestType.  # noqa: E501
        :type: datetime
        """
        if date is None:
            raise ValueError("Invalid value for `date`, must not be `None`")  # noqa: E501

        self._date = date

    @property
    def id(self):
        """Gets the id of this ScheduledRequestType.  # noqa: E501


        :return: The id of this ScheduledRequestType.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScheduledRequestType.


        :param id: The id of this ScheduledRequestType.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduledRequestType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
