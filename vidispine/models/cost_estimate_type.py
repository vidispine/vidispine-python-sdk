# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class CostEstimateType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'url': 'str',
        'state': 'str',
        'id': 'str',
        'service': 'list[CostEstimateTypeService]'
    }

    attribute_map = {
        'url': 'url',
        'state': 'state',
        'id': 'id',
        'service': 'service'
    }

    def __init__(self, url=None, state=None, id=None, service=None):  # noqa: E501
        """CostEstimateType - a model defined in OpenAPI"""  # noqa: E501

        self._url = None
        self._state = None
        self._id = None
        self._service = None
        self.discriminator = None

        if url is not None:
            self.url = url
        if state is not None:
            self.state = state
        if id is not None:
            self.id = id
        if service is not None:
            self.service = service

    @property
    def url(self):
        """Gets the url of this CostEstimateType.  # noqa: E501


        :return: The url of this CostEstimateType.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CostEstimateType.


        :param url: The url of this CostEstimateType.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def state(self):
        """Gets the state of this CostEstimateType.  # noqa: E501


        :return: The state of this CostEstimateType.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CostEstimateType.


        :param state: The state of this CostEstimateType.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def id(self):
        """Gets the id of this CostEstimateType.  # noqa: E501


        :return: The id of this CostEstimateType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CostEstimateType.


        :param id: The id of this CostEstimateType.  # noqa: E501
        :type: str
        """
        if id is not None and not re.search(r'([_A-Za-z]+-)?([A-Za-z_][A-Za-z0-9_]*-|(([A-Za-z_][A-Za-z0-9_]*)?\*))([0-9]{1}[0-9]{0,31})', id):  # noqa: E501
            raise ValueError(r"Invalid value for `id`, must be a follow pattern or equal to `/([_A-Za-z]+-)?([A-Za-z_][A-Za-z0-9_]*-|(([A-Za-z_][A-Za-z0-9_]*)?\*))([0-9]{1}[0-9]{0,31})/`")  # noqa: E501

        self._id = id

    @property
    def service(self):
        """Gets the service of this CostEstimateType.  # noqa: E501


        :return: The service of this CostEstimateType.  # noqa: E501
        :rtype: list[CostEstimateTypeService]
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this CostEstimateType.


        :param service: The service of this CostEstimateType.  # noqa: E501
        :type: list[CostEstimateTypeService]
        """

        self._service = service

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CostEstimateType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
