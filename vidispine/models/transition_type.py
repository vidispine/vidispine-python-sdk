# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class TransitionType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'reverse': 'bool',
        'transition': 'str',
        'horiz_repeat': 'int',
        'vert_repeat': 'int',
        'duration': 'TimeCodeType',
        'end_percentage': 'int',
        'start_percentage': 'int',
        'border': 'BorderType',
        'wipe': 'int'
    }

    attribute_map = {
        'reverse': 'reverse',
        'transition': 'transition',
        'horiz_repeat': 'horizRepeat',
        'vert_repeat': 'vertRepeat',
        'duration': 'duration',
        'end_percentage': 'endPercentage',
        'start_percentage': 'startPercentage',
        'border': 'border',
        'wipe': 'wipe'
    }

    def __init__(self, reverse=None, transition=None, horiz_repeat=None, vert_repeat=None, duration=None, end_percentage=None, start_percentage=None, border=None, wipe=None):  # noqa: E501
        """TransitionType - a model defined in OpenAPI"""  # noqa: E501

        self._reverse = None
        self._transition = None
        self._horiz_repeat = None
        self._vert_repeat = None
        self._duration = None
        self._end_percentage = None
        self._start_percentage = None
        self._border = None
        self._wipe = None
        self.discriminator = None

        if reverse is not None:
            self.reverse = reverse
        if transition is not None:
            self.transition = transition
        if horiz_repeat is not None:
            self.horiz_repeat = horiz_repeat
        if vert_repeat is not None:
            self.vert_repeat = vert_repeat
        self.duration = duration
        if end_percentage is not None:
            self.end_percentage = end_percentage
        if start_percentage is not None:
            self.start_percentage = start_percentage
        if border is not None:
            self.border = border
        if wipe is not None:
            self.wipe = wipe

    @property
    def reverse(self):
        """Gets the reverse of this TransitionType.  # noqa: E501


        :return: The reverse of this TransitionType.  # noqa: E501
        :rtype: bool
        """
        return self._reverse

    @reverse.setter
    def reverse(self, reverse):
        """Sets the reverse of this TransitionType.


        :param reverse: The reverse of this TransitionType.  # noqa: E501
        :type: bool
        """

        self._reverse = reverse

    @property
    def transition(self):
        """Gets the transition of this TransitionType.  # noqa: E501


        :return: The transition of this TransitionType.  # noqa: E501
        :rtype: str
        """
        return self._transition

    @transition.setter
    def transition(self, transition):
        """Sets the transition of this TransitionType.


        :param transition: The transition of this TransitionType.  # noqa: E501
        :type: str
        """

        self._transition = transition

    @property
    def horiz_repeat(self):
        """Gets the horiz_repeat of this TransitionType.  # noqa: E501


        :return: The horiz_repeat of this TransitionType.  # noqa: E501
        :rtype: int
        """
        return self._horiz_repeat

    @horiz_repeat.setter
    def horiz_repeat(self, horiz_repeat):
        """Sets the horiz_repeat of this TransitionType.


        :param horiz_repeat: The horiz_repeat of this TransitionType.  # noqa: E501
        :type: int
        """

        self._horiz_repeat = horiz_repeat

    @property
    def vert_repeat(self):
        """Gets the vert_repeat of this TransitionType.  # noqa: E501


        :return: The vert_repeat of this TransitionType.  # noqa: E501
        :rtype: int
        """
        return self._vert_repeat

    @vert_repeat.setter
    def vert_repeat(self, vert_repeat):
        """Sets the vert_repeat of this TransitionType.


        :param vert_repeat: The vert_repeat of this TransitionType.  # noqa: E501
        :type: int
        """

        self._vert_repeat = vert_repeat

    @property
    def duration(self):
        """Gets the duration of this TransitionType.  # noqa: E501


        :return: The duration of this TransitionType.  # noqa: E501
        :rtype: TimeCodeType
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this TransitionType.


        :param duration: The duration of this TransitionType.  # noqa: E501
        :type: TimeCodeType
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501

        self._duration = duration

    @property
    def end_percentage(self):
        """Gets the end_percentage of this TransitionType.  # noqa: E501


        :return: The end_percentage of this TransitionType.  # noqa: E501
        :rtype: int
        """
        return self._end_percentage

    @end_percentage.setter
    def end_percentage(self, end_percentage):
        """Sets the end_percentage of this TransitionType.


        :param end_percentage: The end_percentage of this TransitionType.  # noqa: E501
        :type: int
        """

        self._end_percentage = end_percentage

    @property
    def start_percentage(self):
        """Gets the start_percentage of this TransitionType.  # noqa: E501


        :return: The start_percentage of this TransitionType.  # noqa: E501
        :rtype: int
        """
        return self._start_percentage

    @start_percentage.setter
    def start_percentage(self, start_percentage):
        """Sets the start_percentage of this TransitionType.


        :param start_percentage: The start_percentage of this TransitionType.  # noqa: E501
        :type: int
        """

        self._start_percentage = start_percentage

    @property
    def border(self):
        """Gets the border of this TransitionType.  # noqa: E501


        :return: The border of this TransitionType.  # noqa: E501
        :rtype: BorderType
        """
        return self._border

    @border.setter
    def border(self, border):
        """Sets the border of this TransitionType.


        :param border: The border of this TransitionType.  # noqa: E501
        :type: BorderType
        """

        self._border = border

    @property
    def wipe(self):
        """Gets the wipe of this TransitionType.  # noqa: E501


        :return: The wipe of this TransitionType.  # noqa: E501
        :rtype: int
        """
        return self._wipe

    @wipe.setter
    def wipe(self, wipe):
        """Sets the wipe of this TransitionType.


        :param wipe: The wipe of this TransitionType.  # noqa: E501
        :type: int
        """

        self._wipe = wipe

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransitionType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
