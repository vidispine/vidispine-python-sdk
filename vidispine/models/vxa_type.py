# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class VXAType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'status': 'str',
        's3_credential_type': 'str',
        'vs_instance': 'list[VXAVSInstanceType]',
        'vs_cluster_address': 'str',
        'name': 'str',
        'public_key': 'str',
        'last_seen': 'datetime',
        'transcoder_version': 'str',
        'transcoder': 'list[TranscoderType]',
        'storage': 'list[VXAStorageType]',
        'uri': 'str',
        'mode': 'str',
        'instance': 'str',
        'agent_group': 'str',
        'user': 'str',
        'file': 'list[str]',
        'all_storages': 'bool',
        'vxa_version': 'str',
        'port': 'int',
        'external_uri': 'str',
        'uuid': 'str'
    }

    attribute_map = {
        'status': 'status',
        's3_credential_type': 's3CredentialType',
        'vs_instance': 'vsInstance',
        'vs_cluster_address': 'vsClusterAddress',
        'name': 'name',
        'public_key': 'publicKey',
        'last_seen': 'lastSeen',
        'transcoder_version': 'transcoderVersion',
        'transcoder': 'transcoder',
        'storage': 'storage',
        'uri': 'uri',
        'mode': 'mode',
        'instance': 'instance',
        'agent_group': 'agentGroup',
        'user': 'user',
        'file': 'file',
        'all_storages': 'allStorages',
        'vxa_version': 'vxaVersion',
        'port': 'port',
        'external_uri': 'externalUri',
        'uuid': 'uuid'
    }

    def __init__(self, status=None, s3_credential_type=None, vs_instance=None, vs_cluster_address=None, name=None, public_key=None, last_seen=None, transcoder_version=None, transcoder=None, storage=None, uri=None, mode=None, instance=None, agent_group=None, user=None, file=None, all_storages=None, vxa_version=None, port=None, external_uri=None, uuid=None):  # noqa: E501
        """VXAType - a model defined in OpenAPI"""  # noqa: E501

        self._status = None
        self._s3_credential_type = None
        self._vs_instance = None
        self._vs_cluster_address = None
        self._name = None
        self._public_key = None
        self._last_seen = None
        self._transcoder_version = None
        self._transcoder = None
        self._storage = None
        self._uri = None
        self._mode = None
        self._instance = None
        self._agent_group = None
        self._user = None
        self._file = None
        self._all_storages = None
        self._vxa_version = None
        self._port = None
        self._external_uri = None
        self._uuid = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if s3_credential_type is not None:
            self.s3_credential_type = s3_credential_type
        if vs_instance is not None:
            self.vs_instance = vs_instance
        if vs_cluster_address is not None:
            self.vs_cluster_address = vs_cluster_address
        if name is not None:
            self.name = name
        if public_key is not None:
            self.public_key = public_key
        if last_seen is not None:
            self.last_seen = last_seen
        self.transcoder_version = transcoder_version
        if transcoder is not None:
            self.transcoder = transcoder
        if storage is not None:
            self.storage = storage
        if uri is not None:
            self.uri = uri
        if mode is not None:
            self.mode = mode
        if instance is not None:
            self.instance = instance
        if agent_group is not None:
            self.agent_group = agent_group
        if user is not None:
            self.user = user
        if file is not None:
            self.file = file
        if all_storages is not None:
            self.all_storages = all_storages
        self.vxa_version = vxa_version
        if port is not None:
            self.port = port
        if external_uri is not None:
            self.external_uri = external_uri
        self.uuid = uuid

    @property
    def status(self):
        """Gets the status of this VXAType.  # noqa: E501


        :return: The status of this VXAType.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VXAType.


        :param status: The status of this VXAType.  # noqa: E501
        :type: str
        """
        allowed_values = ["OFFLINE", "ONLINE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def s3_credential_type(self):
        """Gets the s3_credential_type of this VXAType.  # noqa: E501


        :return: The s3_credential_type of this VXAType.  # noqa: E501
        :rtype: str
        """
        return self._s3_credential_type

    @s3_credential_type.setter
    def s3_credential_type(self, s3_credential_type):
        """Sets the s3_credential_type of this VXAType.


        :param s3_credential_type: The s3_credential_type of this VXAType.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "temporary", "secretkey"]  # noqa: E501
        if s3_credential_type not in allowed_values:
            raise ValueError(
                "Invalid value for `s3_credential_type` ({0}), must be one of {1}"  # noqa: E501
                .format(s3_credential_type, allowed_values)
            )

        self._s3_credential_type = s3_credential_type

    @property
    def vs_instance(self):
        """Gets the vs_instance of this VXAType.  # noqa: E501


        :return: The vs_instance of this VXAType.  # noqa: E501
        :rtype: list[VXAVSInstanceType]
        """
        return self._vs_instance

    @vs_instance.setter
    def vs_instance(self, vs_instance):
        """Sets the vs_instance of this VXAType.


        :param vs_instance: The vs_instance of this VXAType.  # noqa: E501
        :type: list[VXAVSInstanceType]
        """

        self._vs_instance = vs_instance

    @property
    def vs_cluster_address(self):
        """Gets the vs_cluster_address of this VXAType.  # noqa: E501


        :return: The vs_cluster_address of this VXAType.  # noqa: E501
        :rtype: str
        """
        return self._vs_cluster_address

    @vs_cluster_address.setter
    def vs_cluster_address(self, vs_cluster_address):
        """Sets the vs_cluster_address of this VXAType.


        :param vs_cluster_address: The vs_cluster_address of this VXAType.  # noqa: E501
        :type: str
        """

        self._vs_cluster_address = vs_cluster_address

    @property
    def name(self):
        """Gets the name of this VXAType.  # noqa: E501


        :return: The name of this VXAType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VXAType.


        :param name: The name of this VXAType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def public_key(self):
        """Gets the public_key of this VXAType.  # noqa: E501


        :return: The public_key of this VXAType.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this VXAType.


        :param public_key: The public_key of this VXAType.  # noqa: E501
        :type: str
        """

        self._public_key = public_key

    @property
    def last_seen(self):
        """Gets the last_seen of this VXAType.  # noqa: E501


        :return: The last_seen of this VXAType.  # noqa: E501
        :rtype: datetime
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen):
        """Sets the last_seen of this VXAType.


        :param last_seen: The last_seen of this VXAType.  # noqa: E501
        :type: datetime
        """

        self._last_seen = last_seen

    @property
    def transcoder_version(self):
        """Gets the transcoder_version of this VXAType.  # noqa: E501


        :return: The transcoder_version of this VXAType.  # noqa: E501
        :rtype: str
        """
        return self._transcoder_version

    @transcoder_version.setter
    def transcoder_version(self, transcoder_version):
        """Sets the transcoder_version of this VXAType.


        :param transcoder_version: The transcoder_version of this VXAType.  # noqa: E501
        :type: str
        """
        if transcoder_version is None:
            raise ValueError("Invalid value for `transcoder_version`, must not be `None`")  # noqa: E501

        self._transcoder_version = transcoder_version

    @property
    def transcoder(self):
        """Gets the transcoder of this VXAType.  # noqa: E501


        :return: The transcoder of this VXAType.  # noqa: E501
        :rtype: list[TranscoderType]
        """
        return self._transcoder

    @transcoder.setter
    def transcoder(self, transcoder):
        """Sets the transcoder of this VXAType.


        :param transcoder: The transcoder of this VXAType.  # noqa: E501
        :type: list[TranscoderType]
        """

        self._transcoder = transcoder

    @property
    def storage(self):
        """Gets the storage of this VXAType.  # noqa: E501


        :return: The storage of this VXAType.  # noqa: E501
        :rtype: list[VXAStorageType]
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this VXAType.


        :param storage: The storage of this VXAType.  # noqa: E501
        :type: list[VXAStorageType]
        """

        self._storage = storage

    @property
    def uri(self):
        """Gets the uri of this VXAType.  # noqa: E501


        :return: The uri of this VXAType.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this VXAType.


        :param uri: The uri of this VXAType.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def mode(self):
        """Gets the mode of this VXAType.  # noqa: E501


        :return: The mode of this VXAType.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this VXAType.


        :param mode: The mode of this VXAType.  # noqa: E501
        :type: str
        """

        self._mode = mode

    @property
    def instance(self):
        """Gets the instance of this VXAType.  # noqa: E501


        :return: The instance of this VXAType.  # noqa: E501
        :rtype: str
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this VXAType.


        :param instance: The instance of this VXAType.  # noqa: E501
        :type: str
        """

        self._instance = instance

    @property
    def agent_group(self):
        """Gets the agent_group of this VXAType.  # noqa: E501


        :return: The agent_group of this VXAType.  # noqa: E501
        :rtype: str
        """
        return self._agent_group

    @agent_group.setter
    def agent_group(self, agent_group):
        """Sets the agent_group of this VXAType.


        :param agent_group: The agent_group of this VXAType.  # noqa: E501
        :type: str
        """

        self._agent_group = agent_group

    @property
    def user(self):
        """Gets the user of this VXAType.  # noqa: E501


        :return: The user of this VXAType.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this VXAType.


        :param user: The user of this VXAType.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def file(self):
        """Gets the file of this VXAType.  # noqa: E501


        :return: The file of this VXAType.  # noqa: E501
        :rtype: list[str]
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this VXAType.


        :param file: The file of this VXAType.  # noqa: E501
        :type: list[str]
        """

        self._file = file

    @property
    def all_storages(self):
        """Gets the all_storages of this VXAType.  # noqa: E501


        :return: The all_storages of this VXAType.  # noqa: E501
        :rtype: bool
        """
        return self._all_storages

    @all_storages.setter
    def all_storages(self, all_storages):
        """Sets the all_storages of this VXAType.


        :param all_storages: The all_storages of this VXAType.  # noqa: E501
        :type: bool
        """

        self._all_storages = all_storages

    @property
    def vxa_version(self):
        """Gets the vxa_version of this VXAType.  # noqa: E501


        :return: The vxa_version of this VXAType.  # noqa: E501
        :rtype: str
        """
        return self._vxa_version

    @vxa_version.setter
    def vxa_version(self, vxa_version):
        """Sets the vxa_version of this VXAType.


        :param vxa_version: The vxa_version of this VXAType.  # noqa: E501
        :type: str
        """
        if vxa_version is None:
            raise ValueError("Invalid value for `vxa_version`, must not be `None`")  # noqa: E501

        self._vxa_version = vxa_version

    @property
    def port(self):
        """Gets the port of this VXAType.  # noqa: E501


        :return: The port of this VXAType.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this VXAType.


        :param port: The port of this VXAType.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def external_uri(self):
        """Gets the external_uri of this VXAType.  # noqa: E501


        :return: The external_uri of this VXAType.  # noqa: E501
        :rtype: str
        """
        return self._external_uri

    @external_uri.setter
    def external_uri(self, external_uri):
        """Sets the external_uri of this VXAType.


        :param external_uri: The external_uri of this VXAType.  # noqa: E501
        :type: str
        """

        self._external_uri = external_uri

    @property
    def uuid(self):
        """Gets the uuid of this VXAType.  # noqa: E501


        :return: The uuid of this VXAType.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this VXAType.


        :param uuid: The uuid of this VXAType.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VXAType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
