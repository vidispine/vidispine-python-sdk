# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class MetadataFieldValueType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'referenced': 'MetadataReferencedType',
        'name': 'str',
        'reference': 'str',
        'inheritance': 'str',
        'track': 'str',
        'data': 'list[KeyValuePairType]',
        'value': 'list[MetadataValueType]',
        'type': 'MetadataFieldType',
        'id': 'list[str]'
    }

    attribute_map = {
        'referenced': 'referenced',
        'name': 'name',
        'reference': 'reference',
        'inheritance': 'inheritance',
        'track': 'track',
        'data': 'data',
        'value': 'value',
        'type': 'type',
        'id': 'id'
    }

    def __init__(self, referenced=None, name=None, reference=None, inheritance=None, track=None, data=None, value=None, type=None, id=None):  # noqa: E501
        """MetadataFieldValueType - a model defined in OpenAPI"""  # noqa: E501

        self._referenced = None
        self._name = None
        self._reference = None
        self._inheritance = None
        self._track = None
        self._data = None
        self._value = None
        self._type = None
        self._id = None
        self.discriminator = None

        if referenced is not None:
            self.referenced = referenced
        if name is not None:
            self.name = name
        if reference is not None:
            self.reference = reference
        if inheritance is not None:
            self.inheritance = inheritance
        if track is not None:
            self.track = track
        if data is not None:
            self.data = data
        if value is not None:
            self.value = value
        if type is not None:
            self.type = type
        if id is not None:
            self.id = id

    @property
    def referenced(self):
        """Gets the referenced of this MetadataFieldValueType.  # noqa: E501


        :return: The referenced of this MetadataFieldValueType.  # noqa: E501
        :rtype: MetadataReferencedType
        """
        return self._referenced

    @referenced.setter
    def referenced(self, referenced):
        """Sets the referenced of this MetadataFieldValueType.


        :param referenced: The referenced of this MetadataFieldValueType.  # noqa: E501
        :type: MetadataReferencedType
        """

        self._referenced = referenced

    @property
    def name(self):
        """Gets the name of this MetadataFieldValueType.  # noqa: E501


        :return: The name of this MetadataFieldValueType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MetadataFieldValueType.


        :param name: The name of this MetadataFieldValueType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def reference(self):
        """Gets the reference of this MetadataFieldValueType.  # noqa: E501


        :return: The reference of this MetadataFieldValueType.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this MetadataFieldValueType.


        :param reference: The reference of this MetadataFieldValueType.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def inheritance(self):
        """Gets the inheritance of this MetadataFieldValueType.  # noqa: E501


        :return: The inheritance of this MetadataFieldValueType.  # noqa: E501
        :rtype: str
        """
        return self._inheritance

    @inheritance.setter
    def inheritance(self, inheritance):
        """Sets the inheritance of this MetadataFieldValueType.


        :param inheritance: The inheritance of this MetadataFieldValueType.  # noqa: E501
        :type: str
        """

        self._inheritance = inheritance

    @property
    def track(self):
        """Gets the track of this MetadataFieldValueType.  # noqa: E501


        :return: The track of this MetadataFieldValueType.  # noqa: E501
        :rtype: str
        """
        return self._track

    @track.setter
    def track(self, track):
        """Sets the track of this MetadataFieldValueType.


        :param track: The track of this MetadataFieldValueType.  # noqa: E501
        :type: str
        """

        self._track = track

    @property
    def data(self):
        """Gets the data of this MetadataFieldValueType.  # noqa: E501


        :return: The data of this MetadataFieldValueType.  # noqa: E501
        :rtype: list[KeyValuePairType]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this MetadataFieldValueType.


        :param data: The data of this MetadataFieldValueType.  # noqa: E501
        :type: list[KeyValuePairType]
        """

        self._data = data

    @property
    def value(self):
        """Gets the value of this MetadataFieldValueType.  # noqa: E501


        :return: The value of this MetadataFieldValueType.  # noqa: E501
        :rtype: list[MetadataValueType]
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this MetadataFieldValueType.


        :param value: The value of this MetadataFieldValueType.  # noqa: E501
        :type: list[MetadataValueType]
        """

        self._value = value

    @property
    def type(self):
        """Gets the type of this MetadataFieldValueType.  # noqa: E501


        :return: The type of this MetadataFieldValueType.  # noqa: E501
        :rtype: MetadataFieldType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MetadataFieldValueType.


        :param type: The type of this MetadataFieldValueType.  # noqa: E501
        :type: MetadataFieldType
        """

        self._type = type

    @property
    def id(self):
        """Gets the id of this MetadataFieldValueType.  # noqa: E501


        :return: The id of this MetadataFieldValueType.  # noqa: E501
        :rtype: list[str]
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MetadataFieldValueType.


        :param id: The id of this MetadataFieldValueType.  # noqa: E501
        :type: list[str]
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataFieldValueType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
