# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class ConformType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'text_overlay': 'list[TextOverlayType]',
        'timeline': 'ConformTimelineType',
        'time_base': 'TimeBaseType',
        'overlay': 'list[ConformOverlayType]'
    }

    attribute_map = {
        'text_overlay': 'textOverlay',
        'timeline': 'timeline',
        'time_base': 'timeBase',
        'overlay': 'overlay'
    }

    def __init__(self, text_overlay=None, timeline=None, time_base=None, overlay=None):  # noqa: E501
        """ConformType - a model defined in OpenAPI"""  # noqa: E501

        self._text_overlay = None
        self._timeline = None
        self._time_base = None
        self._overlay = None
        self.discriminator = None

        if text_overlay is not None:
            self.text_overlay = text_overlay
        self.timeline = timeline
        if time_base is not None:
            self.time_base = time_base
        if overlay is not None:
            self.overlay = overlay

    @property
    def text_overlay(self):
        """Gets the text_overlay of this ConformType.  # noqa: E501


        :return: The text_overlay of this ConformType.  # noqa: E501
        :rtype: list[TextOverlayType]
        """
        return self._text_overlay

    @text_overlay.setter
    def text_overlay(self, text_overlay):
        """Sets the text_overlay of this ConformType.


        :param text_overlay: The text_overlay of this ConformType.  # noqa: E501
        :type: list[TextOverlayType]
        """

        self._text_overlay = text_overlay

    @property
    def timeline(self):
        """Gets the timeline of this ConformType.  # noqa: E501


        :return: The timeline of this ConformType.  # noqa: E501
        :rtype: ConformTimelineType
        """
        return self._timeline

    @timeline.setter
    def timeline(self, timeline):
        """Sets the timeline of this ConformType.


        :param timeline: The timeline of this ConformType.  # noqa: E501
        :type: ConformTimelineType
        """
        if timeline is None:
            raise ValueError("Invalid value for `timeline`, must not be `None`")  # noqa: E501

        self._timeline = timeline

    @property
    def time_base(self):
        """Gets the time_base of this ConformType.  # noqa: E501


        :return: The time_base of this ConformType.  # noqa: E501
        :rtype: TimeBaseType
        """
        return self._time_base

    @time_base.setter
    def time_base(self, time_base):
        """Sets the time_base of this ConformType.


        :param time_base: The time_base of this ConformType.  # noqa: E501
        :type: TimeBaseType
        """

        self._time_base = time_base

    @property
    def overlay(self):
        """Gets the overlay of this ConformType.  # noqa: E501


        :return: The overlay of this ConformType.  # noqa: E501
        :rtype: list[ConformOverlayType]
        """
        return self._overlay

    @overlay.setter
    def overlay(self, overlay):
        """Sets the overlay of this ConformType.


        :param overlay: The overlay of this ConformType.  # noqa: E501
        :type: list[ConformOverlayType]
        """

        self._overlay = overlay

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConformType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
