# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class TaskGroupType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'loc': 'str',
        'name': 'str',
        'transcoder': 'list[TaskGroupTypeTranscoder]',
        'priority': 'str',
        'job': 'list[TaskGroupTypeJob]',
        'metadata': 'SimpleMetadataType'
    }

    attribute_map = {
        'loc': 'loc',
        'name': 'name',
        'transcoder': 'transcoder',
        'priority': 'priority',
        'job': 'job',
        'metadata': 'metadata'
    }

    def __init__(self, loc=None, name=None, transcoder=None, priority=None, job=None, metadata=None):  # noqa: E501
        """TaskGroupType - a model defined in OpenAPI"""  # noqa: E501

        self._loc = None
        self._name = None
        self._transcoder = None
        self._priority = None
        self._job = None
        self._metadata = None
        self.discriminator = None

        if loc is not None:
            self.loc = loc
        self.name = name
        if transcoder is not None:
            self.transcoder = transcoder
        if priority is not None:
            self.priority = priority
        if job is not None:
            self.job = job
        if metadata is not None:
            self.metadata = metadata

    @property
    def loc(self):
        """Gets the loc of this TaskGroupType.  # noqa: E501


        :return: The loc of this TaskGroupType.  # noqa: E501
        :rtype: str
        """
        return self._loc

    @loc.setter
    def loc(self, loc):
        """Sets the loc of this TaskGroupType.


        :param loc: The loc of this TaskGroupType.  # noqa: E501
        :type: str
        """

        self._loc = loc

    @property
    def name(self):
        """Gets the name of this TaskGroupType.  # noqa: E501


        :return: The name of this TaskGroupType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaskGroupType.


        :param name: The name of this TaskGroupType.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def transcoder(self):
        """Gets the transcoder of this TaskGroupType.  # noqa: E501


        :return: The transcoder of this TaskGroupType.  # noqa: E501
        :rtype: list[TaskGroupTypeTranscoder]
        """
        return self._transcoder

    @transcoder.setter
    def transcoder(self, transcoder):
        """Sets the transcoder of this TaskGroupType.


        :param transcoder: The transcoder of this TaskGroupType.  # noqa: E501
        :type: list[TaskGroupTypeTranscoder]
        """

        self._transcoder = transcoder

    @property
    def priority(self):
        """Gets the priority of this TaskGroupType.  # noqa: E501


        :return: The priority of this TaskGroupType.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this TaskGroupType.


        :param priority: The priority of this TaskGroupType.  # noqa: E501
        :type: str
        """

        self._priority = priority

    @property
    def job(self):
        """Gets the job of this TaskGroupType.  # noqa: E501


        :return: The job of this TaskGroupType.  # noqa: E501
        :rtype: list[TaskGroupTypeJob]
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this TaskGroupType.


        :param job: The job of this TaskGroupType.  # noqa: E501
        :type: list[TaskGroupTypeJob]
        """

        self._job = job

    @property
    def metadata(self):
        """Gets the metadata of this TaskGroupType.  # noqa: E501


        :return: The metadata of this TaskGroupType.  # noqa: E501
        :rtype: SimpleMetadataType
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this TaskGroupType.


        :param metadata: The metadata of this TaskGroupType.  # noqa: E501
        :type: SimpleMetadataType
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskGroupType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
