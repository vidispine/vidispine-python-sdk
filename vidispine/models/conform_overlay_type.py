# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class ConformOverlayType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'y': 'int',
        'x': 'int',
        'interval': 'TimeIntervalType',
        'id': 'str'
    }

    attribute_map = {
        'y': 'y',
        'x': 'x',
        'interval': 'interval',
        'id': 'id'
    }

    def __init__(self, y=None, x=None, interval=None, id=None):  # noqa: E501
        """ConformOverlayType - a model defined in OpenAPI"""  # noqa: E501

        self._y = None
        self._x = None
        self._interval = None
        self._id = None
        self.discriminator = None

        self.y = y
        self.x = x
        if interval is not None:
            self.interval = interval
        self.id = id

    @property
    def y(self):
        """Gets the y of this ConformOverlayType.  # noqa: E501


        :return: The y of this ConformOverlayType.  # noqa: E501
        :rtype: int
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this ConformOverlayType.


        :param y: The y of this ConformOverlayType.  # noqa: E501
        :type: int
        """
        if y is None:
            raise ValueError("Invalid value for `y`, must not be `None`")  # noqa: E501

        self._y = y

    @property
    def x(self):
        """Gets the x of this ConformOverlayType.  # noqa: E501


        :return: The x of this ConformOverlayType.  # noqa: E501
        :rtype: int
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this ConformOverlayType.


        :param x: The x of this ConformOverlayType.  # noqa: E501
        :type: int
        """
        if x is None:
            raise ValueError("Invalid value for `x`, must not be `None`")  # noqa: E501

        self._x = x

    @property
    def interval(self):
        """Gets the interval of this ConformOverlayType.  # noqa: E501


        :return: The interval of this ConformOverlayType.  # noqa: E501
        :rtype: TimeIntervalType
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this ConformOverlayType.


        :param interval: The interval of this ConformOverlayType.  # noqa: E501
        :type: TimeIntervalType
        """

        self._interval = interval

    @property
    def id(self):
        """Gets the id of this ConformOverlayType.  # noqa: E501


        :return: The id of this ConformOverlayType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConformOverlayType.


        :param id: The id of this ConformOverlayType.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if id is not None and not re.search(r'([_A-Za-z]+-)?([A-Za-z_][A-Za-z0-9_]*-|(([A-Za-z_][A-Za-z0-9_]*)?\*))([0-9]{1}[0-9]{0,31})', id):  # noqa: E501
            raise ValueError(r"Invalid value for `id`, must be a follow pattern or equal to `/([_A-Za-z]+-)?([A-Za-z_][A-Za-z0-9_]*-|(([A-Za-z_][A-Za-z0-9_]*)?\*))([0-9]{1}[0-9]{0,31})/`")  # noqa: E501

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConformOverlayType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
