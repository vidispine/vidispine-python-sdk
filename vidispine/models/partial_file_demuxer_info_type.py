# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class PartialFileDemuxerInfoType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'descriptor': 'PartialFileDescriptorType',
        'descriptor_location': 'str',
        'byte_offset': 'int',
        'adjust_for_pts_predecessors': 'bool'
    }

    attribute_map = {
        'descriptor': 'descriptor',
        'descriptor_location': 'descriptorLocation',
        'byte_offset': 'byteOffset',
        'adjust_for_pts_predecessors': 'adjustForPTSPredecessors'
    }

    def __init__(self, descriptor=None, descriptor_location=None, byte_offset=None, adjust_for_pts_predecessors=None):  # noqa: E501
        """PartialFileDemuxerInfoType - a model defined in OpenAPI"""  # noqa: E501

        self._descriptor = None
        self._descriptor_location = None
        self._byte_offset = None
        self._adjust_for_pts_predecessors = None
        self.discriminator = None

        if descriptor is not None:
            self.descriptor = descriptor
        if descriptor_location is not None:
            self.descriptor_location = descriptor_location
        if byte_offset is not None:
            self.byte_offset = byte_offset
        if adjust_for_pts_predecessors is not None:
            self.adjust_for_pts_predecessors = adjust_for_pts_predecessors

    @property
    def descriptor(self):
        """Gets the descriptor of this PartialFileDemuxerInfoType.  # noqa: E501


        :return: The descriptor of this PartialFileDemuxerInfoType.  # noqa: E501
        :rtype: PartialFileDescriptorType
        """
        return self._descriptor

    @descriptor.setter
    def descriptor(self, descriptor):
        """Sets the descriptor of this PartialFileDemuxerInfoType.


        :param descriptor: The descriptor of this PartialFileDemuxerInfoType.  # noqa: E501
        :type: PartialFileDescriptorType
        """

        self._descriptor = descriptor

    @property
    def descriptor_location(self):
        """Gets the descriptor_location of this PartialFileDemuxerInfoType.  # noqa: E501


        :return: The descriptor_location of this PartialFileDemuxerInfoType.  # noqa: E501
        :rtype: str
        """
        return self._descriptor_location

    @descriptor_location.setter
    def descriptor_location(self, descriptor_location):
        """Sets the descriptor_location of this PartialFileDemuxerInfoType.


        :param descriptor_location: The descriptor_location of this PartialFileDemuxerInfoType.  # noqa: E501
        :type: str
        """

        self._descriptor_location = descriptor_location

    @property
    def byte_offset(self):
        """Gets the byte_offset of this PartialFileDemuxerInfoType.  # noqa: E501


        :return: The byte_offset of this PartialFileDemuxerInfoType.  # noqa: E501
        :rtype: int
        """
        return self._byte_offset

    @byte_offset.setter
    def byte_offset(self, byte_offset):
        """Sets the byte_offset of this PartialFileDemuxerInfoType.


        :param byte_offset: The byte_offset of this PartialFileDemuxerInfoType.  # noqa: E501
        :type: int
        """

        self._byte_offset = byte_offset

    @property
    def adjust_for_pts_predecessors(self):
        """Gets the adjust_for_pts_predecessors of this PartialFileDemuxerInfoType.  # noqa: E501


        :return: The adjust_for_pts_predecessors of this PartialFileDemuxerInfoType.  # noqa: E501
        :rtype: bool
        """
        return self._adjust_for_pts_predecessors

    @adjust_for_pts_predecessors.setter
    def adjust_for_pts_predecessors(self, adjust_for_pts_predecessors):
        """Sets the adjust_for_pts_predecessors of this PartialFileDemuxerInfoType.


        :param adjust_for_pts_predecessors: The adjust_for_pts_predecessors of this PartialFileDemuxerInfoType.  # noqa: E501
        :type: bool
        """

        self._adjust_for_pts_predecessors = adjust_for_pts_predecessors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartialFileDemuxerInfoType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
