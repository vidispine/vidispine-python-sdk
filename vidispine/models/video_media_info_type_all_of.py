# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class VideoMediaInfoTypeAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'format_settings_gop': 'str',
        'intra_dc_precision': 'int'
    }

    attribute_map = {
        'format_settings_gop': 'Format_Settings_GOP',
        'intra_dc_precision': 'intra_dc_precision'
    }

    def __init__(self, format_settings_gop=None, intra_dc_precision=None):  # noqa: E501
        """VideoMediaInfoTypeAllOf - a model defined in OpenAPI"""  # noqa: E501

        self._format_settings_gop = None
        self._intra_dc_precision = None
        self.discriminator = None

        if format_settings_gop is not None:
            self.format_settings_gop = format_settings_gop
        if intra_dc_precision is not None:
            self.intra_dc_precision = intra_dc_precision

    @property
    def format_settings_gop(self):
        """Gets the format_settings_gop of this VideoMediaInfoTypeAllOf.  # noqa: E501


        :return: The format_settings_gop of this VideoMediaInfoTypeAllOf.  # noqa: E501
        :rtype: str
        """
        return self._format_settings_gop

    @format_settings_gop.setter
    def format_settings_gop(self, format_settings_gop):
        """Sets the format_settings_gop of this VideoMediaInfoTypeAllOf.


        :param format_settings_gop: The format_settings_gop of this VideoMediaInfoTypeAllOf.  # noqa: E501
        :type: str
        """

        self._format_settings_gop = format_settings_gop

    @property
    def intra_dc_precision(self):
        """Gets the intra_dc_precision of this VideoMediaInfoTypeAllOf.  # noqa: E501


        :return: The intra_dc_precision of this VideoMediaInfoTypeAllOf.  # noqa: E501
        :rtype: int
        """
        return self._intra_dc_precision

    @intra_dc_precision.setter
    def intra_dc_precision(self, intra_dc_precision):
        """Sets the intra_dc_precision of this VideoMediaInfoTypeAllOf.


        :param intra_dc_precision: The intra_dc_precision of this VideoMediaInfoTypeAllOf.  # noqa: E501
        :type: int
        """

        self._intra_dc_precision = intra_dc_precision

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VideoMediaInfoTypeAllOf):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
