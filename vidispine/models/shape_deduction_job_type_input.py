# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class ShapeDeductionJobTypeInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'verbose': 'bool',
        'pageno': 'int',
        'image': 'bool',
        'use_media_info': 'bool',
        'uri': 'str',
        'range': 'list[SequenceRangeType]',
        'setting': 'list[KeyValuePairType]',
        'id': 'str'
    }

    attribute_map = {
        'verbose': 'verbose',
        'pageno': 'pageno',
        'image': 'image',
        'use_media_info': 'useMediaInfo',
        'uri': 'uri',
        'range': 'range',
        'setting': 'setting',
        'id': 'id'
    }

    def __init__(self, verbose=None, pageno=None, image=None, use_media_info=None, uri=None, range=None, setting=None, id=None):  # noqa: E501
        """ShapeDeductionJobTypeInput - a model defined in OpenAPI"""  # noqa: E501

        self._verbose = None
        self._pageno = None
        self._image = None
        self._use_media_info = None
        self._uri = None
        self._range = None
        self._setting = None
        self._id = None
        self.discriminator = None

        if verbose is not None:
            self.verbose = verbose
        if pageno is not None:
            self.pageno = pageno
        if image is not None:
            self.image = image
        if use_media_info is not None:
            self.use_media_info = use_media_info
        if uri is not None:
            self.uri = uri
        if range is not None:
            self.range = range
        if setting is not None:
            self.setting = setting
        if id is not None:
            self.id = id

    @property
    def verbose(self):
        """Gets the verbose of this ShapeDeductionJobTypeInput.  # noqa: E501


        :return: The verbose of this ShapeDeductionJobTypeInput.  # noqa: E501
        :rtype: bool
        """
        return self._verbose

    @verbose.setter
    def verbose(self, verbose):
        """Sets the verbose of this ShapeDeductionJobTypeInput.


        :param verbose: The verbose of this ShapeDeductionJobTypeInput.  # noqa: E501
        :type: bool
        """

        self._verbose = verbose

    @property
    def pageno(self):
        """Gets the pageno of this ShapeDeductionJobTypeInput.  # noqa: E501


        :return: The pageno of this ShapeDeductionJobTypeInput.  # noqa: E501
        :rtype: int
        """
        return self._pageno

    @pageno.setter
    def pageno(self, pageno):
        """Sets the pageno of this ShapeDeductionJobTypeInput.


        :param pageno: The pageno of this ShapeDeductionJobTypeInput.  # noqa: E501
        :type: int
        """

        self._pageno = pageno

    @property
    def image(self):
        """Gets the image of this ShapeDeductionJobTypeInput.  # noqa: E501


        :return: The image of this ShapeDeductionJobTypeInput.  # noqa: E501
        :rtype: bool
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ShapeDeductionJobTypeInput.


        :param image: The image of this ShapeDeductionJobTypeInput.  # noqa: E501
        :type: bool
        """

        self._image = image

    @property
    def use_media_info(self):
        """Gets the use_media_info of this ShapeDeductionJobTypeInput.  # noqa: E501


        :return: The use_media_info of this ShapeDeductionJobTypeInput.  # noqa: E501
        :rtype: bool
        """
        return self._use_media_info

    @use_media_info.setter
    def use_media_info(self, use_media_info):
        """Sets the use_media_info of this ShapeDeductionJobTypeInput.


        :param use_media_info: The use_media_info of this ShapeDeductionJobTypeInput.  # noqa: E501
        :type: bool
        """

        self._use_media_info = use_media_info

    @property
    def uri(self):
        """Gets the uri of this ShapeDeductionJobTypeInput.  # noqa: E501


        :return: The uri of this ShapeDeductionJobTypeInput.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ShapeDeductionJobTypeInput.


        :param uri: The uri of this ShapeDeductionJobTypeInput.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def range(self):
        """Gets the range of this ShapeDeductionJobTypeInput.  # noqa: E501


        :return: The range of this ShapeDeductionJobTypeInput.  # noqa: E501
        :rtype: list[SequenceRangeType]
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this ShapeDeductionJobTypeInput.


        :param range: The range of this ShapeDeductionJobTypeInput.  # noqa: E501
        :type: list[SequenceRangeType]
        """

        self._range = range

    @property
    def setting(self):
        """Gets the setting of this ShapeDeductionJobTypeInput.  # noqa: E501


        :return: The setting of this ShapeDeductionJobTypeInput.  # noqa: E501
        :rtype: list[KeyValuePairType]
        """
        return self._setting

    @setting.setter
    def setting(self, setting):
        """Sets the setting of this ShapeDeductionJobTypeInput.


        :param setting: The setting of this ShapeDeductionJobTypeInput.  # noqa: E501
        :type: list[KeyValuePairType]
        """

        self._setting = setting

    @property
    def id(self):
        """Gets the id of this ShapeDeductionJobTypeInput.  # noqa: E501


        :return: The id of this ShapeDeductionJobTypeInput.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ShapeDeductionJobTypeInput.


        :param id: The id of this ShapeDeductionJobTypeInput.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShapeDeductionJobTypeInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
