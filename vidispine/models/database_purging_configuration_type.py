# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class DatabasePurgingConfigurationType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'job': 'DatabasePurgingConfigurationTypeJob',
        'transfer_log': 'DatabasePurgingConfigurationTypeTransferLog',
        'audit_trail': 'DatabasePurgingConfigurationTypeAuditTrail',
        'change_log': 'DatabasePurgingConfigurationTypeChangeLog'
    }

    attribute_map = {
        'job': 'job',
        'transfer_log': 'transferLog',
        'audit_trail': 'auditTrail',
        'change_log': 'changeLog'
    }

    def __init__(self, job=None, transfer_log=None, audit_trail=None, change_log=None):  # noqa: E501
        """DatabasePurgingConfigurationType - a model defined in OpenAPI"""  # noqa: E501

        self._job = None
        self._transfer_log = None
        self._audit_trail = None
        self._change_log = None
        self.discriminator = None

        if job is not None:
            self.job = job
        if transfer_log is not None:
            self.transfer_log = transfer_log
        if audit_trail is not None:
            self.audit_trail = audit_trail
        if change_log is not None:
            self.change_log = change_log

    @property
    def job(self):
        """Gets the job of this DatabasePurgingConfigurationType.  # noqa: E501


        :return: The job of this DatabasePurgingConfigurationType.  # noqa: E501
        :rtype: DatabasePurgingConfigurationTypeJob
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this DatabasePurgingConfigurationType.


        :param job: The job of this DatabasePurgingConfigurationType.  # noqa: E501
        :type: DatabasePurgingConfigurationTypeJob
        """

        self._job = job

    @property
    def transfer_log(self):
        """Gets the transfer_log of this DatabasePurgingConfigurationType.  # noqa: E501


        :return: The transfer_log of this DatabasePurgingConfigurationType.  # noqa: E501
        :rtype: DatabasePurgingConfigurationTypeTransferLog
        """
        return self._transfer_log

    @transfer_log.setter
    def transfer_log(self, transfer_log):
        """Sets the transfer_log of this DatabasePurgingConfigurationType.


        :param transfer_log: The transfer_log of this DatabasePurgingConfigurationType.  # noqa: E501
        :type: DatabasePurgingConfigurationTypeTransferLog
        """

        self._transfer_log = transfer_log

    @property
    def audit_trail(self):
        """Gets the audit_trail of this DatabasePurgingConfigurationType.  # noqa: E501


        :return: The audit_trail of this DatabasePurgingConfigurationType.  # noqa: E501
        :rtype: DatabasePurgingConfigurationTypeAuditTrail
        """
        return self._audit_trail

    @audit_trail.setter
    def audit_trail(self, audit_trail):
        """Sets the audit_trail of this DatabasePurgingConfigurationType.


        :param audit_trail: The audit_trail of this DatabasePurgingConfigurationType.  # noqa: E501
        :type: DatabasePurgingConfigurationTypeAuditTrail
        """

        self._audit_trail = audit_trail

    @property
    def change_log(self):
        """Gets the change_log of this DatabasePurgingConfigurationType.  # noqa: E501


        :return: The change_log of this DatabasePurgingConfigurationType.  # noqa: E501
        :rtype: DatabasePurgingConfigurationTypeChangeLog
        """
        return self._change_log

    @change_log.setter
    def change_log(self, change_log):
        """Sets the change_log of this DatabasePurgingConfigurationType.


        :param change_log: The change_log of this DatabasePurgingConfigurationType.  # noqa: E501
        :type: DatabasePurgingConfigurationTypeChangeLog
        """

        self._change_log = change_log

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatabasePurgingConfigurationType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
