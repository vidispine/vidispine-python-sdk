# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class PackageTrackType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'is_picture': 'bool',
        'frame_rate': 'FrameRateType',
        'number': 'int',
        'length': 'int',
        'is50_fps': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'is_picture': 'isPicture',
        'frame_rate': 'frameRate',
        'number': 'number',
        'length': 'length',
        'is50_fps': 'is50FPS'
    }

    def __init__(self, name=None, is_picture=None, frame_rate=None, number=None, length=None, is50_fps=None):  # noqa: E501
        """PackageTrackType - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._is_picture = None
        self._frame_rate = None
        self._number = None
        self._length = None
        self._is50_fps = None
        self.discriminator = None

        self.name = name
        self.is_picture = is_picture
        if frame_rate is not None:
            self.frame_rate = frame_rate
        self.number = number
        self.length = length
        if is50_fps is not None:
            self.is50_fps = is50_fps

    @property
    def name(self):
        """Gets the name of this PackageTrackType.  # noqa: E501


        :return: The name of this PackageTrackType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PackageTrackType.


        :param name: The name of this PackageTrackType.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def is_picture(self):
        """Gets the is_picture of this PackageTrackType.  # noqa: E501


        :return: The is_picture of this PackageTrackType.  # noqa: E501
        :rtype: bool
        """
        return self._is_picture

    @is_picture.setter
    def is_picture(self, is_picture):
        """Sets the is_picture of this PackageTrackType.


        :param is_picture: The is_picture of this PackageTrackType.  # noqa: E501
        :type: bool
        """
        if is_picture is None:
            raise ValueError("Invalid value for `is_picture`, must not be `None`")  # noqa: E501

        self._is_picture = is_picture

    @property
    def frame_rate(self):
        """Gets the frame_rate of this PackageTrackType.  # noqa: E501


        :return: The frame_rate of this PackageTrackType.  # noqa: E501
        :rtype: FrameRateType
        """
        return self._frame_rate

    @frame_rate.setter
    def frame_rate(self, frame_rate):
        """Sets the frame_rate of this PackageTrackType.


        :param frame_rate: The frame_rate of this PackageTrackType.  # noqa: E501
        :type: FrameRateType
        """

        self._frame_rate = frame_rate

    @property
    def number(self):
        """Gets the number of this PackageTrackType.  # noqa: E501


        :return: The number of this PackageTrackType.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this PackageTrackType.


        :param number: The number of this PackageTrackType.  # noqa: E501
        :type: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501

        self._number = number

    @property
    def length(self):
        """Gets the length of this PackageTrackType.  # noqa: E501


        :return: The length of this PackageTrackType.  # noqa: E501
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this PackageTrackType.


        :param length: The length of this PackageTrackType.  # noqa: E501
        :type: int
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")  # noqa: E501

        self._length = length

    @property
    def is50_fps(self):
        """Gets the is50_fps of this PackageTrackType.  # noqa: E501


        :return: The is50_fps of this PackageTrackType.  # noqa: E501
        :rtype: bool
        """
        return self._is50_fps

    @is50_fps.setter
    def is50_fps(self, is50_fps):
        """Sets the is50_fps of this PackageTrackType.


        :param is50_fps: The is50_fps of this PackageTrackType.  # noqa: E501
        :type: bool
        """

        self._is50_fps = is50_fps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackageTrackType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
