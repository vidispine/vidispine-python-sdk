# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class BorderType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'a': 'int',
        'width': 'int',
        'r': 'int',
        'b': 'int',
        'g': 'int'
    }

    attribute_map = {
        'a': 'a',
        'width': 'width',
        'r': 'r',
        'b': 'b',
        'g': 'g'
    }

    def __init__(self, a=None, width=None, r=None, b=None, g=None):  # noqa: E501
        """BorderType - a model defined in OpenAPI"""  # noqa: E501

        self._a = None
        self._width = None
        self._r = None
        self._b = None
        self._g = None
        self.discriminator = None

        self.a = a
        self.width = width
        self.r = r
        self.b = b
        self.g = g

    @property
    def a(self):
        """Gets the a of this BorderType.  # noqa: E501


        :return: The a of this BorderType.  # noqa: E501
        :rtype: int
        """
        return self._a

    @a.setter
    def a(self, a):
        """Sets the a of this BorderType.


        :param a: The a of this BorderType.  # noqa: E501
        :type: int
        """
        if a is None:
            raise ValueError("Invalid value for `a`, must not be `None`")  # noqa: E501

        self._a = a

    @property
    def width(self):
        """Gets the width of this BorderType.  # noqa: E501


        :return: The width of this BorderType.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this BorderType.


        :param width: The width of this BorderType.  # noqa: E501
        :type: int
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")  # noqa: E501

        self._width = width

    @property
    def r(self):
        """Gets the r of this BorderType.  # noqa: E501


        :return: The r of this BorderType.  # noqa: E501
        :rtype: int
        """
        return self._r

    @r.setter
    def r(self, r):
        """Sets the r of this BorderType.


        :param r: The r of this BorderType.  # noqa: E501
        :type: int
        """
        if r is None:
            raise ValueError("Invalid value for `r`, must not be `None`")  # noqa: E501

        self._r = r

    @property
    def b(self):
        """Gets the b of this BorderType.  # noqa: E501


        :return: The b of this BorderType.  # noqa: E501
        :rtype: int
        """
        return self._b

    @b.setter
    def b(self, b):
        """Sets the b of this BorderType.


        :param b: The b of this BorderType.  # noqa: E501
        :type: int
        """
        if b is None:
            raise ValueError("Invalid value for `b`, must not be `None`")  # noqa: E501

        self._b = b

    @property
    def g(self):
        """Gets the g of this BorderType.  # noqa: E501


        :return: The g of this BorderType.  # noqa: E501
        :rtype: int
        """
        return self._g

    @g.setter
    def g(self, g):
        """Sets the g of this BorderType.


        :param g: The g of this BorderType.  # noqa: E501
        :type: int
        """
        if g is None:
            raise ValueError("Invalid value for `g`, must not be `None`")  # noqa: E501

        self._g = g

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BorderType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
