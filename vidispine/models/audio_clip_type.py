# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class AudioClipType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'track': 'int',
        'sub_clip': 'list[SubClipType]',
        'uri': 'str',
        'stream': 'int',
        'id': 'str'
    }

    attribute_map = {
        'track': 'track',
        'sub_clip': 'subClip',
        'uri': 'uri',
        'stream': 'stream',
        'id': 'id'
    }

    def __init__(self, track=None, sub_clip=None, uri=None, stream=None, id=None):  # noqa: E501
        """AudioClipType - a model defined in OpenAPI"""  # noqa: E501

        self._track = None
        self._sub_clip = None
        self._uri = None
        self._stream = None
        self._id = None
        self.discriminator = None

        if track is not None:
            self.track = track
        if sub_clip is not None:
            self.sub_clip = sub_clip
        if uri is not None:
            self.uri = uri
        if stream is not None:
            self.stream = stream
        if id is not None:
            self.id = id

    @property
    def track(self):
        """Gets the track of this AudioClipType.  # noqa: E501


        :return: The track of this AudioClipType.  # noqa: E501
        :rtype: int
        """
        return self._track

    @track.setter
    def track(self, track):
        """Sets the track of this AudioClipType.


        :param track: The track of this AudioClipType.  # noqa: E501
        :type: int
        """

        self._track = track

    @property
    def sub_clip(self):
        """Gets the sub_clip of this AudioClipType.  # noqa: E501


        :return: The sub_clip of this AudioClipType.  # noqa: E501
        :rtype: list[SubClipType]
        """
        return self._sub_clip

    @sub_clip.setter
    def sub_clip(self, sub_clip):
        """Sets the sub_clip of this AudioClipType.


        :param sub_clip: The sub_clip of this AudioClipType.  # noqa: E501
        :type: list[SubClipType]
        """

        self._sub_clip = sub_clip

    @property
    def uri(self):
        """Gets the uri of this AudioClipType.  # noqa: E501


        :return: The uri of this AudioClipType.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this AudioClipType.


        :param uri: The uri of this AudioClipType.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def stream(self):
        """Gets the stream of this AudioClipType.  # noqa: E501


        :return: The stream of this AudioClipType.  # noqa: E501
        :rtype: int
        """
        return self._stream

    @stream.setter
    def stream(self, stream):
        """Sets the stream of this AudioClipType.


        :param stream: The stream of this AudioClipType.  # noqa: E501
        :type: int
        """

        self._stream = stream

    @property
    def id(self):
        """Gets the id of this AudioClipType.  # noqa: E501


        :return: The id of this AudioClipType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AudioClipType.


        :param id: The id of this AudioClipType.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AudioClipType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
