# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class AuditLogEntryType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'username': 'str',
        'body': 'str',
        'content_type': 'str',
        'timestamp': 'datetime',
        'run_as': 'str',
        'matrix_parameters': 'str',
        'content_length': 'str',
        'query_parameters': 'str',
        'path': 'str',
        'method': 'str'
    }

    attribute_map = {
        'username': 'username',
        'body': 'body',
        'content_type': 'contentType',
        'timestamp': 'timestamp',
        'run_as': 'runAs',
        'matrix_parameters': 'matrixParameters',
        'content_length': 'contentLength',
        'query_parameters': 'queryParameters',
        'path': 'path',
        'method': 'method'
    }

    def __init__(self, username=None, body=None, content_type=None, timestamp=None, run_as=None, matrix_parameters=None, content_length=None, query_parameters=None, path=None, method=None):  # noqa: E501
        """AuditLogEntryType - a model defined in OpenAPI"""  # noqa: E501

        self._username = None
        self._body = None
        self._content_type = None
        self._timestamp = None
        self._run_as = None
        self._matrix_parameters = None
        self._content_length = None
        self._query_parameters = None
        self._path = None
        self._method = None
        self.discriminator = None

        self.username = username
        if body is not None:
            self.body = body
        if content_type is not None:
            self.content_type = content_type
        self.timestamp = timestamp
        if run_as is not None:
            self.run_as = run_as
        self.matrix_parameters = matrix_parameters
        if content_length is not None:
            self.content_length = content_length
        self.query_parameters = query_parameters
        self.path = path
        self.method = method

    @property
    def username(self):
        """Gets the username of this AuditLogEntryType.  # noqa: E501


        :return: The username of this AuditLogEntryType.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AuditLogEntryType.


        :param username: The username of this AuditLogEntryType.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def body(self):
        """Gets the body of this AuditLogEntryType.  # noqa: E501


        :return: The body of this AuditLogEntryType.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this AuditLogEntryType.


        :param body: The body of this AuditLogEntryType.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def content_type(self):
        """Gets the content_type of this AuditLogEntryType.  # noqa: E501


        :return: The content_type of this AuditLogEntryType.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this AuditLogEntryType.


        :param content_type: The content_type of this AuditLogEntryType.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def timestamp(self):
        """Gets the timestamp of this AuditLogEntryType.  # noqa: E501


        :return: The timestamp of this AuditLogEntryType.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this AuditLogEntryType.


        :param timestamp: The timestamp of this AuditLogEntryType.  # noqa: E501
        :type: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def run_as(self):
        """Gets the run_as of this AuditLogEntryType.  # noqa: E501


        :return: The run_as of this AuditLogEntryType.  # noqa: E501
        :rtype: str
        """
        return self._run_as

    @run_as.setter
    def run_as(self, run_as):
        """Sets the run_as of this AuditLogEntryType.


        :param run_as: The run_as of this AuditLogEntryType.  # noqa: E501
        :type: str
        """

        self._run_as = run_as

    @property
    def matrix_parameters(self):
        """Gets the matrix_parameters of this AuditLogEntryType.  # noqa: E501


        :return: The matrix_parameters of this AuditLogEntryType.  # noqa: E501
        :rtype: str
        """
        return self._matrix_parameters

    @matrix_parameters.setter
    def matrix_parameters(self, matrix_parameters):
        """Sets the matrix_parameters of this AuditLogEntryType.


        :param matrix_parameters: The matrix_parameters of this AuditLogEntryType.  # noqa: E501
        :type: str
        """
        if matrix_parameters is None:
            raise ValueError("Invalid value for `matrix_parameters`, must not be `None`")  # noqa: E501

        self._matrix_parameters = matrix_parameters

    @property
    def content_length(self):
        """Gets the content_length of this AuditLogEntryType.  # noqa: E501


        :return: The content_length of this AuditLogEntryType.  # noqa: E501
        :rtype: str
        """
        return self._content_length

    @content_length.setter
    def content_length(self, content_length):
        """Sets the content_length of this AuditLogEntryType.


        :param content_length: The content_length of this AuditLogEntryType.  # noqa: E501
        :type: str
        """

        self._content_length = content_length

    @property
    def query_parameters(self):
        """Gets the query_parameters of this AuditLogEntryType.  # noqa: E501


        :return: The query_parameters of this AuditLogEntryType.  # noqa: E501
        :rtype: str
        """
        return self._query_parameters

    @query_parameters.setter
    def query_parameters(self, query_parameters):
        """Sets the query_parameters of this AuditLogEntryType.


        :param query_parameters: The query_parameters of this AuditLogEntryType.  # noqa: E501
        :type: str
        """
        if query_parameters is None:
            raise ValueError("Invalid value for `query_parameters`, must not be `None`")  # noqa: E501

        self._query_parameters = query_parameters

    @property
    def path(self):
        """Gets the path of this AuditLogEntryType.  # noqa: E501


        :return: The path of this AuditLogEntryType.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this AuditLogEntryType.


        :param path: The path of this AuditLogEntryType.  # noqa: E501
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def method(self):
        """Gets the method of this AuditLogEntryType.  # noqa: E501


        :return: The method of this AuditLogEntryType.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this AuditLogEntryType.


        :param method: The method of this AuditLogEntryType.  # noqa: E501
        :type: str
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")  # noqa: E501

        self._method = method

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditLogEntryType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
