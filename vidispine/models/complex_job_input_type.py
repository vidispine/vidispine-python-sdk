# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class ComplexJobInputType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'transition': 'TransitionType',
        'setting': 'list[KeyValuePairType]',
        'id': 'int',
        'stream': 'int'
    }

    attribute_map = {
        'transition': 'transition',
        'setting': 'setting',
        'id': 'id',
        'stream': 'stream'
    }

    def __init__(self, transition=None, setting=None, id=None, stream=None):  # noqa: E501
        """ComplexJobInputType - a model defined in OpenAPI"""  # noqa: E501

        self._transition = None
        self._setting = None
        self._id = None
        self._stream = None
        self.discriminator = None

        if transition is not None:
            self.transition = transition
        if setting is not None:
            self.setting = setting
        self.id = id
        self.stream = stream

    @property
    def transition(self):
        """Gets the transition of this ComplexJobInputType.  # noqa: E501


        :return: The transition of this ComplexJobInputType.  # noqa: E501
        :rtype: TransitionType
        """
        return self._transition

    @transition.setter
    def transition(self, transition):
        """Sets the transition of this ComplexJobInputType.


        :param transition: The transition of this ComplexJobInputType.  # noqa: E501
        :type: TransitionType
        """

        self._transition = transition

    @property
    def setting(self):
        """Gets the setting of this ComplexJobInputType.  # noqa: E501


        :return: The setting of this ComplexJobInputType.  # noqa: E501
        :rtype: list[KeyValuePairType]
        """
        return self._setting

    @setting.setter
    def setting(self, setting):
        """Sets the setting of this ComplexJobInputType.


        :param setting: The setting of this ComplexJobInputType.  # noqa: E501
        :type: list[KeyValuePairType]
        """

        self._setting = setting

    @property
    def id(self):
        """Gets the id of this ComplexJobInputType.  # noqa: E501


        :return: The id of this ComplexJobInputType.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ComplexJobInputType.


        :param id: The id of this ComplexJobInputType.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def stream(self):
        """Gets the stream of this ComplexJobInputType.  # noqa: E501


        :return: The stream of this ComplexJobInputType.  # noqa: E501
        :rtype: int
        """
        return self._stream

    @stream.setter
    def stream(self, stream):
        """Sets the stream of this ComplexJobInputType.


        :param stream: The stream of this ComplexJobInputType.  # noqa: E501
        :type: int
        """
        if stream is None:
            raise ValueError("Invalid value for `stream`, must not be `None`")  # noqa: E501

        self._stream = stream

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComplexJobInputType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
