# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class LogReportConfigurationType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'certificate': 'str',
        'upload_uri': 'str',
        'client_certificate': 'list[str]',
        'expiry_time': 'float',
        'path': 'str',
        'client_key': 'str'
    }

    attribute_map = {
        'certificate': 'certificate',
        'upload_uri': 'uploadUri',
        'client_certificate': 'clientCertificate',
        'expiry_time': 'expiryTime',
        'path': 'path',
        'client_key': 'clientKey'
    }

    def __init__(self, certificate=None, upload_uri=None, client_certificate=None, expiry_time=None, path=None, client_key=None):  # noqa: E501
        """LogReportConfigurationType - a model defined in OpenAPI"""  # noqa: E501

        self._certificate = None
        self._upload_uri = None
        self._client_certificate = None
        self._expiry_time = None
        self._path = None
        self._client_key = None
        self.discriminator = None

        if certificate is not None:
            self.certificate = certificate
        if upload_uri is not None:
            self.upload_uri = upload_uri
        if client_certificate is not None:
            self.client_certificate = client_certificate
        if expiry_time is not None:
            self.expiry_time = expiry_time
        if path is not None:
            self.path = path
        if client_key is not None:
            self.client_key = client_key

    @property
    def certificate(self):
        """Gets the certificate of this LogReportConfigurationType.  # noqa: E501


        :return: The certificate of this LogReportConfigurationType.  # noqa: E501
        :rtype: str
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this LogReportConfigurationType.


        :param certificate: The certificate of this LogReportConfigurationType.  # noqa: E501
        :type: str
        """

        self._certificate = certificate

    @property
    def upload_uri(self):
        """Gets the upload_uri of this LogReportConfigurationType.  # noqa: E501


        :return: The upload_uri of this LogReportConfigurationType.  # noqa: E501
        :rtype: str
        """
        return self._upload_uri

    @upload_uri.setter
    def upload_uri(self, upload_uri):
        """Sets the upload_uri of this LogReportConfigurationType.


        :param upload_uri: The upload_uri of this LogReportConfigurationType.  # noqa: E501
        :type: str
        """

        self._upload_uri = upload_uri

    @property
    def client_certificate(self):
        """Gets the client_certificate of this LogReportConfigurationType.  # noqa: E501


        :return: The client_certificate of this LogReportConfigurationType.  # noqa: E501
        :rtype: list[str]
        """
        return self._client_certificate

    @client_certificate.setter
    def client_certificate(self, client_certificate):
        """Sets the client_certificate of this LogReportConfigurationType.


        :param client_certificate: The client_certificate of this LogReportConfigurationType.  # noqa: E501
        :type: list[str]
        """

        self._client_certificate = client_certificate

    @property
    def expiry_time(self):
        """Gets the expiry_time of this LogReportConfigurationType.  # noqa: E501


        :return: The expiry_time of this LogReportConfigurationType.  # noqa: E501
        :rtype: float
        """
        return self._expiry_time

    @expiry_time.setter
    def expiry_time(self, expiry_time):
        """Sets the expiry_time of this LogReportConfigurationType.


        :param expiry_time: The expiry_time of this LogReportConfigurationType.  # noqa: E501
        :type: float
        """

        self._expiry_time = expiry_time

    @property
    def path(self):
        """Gets the path of this LogReportConfigurationType.  # noqa: E501


        :return: The path of this LogReportConfigurationType.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this LogReportConfigurationType.


        :param path: The path of this LogReportConfigurationType.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def client_key(self):
        """Gets the client_key of this LogReportConfigurationType.  # noqa: E501


        :return: The client_key of this LogReportConfigurationType.  # noqa: E501
        :rtype: str
        """
        return self._client_key

    @client_key.setter
    def client_key(self, client_key):
        """Sets the client_key of this LogReportConfigurationType.


        :param client_key: The client_key of this LogReportConfigurationType.  # noqa: E501
        :type: str
        """

        self._client_key = client_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogReportConfigurationType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
