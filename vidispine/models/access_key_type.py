# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class AccessKeyType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'status': 'str',
        'secret': 'str',
        'created': 'datetime',
        'id': 'str',
        'name': 'str'
    }

    attribute_map = {
        'status': 'status',
        'secret': 'secret',
        'created': 'created',
        'id': 'id',
        'name': 'name'
    }

    def __init__(self, status=None, secret=None, created=None, id=None, name=None):  # noqa: E501
        """AccessKeyType - a model defined in OpenAPI"""  # noqa: E501

        self._status = None
        self._secret = None
        self._created = None
        self._id = None
        self._name = None
        self.discriminator = None

        self.status = status
        if secret is not None:
            self.secret = secret
        self.created = created
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name

    @property
    def status(self):
        """Gets the status of this AccessKeyType.  # noqa: E501


        :return: The status of this AccessKeyType.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AccessKeyType.


        :param status: The status of this AccessKeyType.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["ACTIVE", "INACTIVE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def secret(self):
        """Gets the secret of this AccessKeyType.  # noqa: E501


        :return: The secret of this AccessKeyType.  # noqa: E501
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this AccessKeyType.


        :param secret: The secret of this AccessKeyType.  # noqa: E501
        :type: str
        """

        self._secret = secret

    @property
    def created(self):
        """Gets the created of this AccessKeyType.  # noqa: E501


        :return: The created of this AccessKeyType.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this AccessKeyType.


        :param created: The created of this AccessKeyType.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def id(self):
        """Gets the id of this AccessKeyType.  # noqa: E501


        :return: The id of this AccessKeyType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccessKeyType.


        :param id: The id of this AccessKeyType.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AccessKeyType.  # noqa: E501


        :return: The name of this AccessKeyType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccessKeyType.


        :param name: The name of this AccessKeyType.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessKeyType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
