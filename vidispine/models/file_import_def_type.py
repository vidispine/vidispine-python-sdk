# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class FileImportDefType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'path': 'str',
        'size': 'int',
        'component': 'list[str]',
        'file_id': 'str'
    }

    attribute_map = {
        'path': 'path',
        'size': 'size',
        'component': 'component',
        'file_id': 'fileId'
    }

    def __init__(self, path=None, size=None, component=None, file_id=None):  # noqa: E501
        """FileImportDefType - a model defined in OpenAPI"""  # noqa: E501

        self._path = None
        self._size = None
        self._component = None
        self._file_id = None
        self.discriminator = None

        self.path = path
        self.size = size
        if component is not None:
            self.component = component
        self.file_id = file_id

    @property
    def path(self):
        """Gets the path of this FileImportDefType.  # noqa: E501


        :return: The path of this FileImportDefType.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this FileImportDefType.


        :param path: The path of this FileImportDefType.  # noqa: E501
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def size(self):
        """Gets the size of this FileImportDefType.  # noqa: E501


        :return: The size of this FileImportDefType.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this FileImportDefType.


        :param size: The size of this FileImportDefType.  # noqa: E501
        :type: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def component(self):
        """Gets the component of this FileImportDefType.  # noqa: E501


        :return: The component of this FileImportDefType.  # noqa: E501
        :rtype: list[str]
        """
        return self._component

    @component.setter
    def component(self, component):
        """Sets the component of this FileImportDefType.


        :param component: The component of this FileImportDefType.  # noqa: E501
        :type: list[str]
        """

        self._component = component

    @property
    def file_id(self):
        """Gets the file_id of this FileImportDefType.  # noqa: E501


        :return: The file_id of this FileImportDefType.  # noqa: E501
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this FileImportDefType.


        :param file_id: The file_id of this FileImportDefType.  # noqa: E501
        :type: str
        """
        if file_id is None:
            raise ValueError("Invalid value for `file_id`, must not be `None`")  # noqa: E501
        if file_id is not None and not re.search(r'([_A-Za-z]+-)?([A-Za-z_][A-Za-z0-9_]*-|(([A-Za-z_][A-Za-z0-9_]*)?\*))([0-9]{1}[0-9]{0,31})', file_id):  # noqa: E501
            raise ValueError(r"Invalid value for `file_id`, must be a follow pattern or equal to `/([_A-Za-z]+-)?([A-Za-z_][A-Za-z0-9_]*-|(([A-Za-z_][A-Za-z0-9_]*)?\*))([0-9]{1}[0-9]{0,31})/`")  # noqa: E501

        self._file_id = file_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileImportDefType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
