# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class SlaveLicenseType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'end_customer_company_contact_email': 'str',
        'database_size_limit': 'LicenseNumberType',
        'reseller_company_contact_email': 'str',
        'license_type': 'str',
        'license_error_status': 'LicenseErrorType',
        'expiry_date': 'str',
        'item_number': 'LicenseNumberType',
        'file_status': 'str',
        'macaddresses': 'SystemInfoType',
        'license_status': 'str',
        'end_customer_companyname': 'str',
        'storage_number': 'LicenseNumberType',
        'transcoder_number': 'LicenseNumberType',
        'user_number': 'LicenseNumberType',
        'reseller_company_name': 'str',
        'codec_status': 'CodecStatusType',
        'slave_identifier': 'str',
        'master_identifier': 'str',
        'slave_instances': 'int',
        'validity_time': 'datetime',
        'id': 'str',
        'validity_period': 'int'
    }

    attribute_map = {
        'end_customer_company_contact_email': 'endCustomerCompanyContactEmail',
        'database_size_limit': 'databaseSizeLimit',
        'reseller_company_contact_email': 'resellerCompanyContactEmail',
        'license_type': 'licenseType',
        'license_error_status': 'licenseErrorStatus',
        'expiry_date': 'expiryDate',
        'item_number': 'itemNumber',
        'file_status': 'fileStatus',
        'macaddresses': 'macaddresses',
        'license_status': 'licenseStatus',
        'end_customer_companyname': 'endCustomerCompanyname',
        'storage_number': 'storageNumber',
        'transcoder_number': 'transcoderNumber',
        'user_number': 'userNumber',
        'reseller_company_name': 'resellerCompanyName',
        'codec_status': 'codecStatus',
        'slave_identifier': 'slaveIdentifier',
        'master_identifier': 'masterIdentifier',
        'slave_instances': 'slaveInstances',
        'validity_time': 'validityTime',
        'id': 'id',
        'validity_period': 'validityPeriod'
    }

    def __init__(self, end_customer_company_contact_email=None, database_size_limit=None, reseller_company_contact_email=None, license_type=None, license_error_status=None, expiry_date=None, item_number=None, file_status=None, macaddresses=None, license_status=None, end_customer_companyname=None, storage_number=None, transcoder_number=None, user_number=None, reseller_company_name=None, codec_status=None, slave_identifier=None, master_identifier=None, slave_instances=None, validity_time=None, id=None, validity_period=None):  # noqa: E501
        """SlaveLicenseType - a model defined in OpenAPI"""  # noqa: E501

        self._end_customer_company_contact_email = None
        self._database_size_limit = None
        self._reseller_company_contact_email = None
        self._license_type = None
        self._license_error_status = None
        self._expiry_date = None
        self._item_number = None
        self._file_status = None
        self._macaddresses = None
        self._license_status = None
        self._end_customer_companyname = None
        self._storage_number = None
        self._transcoder_number = None
        self._user_number = None
        self._reseller_company_name = None
        self._codec_status = None
        self._slave_identifier = None
        self._master_identifier = None
        self._slave_instances = None
        self._validity_time = None
        self._id = None
        self._validity_period = None
        self.discriminator = None

        if end_customer_company_contact_email is not None:
            self.end_customer_company_contact_email = end_customer_company_contact_email
        if database_size_limit is not None:
            self.database_size_limit = database_size_limit
        if reseller_company_contact_email is not None:
            self.reseller_company_contact_email = reseller_company_contact_email
        if license_type is not None:
            self.license_type = license_type
        if license_error_status is not None:
            self.license_error_status = license_error_status
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if item_number is not None:
            self.item_number = item_number
        if file_status is not None:
            self.file_status = file_status
        if macaddresses is not None:
            self.macaddresses = macaddresses
        if license_status is not None:
            self.license_status = license_status
        if end_customer_companyname is not None:
            self.end_customer_companyname = end_customer_companyname
        if storage_number is not None:
            self.storage_number = storage_number
        if transcoder_number is not None:
            self.transcoder_number = transcoder_number
        if user_number is not None:
            self.user_number = user_number
        if reseller_company_name is not None:
            self.reseller_company_name = reseller_company_name
        if codec_status is not None:
            self.codec_status = codec_status
        if slave_identifier is not None:
            self.slave_identifier = slave_identifier
        if master_identifier is not None:
            self.master_identifier = master_identifier
        if slave_instances is not None:
            self.slave_instances = slave_instances
        if validity_time is not None:
            self.validity_time = validity_time
        if id is not None:
            self.id = id
        if validity_period is not None:
            self.validity_period = validity_period

    @property
    def end_customer_company_contact_email(self):
        """Gets the end_customer_company_contact_email of this SlaveLicenseType.  # noqa: E501


        :return: The end_customer_company_contact_email of this SlaveLicenseType.  # noqa: E501
        :rtype: str
        """
        return self._end_customer_company_contact_email

    @end_customer_company_contact_email.setter
    def end_customer_company_contact_email(self, end_customer_company_contact_email):
        """Sets the end_customer_company_contact_email of this SlaveLicenseType.


        :param end_customer_company_contact_email: The end_customer_company_contact_email of this SlaveLicenseType.  # noqa: E501
        :type: str
        """

        self._end_customer_company_contact_email = end_customer_company_contact_email

    @property
    def database_size_limit(self):
        """Gets the database_size_limit of this SlaveLicenseType.  # noqa: E501


        :return: The database_size_limit of this SlaveLicenseType.  # noqa: E501
        :rtype: LicenseNumberType
        """
        return self._database_size_limit

    @database_size_limit.setter
    def database_size_limit(self, database_size_limit):
        """Sets the database_size_limit of this SlaveLicenseType.


        :param database_size_limit: The database_size_limit of this SlaveLicenseType.  # noqa: E501
        :type: LicenseNumberType
        """

        self._database_size_limit = database_size_limit

    @property
    def reseller_company_contact_email(self):
        """Gets the reseller_company_contact_email of this SlaveLicenseType.  # noqa: E501


        :return: The reseller_company_contact_email of this SlaveLicenseType.  # noqa: E501
        :rtype: str
        """
        return self._reseller_company_contact_email

    @reseller_company_contact_email.setter
    def reseller_company_contact_email(self, reseller_company_contact_email):
        """Sets the reseller_company_contact_email of this SlaveLicenseType.


        :param reseller_company_contact_email: The reseller_company_contact_email of this SlaveLicenseType.  # noqa: E501
        :type: str
        """

        self._reseller_company_contact_email = reseller_company_contact_email

    @property
    def license_type(self):
        """Gets the license_type of this SlaveLicenseType.  # noqa: E501


        :return: The license_type of this SlaveLicenseType.  # noqa: E501
        :rtype: str
        """
        return self._license_type

    @license_type.setter
    def license_type(self, license_type):
        """Sets the license_type of this SlaveLicenseType.


        :param license_type: The license_type of this SlaveLicenseType.  # noqa: E501
        :type: str
        """

        self._license_type = license_type

    @property
    def license_error_status(self):
        """Gets the license_error_status of this SlaveLicenseType.  # noqa: E501


        :return: The license_error_status of this SlaveLicenseType.  # noqa: E501
        :rtype: LicenseErrorType
        """
        return self._license_error_status

    @license_error_status.setter
    def license_error_status(self, license_error_status):
        """Sets the license_error_status of this SlaveLicenseType.


        :param license_error_status: The license_error_status of this SlaveLicenseType.  # noqa: E501
        :type: LicenseErrorType
        """

        self._license_error_status = license_error_status

    @property
    def expiry_date(self):
        """Gets the expiry_date of this SlaveLicenseType.  # noqa: E501


        :return: The expiry_date of this SlaveLicenseType.  # noqa: E501
        :rtype: str
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this SlaveLicenseType.


        :param expiry_date: The expiry_date of this SlaveLicenseType.  # noqa: E501
        :type: str
        """

        self._expiry_date = expiry_date

    @property
    def item_number(self):
        """Gets the item_number of this SlaveLicenseType.  # noqa: E501


        :return: The item_number of this SlaveLicenseType.  # noqa: E501
        :rtype: LicenseNumberType
        """
        return self._item_number

    @item_number.setter
    def item_number(self, item_number):
        """Sets the item_number of this SlaveLicenseType.


        :param item_number: The item_number of this SlaveLicenseType.  # noqa: E501
        :type: LicenseNumberType
        """

        self._item_number = item_number

    @property
    def file_status(self):
        """Gets the file_status of this SlaveLicenseType.  # noqa: E501


        :return: The file_status of this SlaveLicenseType.  # noqa: E501
        :rtype: str
        """
        return self._file_status

    @file_status.setter
    def file_status(self, file_status):
        """Sets the file_status of this SlaveLicenseType.


        :param file_status: The file_status of this SlaveLicenseType.  # noqa: E501
        :type: str
        """

        self._file_status = file_status

    @property
    def macaddresses(self):
        """Gets the macaddresses of this SlaveLicenseType.  # noqa: E501


        :return: The macaddresses of this SlaveLicenseType.  # noqa: E501
        :rtype: SystemInfoType
        """
        return self._macaddresses

    @macaddresses.setter
    def macaddresses(self, macaddresses):
        """Sets the macaddresses of this SlaveLicenseType.


        :param macaddresses: The macaddresses of this SlaveLicenseType.  # noqa: E501
        :type: SystemInfoType
        """

        self._macaddresses = macaddresses

    @property
    def license_status(self):
        """Gets the license_status of this SlaveLicenseType.  # noqa: E501


        :return: The license_status of this SlaveLicenseType.  # noqa: E501
        :rtype: str
        """
        return self._license_status

    @license_status.setter
    def license_status(self, license_status):
        """Sets the license_status of this SlaveLicenseType.


        :param license_status: The license_status of this SlaveLicenseType.  # noqa: E501
        :type: str
        """

        self._license_status = license_status

    @property
    def end_customer_companyname(self):
        """Gets the end_customer_companyname of this SlaveLicenseType.  # noqa: E501


        :return: The end_customer_companyname of this SlaveLicenseType.  # noqa: E501
        :rtype: str
        """
        return self._end_customer_companyname

    @end_customer_companyname.setter
    def end_customer_companyname(self, end_customer_companyname):
        """Sets the end_customer_companyname of this SlaveLicenseType.


        :param end_customer_companyname: The end_customer_companyname of this SlaveLicenseType.  # noqa: E501
        :type: str
        """

        self._end_customer_companyname = end_customer_companyname

    @property
    def storage_number(self):
        """Gets the storage_number of this SlaveLicenseType.  # noqa: E501


        :return: The storage_number of this SlaveLicenseType.  # noqa: E501
        :rtype: LicenseNumberType
        """
        return self._storage_number

    @storage_number.setter
    def storage_number(self, storage_number):
        """Sets the storage_number of this SlaveLicenseType.


        :param storage_number: The storage_number of this SlaveLicenseType.  # noqa: E501
        :type: LicenseNumberType
        """

        self._storage_number = storage_number

    @property
    def transcoder_number(self):
        """Gets the transcoder_number of this SlaveLicenseType.  # noqa: E501


        :return: The transcoder_number of this SlaveLicenseType.  # noqa: E501
        :rtype: LicenseNumberType
        """
        return self._transcoder_number

    @transcoder_number.setter
    def transcoder_number(self, transcoder_number):
        """Sets the transcoder_number of this SlaveLicenseType.


        :param transcoder_number: The transcoder_number of this SlaveLicenseType.  # noqa: E501
        :type: LicenseNumberType
        """

        self._transcoder_number = transcoder_number

    @property
    def user_number(self):
        """Gets the user_number of this SlaveLicenseType.  # noqa: E501


        :return: The user_number of this SlaveLicenseType.  # noqa: E501
        :rtype: LicenseNumberType
        """
        return self._user_number

    @user_number.setter
    def user_number(self, user_number):
        """Sets the user_number of this SlaveLicenseType.


        :param user_number: The user_number of this SlaveLicenseType.  # noqa: E501
        :type: LicenseNumberType
        """

        self._user_number = user_number

    @property
    def reseller_company_name(self):
        """Gets the reseller_company_name of this SlaveLicenseType.  # noqa: E501


        :return: The reseller_company_name of this SlaveLicenseType.  # noqa: E501
        :rtype: str
        """
        return self._reseller_company_name

    @reseller_company_name.setter
    def reseller_company_name(self, reseller_company_name):
        """Sets the reseller_company_name of this SlaveLicenseType.


        :param reseller_company_name: The reseller_company_name of this SlaveLicenseType.  # noqa: E501
        :type: str
        """

        self._reseller_company_name = reseller_company_name

    @property
    def codec_status(self):
        """Gets the codec_status of this SlaveLicenseType.  # noqa: E501


        :return: The codec_status of this SlaveLicenseType.  # noqa: E501
        :rtype: CodecStatusType
        """
        return self._codec_status

    @codec_status.setter
    def codec_status(self, codec_status):
        """Sets the codec_status of this SlaveLicenseType.


        :param codec_status: The codec_status of this SlaveLicenseType.  # noqa: E501
        :type: CodecStatusType
        """

        self._codec_status = codec_status

    @property
    def slave_identifier(self):
        """Gets the slave_identifier of this SlaveLicenseType.  # noqa: E501


        :return: The slave_identifier of this SlaveLicenseType.  # noqa: E501
        :rtype: str
        """
        return self._slave_identifier

    @slave_identifier.setter
    def slave_identifier(self, slave_identifier):
        """Sets the slave_identifier of this SlaveLicenseType.


        :param slave_identifier: The slave_identifier of this SlaveLicenseType.  # noqa: E501
        :type: str
        """

        self._slave_identifier = slave_identifier

    @property
    def master_identifier(self):
        """Gets the master_identifier of this SlaveLicenseType.  # noqa: E501


        :return: The master_identifier of this SlaveLicenseType.  # noqa: E501
        :rtype: str
        """
        return self._master_identifier

    @master_identifier.setter
    def master_identifier(self, master_identifier):
        """Sets the master_identifier of this SlaveLicenseType.


        :param master_identifier: The master_identifier of this SlaveLicenseType.  # noqa: E501
        :type: str
        """

        self._master_identifier = master_identifier

    @property
    def slave_instances(self):
        """Gets the slave_instances of this SlaveLicenseType.  # noqa: E501


        :return: The slave_instances of this SlaveLicenseType.  # noqa: E501
        :rtype: int
        """
        return self._slave_instances

    @slave_instances.setter
    def slave_instances(self, slave_instances):
        """Sets the slave_instances of this SlaveLicenseType.


        :param slave_instances: The slave_instances of this SlaveLicenseType.  # noqa: E501
        :type: int
        """

        self._slave_instances = slave_instances

    @property
    def validity_time(self):
        """Gets the validity_time of this SlaveLicenseType.  # noqa: E501


        :return: The validity_time of this SlaveLicenseType.  # noqa: E501
        :rtype: datetime
        """
        return self._validity_time

    @validity_time.setter
    def validity_time(self, validity_time):
        """Sets the validity_time of this SlaveLicenseType.


        :param validity_time: The validity_time of this SlaveLicenseType.  # noqa: E501
        :type: datetime
        """

        self._validity_time = validity_time

    @property
    def id(self):
        """Gets the id of this SlaveLicenseType.  # noqa: E501


        :return: The id of this SlaveLicenseType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SlaveLicenseType.


        :param id: The id of this SlaveLicenseType.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def validity_period(self):
        """Gets the validity_period of this SlaveLicenseType.  # noqa: E501


        :return: The validity_period of this SlaveLicenseType.  # noqa: E501
        :rtype: int
        """
        return self._validity_period

    @validity_period.setter
    def validity_period(self, validity_period):
        """Sets the validity_period of this SlaveLicenseType.


        :param validity_period: The validity_period of this SlaveLicenseType.  # noqa: E501
        :type: int
        """

        self._validity_period = validity_period

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SlaveLicenseType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
