# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class SiteRuleType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'files': 'bool',
        'local_target_storage': 'str',
        'deleted': 'bool',
        'site': 'str',
        'access': 'bool',
        'shape': 'list[str]',
        'groups': 'bool',
        'target_storage': 'str',
        'id': 'str',
        'metadata': 'bool'
    }

    attribute_map = {
        'files': 'files',
        'local_target_storage': 'localTargetStorage',
        'deleted': 'deleted',
        'site': 'site',
        'access': 'access',
        'shape': 'shape',
        'groups': 'groups',
        'target_storage': 'targetStorage',
        'id': 'id',
        'metadata': 'metadata'
    }

    def __init__(self, files=None, local_target_storage=None, deleted=None, site=None, access=None, shape=None, groups=None, target_storage=None, id=None, metadata=None):  # noqa: E501
        """SiteRuleType - a model defined in OpenAPI"""  # noqa: E501

        self._files = None
        self._local_target_storage = None
        self._deleted = None
        self._site = None
        self._access = None
        self._shape = None
        self._groups = None
        self._target_storage = None
        self._id = None
        self._metadata = None
        self.discriminator = None

        if files is not None:
            self.files = files
        if local_target_storage is not None:
            self.local_target_storage = local_target_storage
        if deleted is not None:
            self.deleted = deleted
        if site is not None:
            self.site = site
        if access is not None:
            self.access = access
        if shape is not None:
            self.shape = shape
        if groups is not None:
            self.groups = groups
        if target_storage is not None:
            self.target_storage = target_storage
        if id is not None:
            self.id = id
        if metadata is not None:
            self.metadata = metadata

    @property
    def files(self):
        """Gets the files of this SiteRuleType.  # noqa: E501


        :return: The files of this SiteRuleType.  # noqa: E501
        :rtype: bool
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this SiteRuleType.


        :param files: The files of this SiteRuleType.  # noqa: E501
        :type: bool
        """

        self._files = files

    @property
    def local_target_storage(self):
        """Gets the local_target_storage of this SiteRuleType.  # noqa: E501


        :return: The local_target_storage of this SiteRuleType.  # noqa: E501
        :rtype: str
        """
        return self._local_target_storage

    @local_target_storage.setter
    def local_target_storage(self, local_target_storage):
        """Sets the local_target_storage of this SiteRuleType.


        :param local_target_storage: The local_target_storage of this SiteRuleType.  # noqa: E501
        :type: str
        """

        self._local_target_storage = local_target_storage

    @property
    def deleted(self):
        """Gets the deleted of this SiteRuleType.  # noqa: E501


        :return: The deleted of this SiteRuleType.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this SiteRuleType.


        :param deleted: The deleted of this SiteRuleType.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def site(self):
        """Gets the site of this SiteRuleType.  # noqa: E501


        :return: The site of this SiteRuleType.  # noqa: E501
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this SiteRuleType.


        :param site: The site of this SiteRuleType.  # noqa: E501
        :type: str
        """

        self._site = site

    @property
    def access(self):
        """Gets the access of this SiteRuleType.  # noqa: E501


        :return: The access of this SiteRuleType.  # noqa: E501
        :rtype: bool
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this SiteRuleType.


        :param access: The access of this SiteRuleType.  # noqa: E501
        :type: bool
        """

        self._access = access

    @property
    def shape(self):
        """Gets the shape of this SiteRuleType.  # noqa: E501


        :return: The shape of this SiteRuleType.  # noqa: E501
        :rtype: list[str]
        """
        return self._shape

    @shape.setter
    def shape(self, shape):
        """Sets the shape of this SiteRuleType.


        :param shape: The shape of this SiteRuleType.  # noqa: E501
        :type: list[str]
        """

        self._shape = shape

    @property
    def groups(self):
        """Gets the groups of this SiteRuleType.  # noqa: E501


        :return: The groups of this SiteRuleType.  # noqa: E501
        :rtype: bool
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this SiteRuleType.


        :param groups: The groups of this SiteRuleType.  # noqa: E501
        :type: bool
        """

        self._groups = groups

    @property
    def target_storage(self):
        """Gets the target_storage of this SiteRuleType.  # noqa: E501


        :return: The target_storage of this SiteRuleType.  # noqa: E501
        :rtype: str
        """
        return self._target_storage

    @target_storage.setter
    def target_storage(self, target_storage):
        """Sets the target_storage of this SiteRuleType.


        :param target_storage: The target_storage of this SiteRuleType.  # noqa: E501
        :type: str
        """

        self._target_storage = target_storage

    @property
    def id(self):
        """Gets the id of this SiteRuleType.  # noqa: E501


        :return: The id of this SiteRuleType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SiteRuleType.


        :param id: The id of this SiteRuleType.  # noqa: E501
        :type: str
        """
        if id is not None and not re.search(r'([_A-Za-z]+-)?([A-Za-z_][A-Za-z0-9_]*-|(([A-Za-z_][A-Za-z0-9_]*)?\*))([0-9]{1}[0-9]{0,31})', id):  # noqa: E501
            raise ValueError(r"Invalid value for `id`, must be a follow pattern or equal to `/([_A-Za-z]+-)?([A-Za-z_][A-Za-z0-9_]*-|(([A-Za-z_][A-Za-z0-9_]*)?\*))([0-9]{1}[0-9]{0,31})/`")  # noqa: E501

        self._id = id

    @property
    def metadata(self):
        """Gets the metadata of this SiteRuleType.  # noqa: E501


        :return: The metadata of this SiteRuleType.  # noqa: E501
        :rtype: bool
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this SiteRuleType.


        :param metadata: The metadata of this SiteRuleType.  # noqa: E501
        :type: bool
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SiteRuleType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
