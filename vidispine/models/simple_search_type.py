# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class SimpleSearchType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'sort': 'list[ItemSearchTypeSort]',
        'field': 'list[SimpleSearchFieldType]',
        'operator': 'SimpleSearchOperatorType'
    }

    attribute_map = {
        'sort': 'sort',
        'field': 'field',
        'operator': 'operator'
    }

    def __init__(self, sort=None, field=None, operator=None):  # noqa: E501
        """SimpleSearchType - a model defined in OpenAPI"""  # noqa: E501

        self._sort = None
        self._field = None
        self._operator = None
        self.discriminator = None

        if sort is not None:
            self.sort = sort
        if field is not None:
            self.field = field
        if operator is not None:
            self.operator = operator

    @property
    def sort(self):
        """Gets the sort of this SimpleSearchType.  # noqa: E501


        :return: The sort of this SimpleSearchType.  # noqa: E501
        :rtype: list[ItemSearchTypeSort]
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this SimpleSearchType.


        :param sort: The sort of this SimpleSearchType.  # noqa: E501
        :type: list[ItemSearchTypeSort]
        """

        self._sort = sort

    @property
    def field(self):
        """Gets the field of this SimpleSearchType.  # noqa: E501


        :return: The field of this SimpleSearchType.  # noqa: E501
        :rtype: list[SimpleSearchFieldType]
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this SimpleSearchType.


        :param field: The field of this SimpleSearchType.  # noqa: E501
        :type: list[SimpleSearchFieldType]
        """

        self._field = field

    @property
    def operator(self):
        """Gets the operator of this SimpleSearchType.  # noqa: E501


        :return: The operator of this SimpleSearchType.  # noqa: E501
        :rtype: SimpleSearchOperatorType
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this SimpleSearchType.


        :param operator: The operator of this SimpleSearchType.  # noqa: E501
        :type: SimpleSearchOperatorType
        """

        self._operator = operator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimpleSearchType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
