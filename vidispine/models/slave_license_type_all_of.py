# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class SlaveLicenseTypeAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'slave_identifier': 'str',
        'master_identifier': 'str',
        'slave_instances': 'int',
        'validity_time': 'datetime',
        'id': 'str',
        'validity_period': 'int'
    }

    attribute_map = {
        'slave_identifier': 'slaveIdentifier',
        'master_identifier': 'masterIdentifier',
        'slave_instances': 'slaveInstances',
        'validity_time': 'validityTime',
        'id': 'id',
        'validity_period': 'validityPeriod'
    }

    def __init__(self, slave_identifier=None, master_identifier=None, slave_instances=None, validity_time=None, id=None, validity_period=None):  # noqa: E501
        """SlaveLicenseTypeAllOf - a model defined in OpenAPI"""  # noqa: E501

        self._slave_identifier = None
        self._master_identifier = None
        self._slave_instances = None
        self._validity_time = None
        self._id = None
        self._validity_period = None
        self.discriminator = None

        if slave_identifier is not None:
            self.slave_identifier = slave_identifier
        if master_identifier is not None:
            self.master_identifier = master_identifier
        if slave_instances is not None:
            self.slave_instances = slave_instances
        if validity_time is not None:
            self.validity_time = validity_time
        if id is not None:
            self.id = id
        if validity_period is not None:
            self.validity_period = validity_period

    @property
    def slave_identifier(self):
        """Gets the slave_identifier of this SlaveLicenseTypeAllOf.  # noqa: E501


        :return: The slave_identifier of this SlaveLicenseTypeAllOf.  # noqa: E501
        :rtype: str
        """
        return self._slave_identifier

    @slave_identifier.setter
    def slave_identifier(self, slave_identifier):
        """Sets the slave_identifier of this SlaveLicenseTypeAllOf.


        :param slave_identifier: The slave_identifier of this SlaveLicenseTypeAllOf.  # noqa: E501
        :type: str
        """

        self._slave_identifier = slave_identifier

    @property
    def master_identifier(self):
        """Gets the master_identifier of this SlaveLicenseTypeAllOf.  # noqa: E501


        :return: The master_identifier of this SlaveLicenseTypeAllOf.  # noqa: E501
        :rtype: str
        """
        return self._master_identifier

    @master_identifier.setter
    def master_identifier(self, master_identifier):
        """Sets the master_identifier of this SlaveLicenseTypeAllOf.


        :param master_identifier: The master_identifier of this SlaveLicenseTypeAllOf.  # noqa: E501
        :type: str
        """

        self._master_identifier = master_identifier

    @property
    def slave_instances(self):
        """Gets the slave_instances of this SlaveLicenseTypeAllOf.  # noqa: E501


        :return: The slave_instances of this SlaveLicenseTypeAllOf.  # noqa: E501
        :rtype: int
        """
        return self._slave_instances

    @slave_instances.setter
    def slave_instances(self, slave_instances):
        """Sets the slave_instances of this SlaveLicenseTypeAllOf.


        :param slave_instances: The slave_instances of this SlaveLicenseTypeAllOf.  # noqa: E501
        :type: int
        """

        self._slave_instances = slave_instances

    @property
    def validity_time(self):
        """Gets the validity_time of this SlaveLicenseTypeAllOf.  # noqa: E501


        :return: The validity_time of this SlaveLicenseTypeAllOf.  # noqa: E501
        :rtype: datetime
        """
        return self._validity_time

    @validity_time.setter
    def validity_time(self, validity_time):
        """Sets the validity_time of this SlaveLicenseTypeAllOf.


        :param validity_time: The validity_time of this SlaveLicenseTypeAllOf.  # noqa: E501
        :type: datetime
        """

        self._validity_time = validity_time

    @property
    def id(self):
        """Gets the id of this SlaveLicenseTypeAllOf.  # noqa: E501


        :return: The id of this SlaveLicenseTypeAllOf.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SlaveLicenseTypeAllOf.


        :param id: The id of this SlaveLicenseTypeAllOf.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def validity_period(self):
        """Gets the validity_period of this SlaveLicenseTypeAllOf.  # noqa: E501


        :return: The validity_period of this SlaveLicenseTypeAllOf.  # noqa: E501
        :rtype: int
        """
        return self._validity_period

    @validity_period.setter
    def validity_period(self, validity_period):
        """Sets the validity_period of this SlaveLicenseTypeAllOf.


        :param validity_period: The validity_period of this SlaveLicenseTypeAllOf.  # noqa: E501
        :type: int
        """

        self._validity_period = validity_period

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SlaveLicenseTypeAllOf):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
