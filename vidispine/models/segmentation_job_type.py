# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class SegmentationJobType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'segment_uri_postfix': 'str',
        'segment_length': 'TimeCodeType',
        'playlist_output': 'str',
        'input': 'str',
        'segment_uri_prefix': 'str',
        'container_format': 'str'
    }

    attribute_map = {
        'segment_uri_postfix': 'segmentUriPostfix',
        'segment_length': 'segmentLength',
        'playlist_output': 'playlistOutput',
        'input': 'input',
        'segment_uri_prefix': 'segmentUriPrefix',
        'container_format': 'containerFormat'
    }

    def __init__(self, segment_uri_postfix=None, segment_length=None, playlist_output=None, input=None, segment_uri_prefix=None, container_format=None):  # noqa: E501
        """SegmentationJobType - a model defined in OpenAPI"""  # noqa: E501

        self._segment_uri_postfix = None
        self._segment_length = None
        self._playlist_output = None
        self._input = None
        self._segment_uri_prefix = None
        self._container_format = None
        self.discriminator = None

        self.segment_uri_postfix = segment_uri_postfix
        self.segment_length = segment_length
        self.playlist_output = playlist_output
        self.input = input
        self.segment_uri_prefix = segment_uri_prefix
        self.container_format = container_format

    @property
    def segment_uri_postfix(self):
        """Gets the segment_uri_postfix of this SegmentationJobType.  # noqa: E501


        :return: The segment_uri_postfix of this SegmentationJobType.  # noqa: E501
        :rtype: str
        """
        return self._segment_uri_postfix

    @segment_uri_postfix.setter
    def segment_uri_postfix(self, segment_uri_postfix):
        """Sets the segment_uri_postfix of this SegmentationJobType.


        :param segment_uri_postfix: The segment_uri_postfix of this SegmentationJobType.  # noqa: E501
        :type: str
        """
        if segment_uri_postfix is None:
            raise ValueError("Invalid value for `segment_uri_postfix`, must not be `None`")  # noqa: E501

        self._segment_uri_postfix = segment_uri_postfix

    @property
    def segment_length(self):
        """Gets the segment_length of this SegmentationJobType.  # noqa: E501


        :return: The segment_length of this SegmentationJobType.  # noqa: E501
        :rtype: TimeCodeType
        """
        return self._segment_length

    @segment_length.setter
    def segment_length(self, segment_length):
        """Sets the segment_length of this SegmentationJobType.


        :param segment_length: The segment_length of this SegmentationJobType.  # noqa: E501
        :type: TimeCodeType
        """
        if segment_length is None:
            raise ValueError("Invalid value for `segment_length`, must not be `None`")  # noqa: E501

        self._segment_length = segment_length

    @property
    def playlist_output(self):
        """Gets the playlist_output of this SegmentationJobType.  # noqa: E501


        :return: The playlist_output of this SegmentationJobType.  # noqa: E501
        :rtype: str
        """
        return self._playlist_output

    @playlist_output.setter
    def playlist_output(self, playlist_output):
        """Sets the playlist_output of this SegmentationJobType.


        :param playlist_output: The playlist_output of this SegmentationJobType.  # noqa: E501
        :type: str
        """
        if playlist_output is None:
            raise ValueError("Invalid value for `playlist_output`, must not be `None`")  # noqa: E501

        self._playlist_output = playlist_output

    @property
    def input(self):
        """Gets the input of this SegmentationJobType.  # noqa: E501


        :return: The input of this SegmentationJobType.  # noqa: E501
        :rtype: str
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this SegmentationJobType.


        :param input: The input of this SegmentationJobType.  # noqa: E501
        :type: str
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")  # noqa: E501

        self._input = input

    @property
    def segment_uri_prefix(self):
        """Gets the segment_uri_prefix of this SegmentationJobType.  # noqa: E501


        :return: The segment_uri_prefix of this SegmentationJobType.  # noqa: E501
        :rtype: str
        """
        return self._segment_uri_prefix

    @segment_uri_prefix.setter
    def segment_uri_prefix(self, segment_uri_prefix):
        """Sets the segment_uri_prefix of this SegmentationJobType.


        :param segment_uri_prefix: The segment_uri_prefix of this SegmentationJobType.  # noqa: E501
        :type: str
        """
        if segment_uri_prefix is None:
            raise ValueError("Invalid value for `segment_uri_prefix`, must not be `None`")  # noqa: E501

        self._segment_uri_prefix = segment_uri_prefix

    @property
    def container_format(self):
        """Gets the container_format of this SegmentationJobType.  # noqa: E501


        :return: The container_format of this SegmentationJobType.  # noqa: E501
        :rtype: str
        """
        return self._container_format

    @container_format.setter
    def container_format(self, container_format):
        """Sets the container_format of this SegmentationJobType.


        :param container_format: The container_format of this SegmentationJobType.  # noqa: E501
        :type: str
        """
        if container_format is None:
            raise ValueError("Invalid value for `container_format`, must not be `None`")  # noqa: E501

        self._container_format = container_format

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SegmentationJobType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
