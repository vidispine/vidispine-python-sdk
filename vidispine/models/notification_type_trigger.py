# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class NotificationTypeTrigger(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'group': 'NotificationGroupTriggerType',
        'deletion_lock': 'NotificationDeletionLockTriggerType',
        'storage': 'NotificationStorageTriggerType',
        'shape': 'NotificationShapeTriggerType',
        'collection': 'NotificationCollectionTriggerType',
        'quota': 'NotificationQuotaTriggerType',
        'access': 'NotificationAccessTriggerType',
        'item': 'NotificationItemTriggerType',
        'job': 'NotificationJobTriggerType',
        'file': 'NotificationFileTriggerType',
        'document': 'NotificationDocumentTriggerType',
        'metadata': 'NotificationMetadataTriggerType'
    }

    attribute_map = {
        'group': 'group',
        'deletion_lock': 'deletionLock',
        'storage': 'storage',
        'shape': 'shape',
        'collection': 'collection',
        'quota': 'quota',
        'access': 'access',
        'item': 'item',
        'job': 'job',
        'file': 'file',
        'document': 'document',
        'metadata': 'metadata'
    }

    def __init__(self, group=None, deletion_lock=None, storage=None, shape=None, collection=None, quota=None, access=None, item=None, job=None, file=None, document=None, metadata=None):  # noqa: E501
        """NotificationTypeTrigger - a model defined in OpenAPI"""  # noqa: E501

        self._group = None
        self._deletion_lock = None
        self._storage = None
        self._shape = None
        self._collection = None
        self._quota = None
        self._access = None
        self._item = None
        self._job = None
        self._file = None
        self._document = None
        self._metadata = None
        self.discriminator = None

        if group is not None:
            self.group = group
        if deletion_lock is not None:
            self.deletion_lock = deletion_lock
        if storage is not None:
            self.storage = storage
        if shape is not None:
            self.shape = shape
        if collection is not None:
            self.collection = collection
        if quota is not None:
            self.quota = quota
        if access is not None:
            self.access = access
        if item is not None:
            self.item = item
        if job is not None:
            self.job = job
        if file is not None:
            self.file = file
        if document is not None:
            self.document = document
        if metadata is not None:
            self.metadata = metadata

    @property
    def group(self):
        """Gets the group of this NotificationTypeTrigger.  # noqa: E501


        :return: The group of this NotificationTypeTrigger.  # noqa: E501
        :rtype: NotificationGroupTriggerType
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this NotificationTypeTrigger.


        :param group: The group of this NotificationTypeTrigger.  # noqa: E501
        :type: NotificationGroupTriggerType
        """

        self._group = group

    @property
    def deletion_lock(self):
        """Gets the deletion_lock of this NotificationTypeTrigger.  # noqa: E501


        :return: The deletion_lock of this NotificationTypeTrigger.  # noqa: E501
        :rtype: NotificationDeletionLockTriggerType
        """
        return self._deletion_lock

    @deletion_lock.setter
    def deletion_lock(self, deletion_lock):
        """Sets the deletion_lock of this NotificationTypeTrigger.


        :param deletion_lock: The deletion_lock of this NotificationTypeTrigger.  # noqa: E501
        :type: NotificationDeletionLockTriggerType
        """

        self._deletion_lock = deletion_lock

    @property
    def storage(self):
        """Gets the storage of this NotificationTypeTrigger.  # noqa: E501


        :return: The storage of this NotificationTypeTrigger.  # noqa: E501
        :rtype: NotificationStorageTriggerType
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this NotificationTypeTrigger.


        :param storage: The storage of this NotificationTypeTrigger.  # noqa: E501
        :type: NotificationStorageTriggerType
        """

        self._storage = storage

    @property
    def shape(self):
        """Gets the shape of this NotificationTypeTrigger.  # noqa: E501


        :return: The shape of this NotificationTypeTrigger.  # noqa: E501
        :rtype: NotificationShapeTriggerType
        """
        return self._shape

    @shape.setter
    def shape(self, shape):
        """Sets the shape of this NotificationTypeTrigger.


        :param shape: The shape of this NotificationTypeTrigger.  # noqa: E501
        :type: NotificationShapeTriggerType
        """

        self._shape = shape

    @property
    def collection(self):
        """Gets the collection of this NotificationTypeTrigger.  # noqa: E501


        :return: The collection of this NotificationTypeTrigger.  # noqa: E501
        :rtype: NotificationCollectionTriggerType
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this NotificationTypeTrigger.


        :param collection: The collection of this NotificationTypeTrigger.  # noqa: E501
        :type: NotificationCollectionTriggerType
        """

        self._collection = collection

    @property
    def quota(self):
        """Gets the quota of this NotificationTypeTrigger.  # noqa: E501


        :return: The quota of this NotificationTypeTrigger.  # noqa: E501
        :rtype: NotificationQuotaTriggerType
        """
        return self._quota

    @quota.setter
    def quota(self, quota):
        """Sets the quota of this NotificationTypeTrigger.


        :param quota: The quota of this NotificationTypeTrigger.  # noqa: E501
        :type: NotificationQuotaTriggerType
        """

        self._quota = quota

    @property
    def access(self):
        """Gets the access of this NotificationTypeTrigger.  # noqa: E501


        :return: The access of this NotificationTypeTrigger.  # noqa: E501
        :rtype: NotificationAccessTriggerType
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this NotificationTypeTrigger.


        :param access: The access of this NotificationTypeTrigger.  # noqa: E501
        :type: NotificationAccessTriggerType
        """

        self._access = access

    @property
    def item(self):
        """Gets the item of this NotificationTypeTrigger.  # noqa: E501


        :return: The item of this NotificationTypeTrigger.  # noqa: E501
        :rtype: NotificationItemTriggerType
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this NotificationTypeTrigger.


        :param item: The item of this NotificationTypeTrigger.  # noqa: E501
        :type: NotificationItemTriggerType
        """

        self._item = item

    @property
    def job(self):
        """Gets the job of this NotificationTypeTrigger.  # noqa: E501


        :return: The job of this NotificationTypeTrigger.  # noqa: E501
        :rtype: NotificationJobTriggerType
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this NotificationTypeTrigger.


        :param job: The job of this NotificationTypeTrigger.  # noqa: E501
        :type: NotificationJobTriggerType
        """

        self._job = job

    @property
    def file(self):
        """Gets the file of this NotificationTypeTrigger.  # noqa: E501


        :return: The file of this NotificationTypeTrigger.  # noqa: E501
        :rtype: NotificationFileTriggerType
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this NotificationTypeTrigger.


        :param file: The file of this NotificationTypeTrigger.  # noqa: E501
        :type: NotificationFileTriggerType
        """

        self._file = file

    @property
    def document(self):
        """Gets the document of this NotificationTypeTrigger.  # noqa: E501


        :return: The document of this NotificationTypeTrigger.  # noqa: E501
        :rtype: NotificationDocumentTriggerType
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this NotificationTypeTrigger.


        :param document: The document of this NotificationTypeTrigger.  # noqa: E501
        :type: NotificationDocumentTriggerType
        """

        self._document = document

    @property
    def metadata(self):
        """Gets the metadata of this NotificationTypeTrigger.  # noqa: E501


        :return: The metadata of this NotificationTypeTrigger.  # noqa: E501
        :rtype: NotificationMetadataTriggerType
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this NotificationTypeTrigger.


        :param metadata: The metadata of this NotificationTypeTrigger.  # noqa: E501
        :type: NotificationMetadataTriggerType
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationTypeTrigger):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
