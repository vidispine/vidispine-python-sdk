# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class ComplexJobTypeInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'scan_for_start_pts': 'int',
        'bulky_metadata_request': 'ComplexJobBulkyMetadataRequestType',
        'dms1_target_uri': 'str',
        'pageno': 'int',
        'interval': 'TimeIntervalType',
        'uri': 'list[str]',
        'partial_file': 'PartialFileDemuxerInfoType',
        'faststart_duration': 'TimeCodeType',
        'range': 'list[SequenceRangeType]',
        'demuxer_setting': 'list[KeyValuePairType]',
        'interval_is_dts': 'bool',
        'double_duration_hack': 'int',
        'analyze': 'ComplexJobAnalyzeType',
        'id': 'int'
    }

    attribute_map = {
        'scan_for_start_pts': 'scanForStartPTS',
        'bulky_metadata_request': 'bulkyMetadataRequest',
        'dms1_target_uri': 'dms1TargetUri',
        'pageno': 'pageno',
        'interval': 'interval',
        'uri': 'uri',
        'partial_file': 'partialFile',
        'faststart_duration': 'faststartDuration',
        'range': 'range',
        'demuxer_setting': 'demuxerSetting',
        'interval_is_dts': 'intervalIsDts',
        'double_duration_hack': 'doubleDurationHack',
        'analyze': 'analyze',
        'id': 'id'
    }

    def __init__(self, scan_for_start_pts=None, bulky_metadata_request=None, dms1_target_uri=None, pageno=None, interval=None, uri=None, partial_file=None, faststart_duration=None, range=None, demuxer_setting=None, interval_is_dts=None, double_duration_hack=None, analyze=None, id=None):  # noqa: E501
        """ComplexJobTypeInput - a model defined in OpenAPI"""  # noqa: E501

        self._scan_for_start_pts = None
        self._bulky_metadata_request = None
        self._dms1_target_uri = None
        self._pageno = None
        self._interval = None
        self._uri = None
        self._partial_file = None
        self._faststart_duration = None
        self._range = None
        self._demuxer_setting = None
        self._interval_is_dts = None
        self._double_duration_hack = None
        self._analyze = None
        self._id = None
        self.discriminator = None

        if scan_for_start_pts is not None:
            self.scan_for_start_pts = scan_for_start_pts
        if bulky_metadata_request is not None:
            self.bulky_metadata_request = bulky_metadata_request
        if dms1_target_uri is not None:
            self.dms1_target_uri = dms1_target_uri
        if pageno is not None:
            self.pageno = pageno
        if interval is not None:
            self.interval = interval
        if uri is not None:
            self.uri = uri
        if partial_file is not None:
            self.partial_file = partial_file
        if faststart_duration is not None:
            self.faststart_duration = faststart_duration
        if range is not None:
            self.range = range
        if demuxer_setting is not None:
            self.demuxer_setting = demuxer_setting
        if interval_is_dts is not None:
            self.interval_is_dts = interval_is_dts
        if double_duration_hack is not None:
            self.double_duration_hack = double_duration_hack
        if analyze is not None:
            self.analyze = analyze
        self.id = id

    @property
    def scan_for_start_pts(self):
        """Gets the scan_for_start_pts of this ComplexJobTypeInput.  # noqa: E501


        :return: The scan_for_start_pts of this ComplexJobTypeInput.  # noqa: E501
        :rtype: int
        """
        return self._scan_for_start_pts

    @scan_for_start_pts.setter
    def scan_for_start_pts(self, scan_for_start_pts):
        """Sets the scan_for_start_pts of this ComplexJobTypeInput.


        :param scan_for_start_pts: The scan_for_start_pts of this ComplexJobTypeInput.  # noqa: E501
        :type: int
        """

        self._scan_for_start_pts = scan_for_start_pts

    @property
    def bulky_metadata_request(self):
        """Gets the bulky_metadata_request of this ComplexJobTypeInput.  # noqa: E501


        :return: The bulky_metadata_request of this ComplexJobTypeInput.  # noqa: E501
        :rtype: ComplexJobBulkyMetadataRequestType
        """
        return self._bulky_metadata_request

    @bulky_metadata_request.setter
    def bulky_metadata_request(self, bulky_metadata_request):
        """Sets the bulky_metadata_request of this ComplexJobTypeInput.


        :param bulky_metadata_request: The bulky_metadata_request of this ComplexJobTypeInput.  # noqa: E501
        :type: ComplexJobBulkyMetadataRequestType
        """

        self._bulky_metadata_request = bulky_metadata_request

    @property
    def dms1_target_uri(self):
        """Gets the dms1_target_uri of this ComplexJobTypeInput.  # noqa: E501


        :return: The dms1_target_uri of this ComplexJobTypeInput.  # noqa: E501
        :rtype: str
        """
        return self._dms1_target_uri

    @dms1_target_uri.setter
    def dms1_target_uri(self, dms1_target_uri):
        """Sets the dms1_target_uri of this ComplexJobTypeInput.


        :param dms1_target_uri: The dms1_target_uri of this ComplexJobTypeInput.  # noqa: E501
        :type: str
        """

        self._dms1_target_uri = dms1_target_uri

    @property
    def pageno(self):
        """Gets the pageno of this ComplexJobTypeInput.  # noqa: E501


        :return: The pageno of this ComplexJobTypeInput.  # noqa: E501
        :rtype: int
        """
        return self._pageno

    @pageno.setter
    def pageno(self, pageno):
        """Sets the pageno of this ComplexJobTypeInput.


        :param pageno: The pageno of this ComplexJobTypeInput.  # noqa: E501
        :type: int
        """

        self._pageno = pageno

    @property
    def interval(self):
        """Gets the interval of this ComplexJobTypeInput.  # noqa: E501


        :return: The interval of this ComplexJobTypeInput.  # noqa: E501
        :rtype: TimeIntervalType
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this ComplexJobTypeInput.


        :param interval: The interval of this ComplexJobTypeInput.  # noqa: E501
        :type: TimeIntervalType
        """

        self._interval = interval

    @property
    def uri(self):
        """Gets the uri of this ComplexJobTypeInput.  # noqa: E501


        :return: The uri of this ComplexJobTypeInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ComplexJobTypeInput.


        :param uri: The uri of this ComplexJobTypeInput.  # noqa: E501
        :type: list[str]
        """

        self._uri = uri

    @property
    def partial_file(self):
        """Gets the partial_file of this ComplexJobTypeInput.  # noqa: E501


        :return: The partial_file of this ComplexJobTypeInput.  # noqa: E501
        :rtype: PartialFileDemuxerInfoType
        """
        return self._partial_file

    @partial_file.setter
    def partial_file(self, partial_file):
        """Sets the partial_file of this ComplexJobTypeInput.


        :param partial_file: The partial_file of this ComplexJobTypeInput.  # noqa: E501
        :type: PartialFileDemuxerInfoType
        """

        self._partial_file = partial_file

    @property
    def faststart_duration(self):
        """Gets the faststart_duration of this ComplexJobTypeInput.  # noqa: E501


        :return: The faststart_duration of this ComplexJobTypeInput.  # noqa: E501
        :rtype: TimeCodeType
        """
        return self._faststart_duration

    @faststart_duration.setter
    def faststart_duration(self, faststart_duration):
        """Sets the faststart_duration of this ComplexJobTypeInput.


        :param faststart_duration: The faststart_duration of this ComplexJobTypeInput.  # noqa: E501
        :type: TimeCodeType
        """

        self._faststart_duration = faststart_duration

    @property
    def range(self):
        """Gets the range of this ComplexJobTypeInput.  # noqa: E501


        :return: The range of this ComplexJobTypeInput.  # noqa: E501
        :rtype: list[SequenceRangeType]
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this ComplexJobTypeInput.


        :param range: The range of this ComplexJobTypeInput.  # noqa: E501
        :type: list[SequenceRangeType]
        """

        self._range = range

    @property
    def demuxer_setting(self):
        """Gets the demuxer_setting of this ComplexJobTypeInput.  # noqa: E501


        :return: The demuxer_setting of this ComplexJobTypeInput.  # noqa: E501
        :rtype: list[KeyValuePairType]
        """
        return self._demuxer_setting

    @demuxer_setting.setter
    def demuxer_setting(self, demuxer_setting):
        """Sets the demuxer_setting of this ComplexJobTypeInput.


        :param demuxer_setting: The demuxer_setting of this ComplexJobTypeInput.  # noqa: E501
        :type: list[KeyValuePairType]
        """

        self._demuxer_setting = demuxer_setting

    @property
    def interval_is_dts(self):
        """Gets the interval_is_dts of this ComplexJobTypeInput.  # noqa: E501


        :return: The interval_is_dts of this ComplexJobTypeInput.  # noqa: E501
        :rtype: bool
        """
        return self._interval_is_dts

    @interval_is_dts.setter
    def interval_is_dts(self, interval_is_dts):
        """Sets the interval_is_dts of this ComplexJobTypeInput.


        :param interval_is_dts: The interval_is_dts of this ComplexJobTypeInput.  # noqa: E501
        :type: bool
        """

        self._interval_is_dts = interval_is_dts

    @property
    def double_duration_hack(self):
        """Gets the double_duration_hack of this ComplexJobTypeInput.  # noqa: E501


        :return: The double_duration_hack of this ComplexJobTypeInput.  # noqa: E501
        :rtype: int
        """
        return self._double_duration_hack

    @double_duration_hack.setter
    def double_duration_hack(self, double_duration_hack):
        """Sets the double_duration_hack of this ComplexJobTypeInput.


        :param double_duration_hack: The double_duration_hack of this ComplexJobTypeInput.  # noqa: E501
        :type: int
        """

        self._double_duration_hack = double_duration_hack

    @property
    def analyze(self):
        """Gets the analyze of this ComplexJobTypeInput.  # noqa: E501


        :return: The analyze of this ComplexJobTypeInput.  # noqa: E501
        :rtype: ComplexJobAnalyzeType
        """
        return self._analyze

    @analyze.setter
    def analyze(self, analyze):
        """Sets the analyze of this ComplexJobTypeInput.


        :param analyze: The analyze of this ComplexJobTypeInput.  # noqa: E501
        :type: ComplexJobAnalyzeType
        """

        self._analyze = analyze

    @property
    def id(self):
        """Gets the id of this ComplexJobTypeInput.  # noqa: E501


        :return: The id of this ComplexJobTypeInput.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ComplexJobTypeInput.


        :param id: The id of this ComplexJobTypeInput.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComplexJobTypeInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
