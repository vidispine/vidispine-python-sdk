# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class ExportLocationType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'projection': 'str',
        'script': 'str',
        'uri': 'str',
        'tag': 'list[str]',
        'uri_list': 'list[str]',
        'name': 'str'
    }

    attribute_map = {
        'projection': 'projection',
        'script': 'script',
        'uri': 'uri',
        'tag': 'tag',
        'uri_list': 'uriList',
        'name': 'name'
    }

    def __init__(self, projection=None, script=None, uri=None, tag=None, uri_list=None, name=None):  # noqa: E501
        """ExportLocationType - a model defined in OpenAPI"""  # noqa: E501

        self._projection = None
        self._script = None
        self._uri = None
        self._tag = None
        self._uri_list = None
        self._name = None
        self.discriminator = None

        if projection is not None:
            self.projection = projection
        if script is not None:
            self.script = script
        if uri is not None:
            self.uri = uri
        if tag is not None:
            self.tag = tag
        if uri_list is not None:
            self.uri_list = uri_list
        if name is not None:
            self.name = name

    @property
    def projection(self):
        """Gets the projection of this ExportLocationType.  # noqa: E501


        :return: The projection of this ExportLocationType.  # noqa: E501
        :rtype: str
        """
        return self._projection

    @projection.setter
    def projection(self, projection):
        """Sets the projection of this ExportLocationType.


        :param projection: The projection of this ExportLocationType.  # noqa: E501
        :type: str
        """

        self._projection = projection

    @property
    def script(self):
        """Gets the script of this ExportLocationType.  # noqa: E501


        :return: The script of this ExportLocationType.  # noqa: E501
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this ExportLocationType.


        :param script: The script of this ExportLocationType.  # noqa: E501
        :type: str
        """

        self._script = script

    @property
    def uri(self):
        """Gets the uri of this ExportLocationType.  # noqa: E501


        :return: The uri of this ExportLocationType.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ExportLocationType.


        :param uri: The uri of this ExportLocationType.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def tag(self):
        """Gets the tag of this ExportLocationType.  # noqa: E501


        :return: The tag of this ExportLocationType.  # noqa: E501
        :rtype: list[str]
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this ExportLocationType.


        :param tag: The tag of this ExportLocationType.  # noqa: E501
        :type: list[str]
        """

        self._tag = tag

    @property
    def uri_list(self):
        """Gets the uri_list of this ExportLocationType.  # noqa: E501


        :return: The uri_list of this ExportLocationType.  # noqa: E501
        :rtype: list[str]
        """
        return self._uri_list

    @uri_list.setter
    def uri_list(self, uri_list):
        """Sets the uri_list of this ExportLocationType.


        :param uri_list: The uri_list of this ExportLocationType.  # noqa: E501
        :type: list[str]
        """

        self._uri_list = uri_list

    @property
    def name(self):
        """Gets the name of this ExportLocationType.  # noqa: E501


        :return: The name of this ExportLocationType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExportLocationType.


        :param name: The name of this ExportLocationType.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExportLocationType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
