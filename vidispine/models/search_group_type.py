# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class SearchGroupType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'operator': 'SearchOperatorType',
        'field': 'list[SearchFieldType]',
        'group': 'list[SearchGroupType]',
        'name': 'str',
        'reference': 'str'
    }

    attribute_map = {
        'operator': 'operator',
        'field': 'field',
        'group': 'group',
        'name': 'name',
        'reference': 'reference'
    }

    def __init__(self, operator=None, field=None, group=None, name=None, reference=None):  # noqa: E501
        """SearchGroupType - a model defined in OpenAPI"""  # noqa: E501

        self._operator = None
        self._field = None
        self._group = None
        self._name = None
        self._reference = None
        self.discriminator = None

        if operator is not None:
            self.operator = operator
        if field is not None:
            self.field = field
        if group is not None:
            self.group = group
        if name is not None:
            self.name = name
        if reference is not None:
            self.reference = reference

    @property
    def operator(self):
        """Gets the operator of this SearchGroupType.  # noqa: E501


        :return: The operator of this SearchGroupType.  # noqa: E501
        :rtype: SearchOperatorType
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this SearchGroupType.


        :param operator: The operator of this SearchGroupType.  # noqa: E501
        :type: SearchOperatorType
        """

        self._operator = operator

    @property
    def field(self):
        """Gets the field of this SearchGroupType.  # noqa: E501


        :return: The field of this SearchGroupType.  # noqa: E501
        :rtype: list[SearchFieldType]
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this SearchGroupType.


        :param field: The field of this SearchGroupType.  # noqa: E501
        :type: list[SearchFieldType]
        """

        self._field = field

    @property
    def group(self):
        """Gets the group of this SearchGroupType.  # noqa: E501


        :return: The group of this SearchGroupType.  # noqa: E501
        :rtype: list[SearchGroupType]
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this SearchGroupType.


        :param group: The group of this SearchGroupType.  # noqa: E501
        :type: list[SearchGroupType]
        """

        self._group = group

    @property
    def name(self):
        """Gets the name of this SearchGroupType.  # noqa: E501


        :return: The name of this SearchGroupType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SearchGroupType.


        :param name: The name of this SearchGroupType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def reference(self):
        """Gets the reference of this SearchGroupType.  # noqa: E501


        :return: The reference of this SearchGroupType.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this SearchGroupType.


        :param reference: The reference of this SearchGroupType.  # noqa: E501
        :type: str
        """

        self._reference = reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchGroupType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
