# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class OtifPresetType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'resource': 'list[NameURIPairType]',
        'uuid': 'str',
        'version_major': 'int',
        'version_patch': 'int',
        'version_minor': 'int',
        'configuration': 'list[KeyValuePairType]'
    }

    attribute_map = {
        'resource': 'resource',
        'uuid': 'uuid',
        'version_major': 'versionMajor',
        'version_patch': 'versionPatch',
        'version_minor': 'versionMinor',
        'configuration': 'configuration'
    }

    def __init__(self, resource=None, uuid=None, version_major=None, version_patch=None, version_minor=None, configuration=None):  # noqa: E501
        """OtifPresetType - a model defined in OpenAPI"""  # noqa: E501

        self._resource = None
        self._uuid = None
        self._version_major = None
        self._version_patch = None
        self._version_minor = None
        self._configuration = None
        self.discriminator = None

        if resource is not None:
            self.resource = resource
        self.uuid = uuid
        self.version_major = version_major
        self.version_patch = version_patch
        self.version_minor = version_minor
        if configuration is not None:
            self.configuration = configuration

    @property
    def resource(self):
        """Gets the resource of this OtifPresetType.  # noqa: E501


        :return: The resource of this OtifPresetType.  # noqa: E501
        :rtype: list[NameURIPairType]
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this OtifPresetType.


        :param resource: The resource of this OtifPresetType.  # noqa: E501
        :type: list[NameURIPairType]
        """

        self._resource = resource

    @property
    def uuid(self):
        """Gets the uuid of this OtifPresetType.  # noqa: E501


        :return: The uuid of this OtifPresetType.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this OtifPresetType.


        :param uuid: The uuid of this OtifPresetType.  # noqa: E501
        :type: str
        """
        if uuid is None:
            raise ValueError("Invalid value for `uuid`, must not be `None`")  # noqa: E501

        self._uuid = uuid

    @property
    def version_major(self):
        """Gets the version_major of this OtifPresetType.  # noqa: E501


        :return: The version_major of this OtifPresetType.  # noqa: E501
        :rtype: int
        """
        return self._version_major

    @version_major.setter
    def version_major(self, version_major):
        """Sets the version_major of this OtifPresetType.


        :param version_major: The version_major of this OtifPresetType.  # noqa: E501
        :type: int
        """
        if version_major is None:
            raise ValueError("Invalid value for `version_major`, must not be `None`")  # noqa: E501

        self._version_major = version_major

    @property
    def version_patch(self):
        """Gets the version_patch of this OtifPresetType.  # noqa: E501


        :return: The version_patch of this OtifPresetType.  # noqa: E501
        :rtype: int
        """
        return self._version_patch

    @version_patch.setter
    def version_patch(self, version_patch):
        """Sets the version_patch of this OtifPresetType.


        :param version_patch: The version_patch of this OtifPresetType.  # noqa: E501
        :type: int
        """
        if version_patch is None:
            raise ValueError("Invalid value for `version_patch`, must not be `None`")  # noqa: E501

        self._version_patch = version_patch

    @property
    def version_minor(self):
        """Gets the version_minor of this OtifPresetType.  # noqa: E501


        :return: The version_minor of this OtifPresetType.  # noqa: E501
        :rtype: int
        """
        return self._version_minor

    @version_minor.setter
    def version_minor(self, version_minor):
        """Sets the version_minor of this OtifPresetType.


        :param version_minor: The version_minor of this OtifPresetType.  # noqa: E501
        :type: int
        """
        if version_minor is None:
            raise ValueError("Invalid value for `version_minor`, must not be `None`")  # noqa: E501

        self._version_minor = version_minor

    @property
    def configuration(self):
        """Gets the configuration of this OtifPresetType.  # noqa: E501


        :return: The configuration of this OtifPresetType.  # noqa: E501
        :rtype: list[KeyValuePairType]
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this OtifPresetType.


        :param configuration: The configuration of this OtifPresetType.  # noqa: E501
        :type: list[KeyValuePairType]
        """

        self._configuration = configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OtifPresetType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
