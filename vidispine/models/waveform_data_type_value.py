# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class WaveformDataTypeValue(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'item_track': 'str',
        'stream': 'int',
        'file_path': 'list[str]',
        'data': 'list[float]',
        'channel': 'int',
        'file_id': 'list[str]'
    }

    attribute_map = {
        'item_track': 'itemTrack',
        'stream': 'stream',
        'file_path': 'filePath',
        'data': 'data',
        'channel': 'channel',
        'file_id': 'fileId'
    }

    def __init__(self, item_track=None, stream=None, file_path=None, data=None, channel=None, file_id=None):  # noqa: E501
        """WaveformDataTypeValue - a model defined in OpenAPI"""  # noqa: E501

        self._item_track = None
        self._stream = None
        self._file_path = None
        self._data = None
        self._channel = None
        self._file_id = None
        self.discriminator = None

        if item_track is not None:
            self.item_track = item_track
        if stream is not None:
            self.stream = stream
        if file_path is not None:
            self.file_path = file_path
        if data is not None:
            self.data = data
        if channel is not None:
            self.channel = channel
        if file_id is not None:
            self.file_id = file_id

    @property
    def item_track(self):
        """Gets the item_track of this WaveformDataTypeValue.  # noqa: E501


        :return: The item_track of this WaveformDataTypeValue.  # noqa: E501
        :rtype: str
        """
        return self._item_track

    @item_track.setter
    def item_track(self, item_track):
        """Sets the item_track of this WaveformDataTypeValue.


        :param item_track: The item_track of this WaveformDataTypeValue.  # noqa: E501
        :type: str
        """

        self._item_track = item_track

    @property
    def stream(self):
        """Gets the stream of this WaveformDataTypeValue.  # noqa: E501


        :return: The stream of this WaveformDataTypeValue.  # noqa: E501
        :rtype: int
        """
        return self._stream

    @stream.setter
    def stream(self, stream):
        """Sets the stream of this WaveformDataTypeValue.


        :param stream: The stream of this WaveformDataTypeValue.  # noqa: E501
        :type: int
        """

        self._stream = stream

    @property
    def file_path(self):
        """Gets the file_path of this WaveformDataTypeValue.  # noqa: E501


        :return: The file_path of this WaveformDataTypeValue.  # noqa: E501
        :rtype: list[str]
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this WaveformDataTypeValue.


        :param file_path: The file_path of this WaveformDataTypeValue.  # noqa: E501
        :type: list[str]
        """

        self._file_path = file_path

    @property
    def data(self):
        """Gets the data of this WaveformDataTypeValue.  # noqa: E501


        :return: The data of this WaveformDataTypeValue.  # noqa: E501
        :rtype: list[float]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this WaveformDataTypeValue.


        :param data: The data of this WaveformDataTypeValue.  # noqa: E501
        :type: list[float]
        """

        self._data = data

    @property
    def channel(self):
        """Gets the channel of this WaveformDataTypeValue.  # noqa: E501


        :return: The channel of this WaveformDataTypeValue.  # noqa: E501
        :rtype: int
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this WaveformDataTypeValue.


        :param channel: The channel of this WaveformDataTypeValue.  # noqa: E501
        :type: int
        """

        self._channel = channel

    @property
    def file_id(self):
        """Gets the file_id of this WaveformDataTypeValue.  # noqa: E501


        :return: The file_id of this WaveformDataTypeValue.  # noqa: E501
        :rtype: list[str]
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this WaveformDataTypeValue.


        :param file_id: The file_id of this WaveformDataTypeValue.  # noqa: E501
        :type: list[str]
        """

        self._file_id = file_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WaveformDataTypeValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
