# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class SearchResultEntryType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'end': 'str',
        'start': 'str',
        'timespan': 'list[SearchResultEntryTimespanType]',
        'parent_type': 'str',
        'collection': 'CollectionType',
        'item': 'ItemType',
        'shape': 'ShapeType',
        'base': 'str',
        'parent_id': 'str',
        'file': 'FileType',
        'type': 'str',
        'id': 'str'
    }

    attribute_map = {
        'end': 'end',
        'start': 'start',
        'timespan': 'timespan',
        'parent_type': 'parent_type',
        'collection': 'collection',
        'item': 'item',
        'shape': 'shape',
        'base': 'base',
        'parent_id': 'parent_id',
        'file': 'file',
        'type': 'type',
        'id': 'id'
    }

    def __init__(self, end=None, start=None, timespan=None, parent_type=None, collection=None, item=None, shape=None, base=None, parent_id=None, file=None, type=None, id=None):  # noqa: E501
        """SearchResultEntryType - a model defined in OpenAPI"""  # noqa: E501

        self._end = None
        self._start = None
        self._timespan = None
        self._parent_type = None
        self._collection = None
        self._item = None
        self._shape = None
        self._base = None
        self._parent_id = None
        self._file = None
        self._type = None
        self._id = None
        self.discriminator = None

        if end is not None:
            self.end = end
        if start is not None:
            self.start = start
        if timespan is not None:
            self.timespan = timespan
        if parent_type is not None:
            self.parent_type = parent_type
        if collection is not None:
            self.collection = collection
        if item is not None:
            self.item = item
        if shape is not None:
            self.shape = shape
        if base is not None:
            self.base = base
        if parent_id is not None:
            self.parent_id = parent_id
        if file is not None:
            self.file = file
        if type is not None:
            self.type = type
        if id is not None:
            self.id = id

    @property
    def end(self):
        """Gets the end of this SearchResultEntryType.  # noqa: E501


        :return: The end of this SearchResultEntryType.  # noqa: E501
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this SearchResultEntryType.


        :param end: The end of this SearchResultEntryType.  # noqa: E501
        :type: str
        """

        self._end = end

    @property
    def start(self):
        """Gets the start of this SearchResultEntryType.  # noqa: E501


        :return: The start of this SearchResultEntryType.  # noqa: E501
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this SearchResultEntryType.


        :param start: The start of this SearchResultEntryType.  # noqa: E501
        :type: str
        """

        self._start = start

    @property
    def timespan(self):
        """Gets the timespan of this SearchResultEntryType.  # noqa: E501


        :return: The timespan of this SearchResultEntryType.  # noqa: E501
        :rtype: list[SearchResultEntryTimespanType]
        """
        return self._timespan

    @timespan.setter
    def timespan(self, timespan):
        """Sets the timespan of this SearchResultEntryType.


        :param timespan: The timespan of this SearchResultEntryType.  # noqa: E501
        :type: list[SearchResultEntryTimespanType]
        """

        self._timespan = timespan

    @property
    def parent_type(self):
        """Gets the parent_type of this SearchResultEntryType.  # noqa: E501


        :return: The parent_type of this SearchResultEntryType.  # noqa: E501
        :rtype: str
        """
        return self._parent_type

    @parent_type.setter
    def parent_type(self, parent_type):
        """Sets the parent_type of this SearchResultEntryType.


        :param parent_type: The parent_type of this SearchResultEntryType.  # noqa: E501
        :type: str
        """

        self._parent_type = parent_type

    @property
    def collection(self):
        """Gets the collection of this SearchResultEntryType.  # noqa: E501


        :return: The collection of this SearchResultEntryType.  # noqa: E501
        :rtype: CollectionType
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this SearchResultEntryType.


        :param collection: The collection of this SearchResultEntryType.  # noqa: E501
        :type: CollectionType
        """

        self._collection = collection

    @property
    def item(self):
        """Gets the item of this SearchResultEntryType.  # noqa: E501


        :return: The item of this SearchResultEntryType.  # noqa: E501
        :rtype: ItemType
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this SearchResultEntryType.


        :param item: The item of this SearchResultEntryType.  # noqa: E501
        :type: ItemType
        """

        self._item = item

    @property
    def shape(self):
        """Gets the shape of this SearchResultEntryType.  # noqa: E501


        :return: The shape of this SearchResultEntryType.  # noqa: E501
        :rtype: ShapeType
        """
        return self._shape

    @shape.setter
    def shape(self, shape):
        """Sets the shape of this SearchResultEntryType.


        :param shape: The shape of this SearchResultEntryType.  # noqa: E501
        :type: ShapeType
        """

        self._shape = shape

    @property
    def base(self):
        """Gets the base of this SearchResultEntryType.  # noqa: E501


        :return: The base of this SearchResultEntryType.  # noqa: E501
        :rtype: str
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this SearchResultEntryType.


        :param base: The base of this SearchResultEntryType.  # noqa: E501
        :type: str
        """

        self._base = base

    @property
    def parent_id(self):
        """Gets the parent_id of this SearchResultEntryType.  # noqa: E501


        :return: The parent_id of this SearchResultEntryType.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this SearchResultEntryType.


        :param parent_id: The parent_id of this SearchResultEntryType.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def file(self):
        """Gets the file of this SearchResultEntryType.  # noqa: E501


        :return: The file of this SearchResultEntryType.  # noqa: E501
        :rtype: FileType
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this SearchResultEntryType.


        :param file: The file of this SearchResultEntryType.  # noqa: E501
        :type: FileType
        """

        self._file = file

    @property
    def type(self):
        """Gets the type of this SearchResultEntryType.  # noqa: E501


        :return: The type of this SearchResultEntryType.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SearchResultEntryType.


        :param type: The type of this SearchResultEntryType.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def id(self):
        """Gets the id of this SearchResultEntryType.  # noqa: E501


        :return: The id of this SearchResultEntryType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SearchResultEntryType.


        :param id: The id of this SearchResultEntryType.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchResultEntryType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
