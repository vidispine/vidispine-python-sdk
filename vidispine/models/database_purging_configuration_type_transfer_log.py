# coding: utf-8

"""
    Vidispine API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.x
    Contact: info@vidispine.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six
from . import *

class DatabasePurgingConfigurationTypeTransferLog(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'age': 'int',
        'compress': 'bool',
        'uri': 'str',
        'force_age': 'int',
        'batch': 'int'
    }

    attribute_map = {
        'age': 'age',
        'compress': 'compress',
        'uri': 'uri',
        'force_age': 'forceAge',
        'batch': 'batch'
    }

    def __init__(self, age=None, compress=None, uri=None, force_age=None, batch=None):  # noqa: E501
        """DatabasePurgingConfigurationTypeTransferLog - a model defined in OpenAPI"""  # noqa: E501

        self._age = None
        self._compress = None
        self._uri = None
        self._force_age = None
        self._batch = None
        self.discriminator = None

        if age is not None:
            self.age = age
        if compress is not None:
            self.compress = compress
        if uri is not None:
            self.uri = uri
        if force_age is not None:
            self.force_age = force_age
        if batch is not None:
            self.batch = batch

    @property
    def age(self):
        """Gets the age of this DatabasePurgingConfigurationTypeTransferLog.  # noqa: E501


        :return: The age of this DatabasePurgingConfigurationTypeTransferLog.  # noqa: E501
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this DatabasePurgingConfigurationTypeTransferLog.


        :param age: The age of this DatabasePurgingConfigurationTypeTransferLog.  # noqa: E501
        :type: int
        """

        self._age = age

    @property
    def compress(self):
        """Gets the compress of this DatabasePurgingConfigurationTypeTransferLog.  # noqa: E501


        :return: The compress of this DatabasePurgingConfigurationTypeTransferLog.  # noqa: E501
        :rtype: bool
        """
        return self._compress

    @compress.setter
    def compress(self, compress):
        """Sets the compress of this DatabasePurgingConfigurationTypeTransferLog.


        :param compress: The compress of this DatabasePurgingConfigurationTypeTransferLog.  # noqa: E501
        :type: bool
        """

        self._compress = compress

    @property
    def uri(self):
        """Gets the uri of this DatabasePurgingConfigurationTypeTransferLog.  # noqa: E501


        :return: The uri of this DatabasePurgingConfigurationTypeTransferLog.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this DatabasePurgingConfigurationTypeTransferLog.


        :param uri: The uri of this DatabasePurgingConfigurationTypeTransferLog.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def force_age(self):
        """Gets the force_age of this DatabasePurgingConfigurationTypeTransferLog.  # noqa: E501


        :return: The force_age of this DatabasePurgingConfigurationTypeTransferLog.  # noqa: E501
        :rtype: int
        """
        return self._force_age

    @force_age.setter
    def force_age(self, force_age):
        """Sets the force_age of this DatabasePurgingConfigurationTypeTransferLog.


        :param force_age: The force_age of this DatabasePurgingConfigurationTypeTransferLog.  # noqa: E501
        :type: int
        """

        self._force_age = force_age

    @property
    def batch(self):
        """Gets the batch of this DatabasePurgingConfigurationTypeTransferLog.  # noqa: E501


        :return: The batch of this DatabasePurgingConfigurationTypeTransferLog.  # noqa: E501
        :rtype: int
        """
        return self._batch

    @batch.setter
    def batch(self, batch):
        """Sets the batch of this DatabasePurgingConfigurationTypeTransferLog.


        :param batch: The batch of this DatabasePurgingConfigurationTypeTransferLog.  # noqa: E501
        :type: int
        """

        self._batch = batch

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DatabasePurgingConfigurationTypeTransferLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
